
UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fcc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  0800508c  0800508c  0001508c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051dc  080051dc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080051dc  080051dc  000151dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051e4  080051e4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051e4  080051e4  000151e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051e8  080051e8  000151e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080051ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  20000070  0800525c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  0800525c  00020144  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009652  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019ea  00000000  00000000  000296ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000728  00000000  00000000  0002b0d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000680  00000000  00000000  0002b800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000118fc  00000000  00000000  0002be80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009b99  00000000  00000000  0003d77c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000681c4  00000000  00000000  00047315  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000af4d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f94  00000000  00000000  000af52c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005074 	.word	0x08005074

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08005074 	.word	0x08005074

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_ldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d115      	bne.n	8000274 <__aeabi_ldivmod+0x30>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d113      	bne.n	8000274 <__aeabi_ldivmod+0x30>
 800024c:	2900      	cmp	r1, #0
 800024e:	db06      	blt.n	800025e <__aeabi_ldivmod+0x1a>
 8000250:	dc01      	bgt.n	8000256 <__aeabi_ldivmod+0x12>
 8000252:	2800      	cmp	r0, #0
 8000254:	d006      	beq.n	8000264 <__aeabi_ldivmod+0x20>
 8000256:	2000      	movs	r0, #0
 8000258:	43c0      	mvns	r0, r0
 800025a:	0841      	lsrs	r1, r0, #1
 800025c:	e002      	b.n	8000264 <__aeabi_ldivmod+0x20>
 800025e:	2180      	movs	r1, #128	; 0x80
 8000260:	0609      	lsls	r1, r1, #24
 8000262:	2000      	movs	r0, #0
 8000264:	b407      	push	{r0, r1, r2}
 8000266:	4802      	ldr	r0, [pc, #8]	; (8000270 <__aeabi_ldivmod+0x2c>)
 8000268:	a101      	add	r1, pc, #4	; (adr r1, 8000270 <__aeabi_ldivmod+0x2c>)
 800026a:	1840      	adds	r0, r0, r1
 800026c:	9002      	str	r0, [sp, #8]
 800026e:	bd03      	pop	{r0, r1, pc}
 8000270:	ffffffd1 	.word	0xffffffd1
 8000274:	b403      	push	{r0, r1}
 8000276:	4668      	mov	r0, sp
 8000278:	b501      	push	{r0, lr}
 800027a:	9802      	ldr	r0, [sp, #8]
 800027c:	f000 f83c 	bl	80002f8 <__gnu_ldivmod_helper>
 8000280:	9b01      	ldr	r3, [sp, #4]
 8000282:	469e      	mov	lr, r3
 8000284:	b002      	add	sp, #8
 8000286:	bc0c      	pop	{r2, r3}
 8000288:	4770      	bx	lr
 800028a:	46c0      	nop			; (mov r8, r8)

0800028c <__aeabi_f2uiz>:
 800028c:	219e      	movs	r1, #158	; 0x9e
 800028e:	b510      	push	{r4, lr}
 8000290:	05c9      	lsls	r1, r1, #23
 8000292:	1c04      	adds	r4, r0, #0
 8000294:	f001 faae 	bl	80017f4 <__aeabi_fcmpge>
 8000298:	2800      	cmp	r0, #0
 800029a:	d103      	bne.n	80002a4 <__aeabi_f2uiz+0x18>
 800029c:	1c20      	adds	r0, r4, #0
 800029e:	f000 fb0f 	bl	80008c0 <__aeabi_f2iz>
 80002a2:	bd10      	pop	{r4, pc}
 80002a4:	219e      	movs	r1, #158	; 0x9e
 80002a6:	1c20      	adds	r0, r4, #0
 80002a8:	05c9      	lsls	r1, r1, #23
 80002aa:	f000 f95b 	bl	8000564 <__aeabi_fsub>
 80002ae:	f000 fb07 	bl	80008c0 <__aeabi_f2iz>
 80002b2:	2380      	movs	r3, #128	; 0x80
 80002b4:	061b      	lsls	r3, r3, #24
 80002b6:	469c      	mov	ip, r3
 80002b8:	4460      	add	r0, ip
 80002ba:	e7f2      	b.n	80002a2 <__aeabi_f2uiz+0x16>

080002bc <__aeabi_d2uiz>:
 80002bc:	b570      	push	{r4, r5, r6, lr}
 80002be:	2200      	movs	r2, #0
 80002c0:	4b0c      	ldr	r3, [pc, #48]	; (80002f4 <__aeabi_d2uiz+0x38>)
 80002c2:	0004      	movs	r4, r0
 80002c4:	000d      	movs	r5, r1
 80002c6:	f001 fa5b 	bl	8001780 <__aeabi_dcmpge>
 80002ca:	2800      	cmp	r0, #0
 80002cc:	d104      	bne.n	80002d8 <__aeabi_d2uiz+0x1c>
 80002ce:	0020      	movs	r0, r4
 80002d0:	0029      	movs	r1, r5
 80002d2:	f001 f9a3 	bl	800161c <__aeabi_d2iz>
 80002d6:	bd70      	pop	{r4, r5, r6, pc}
 80002d8:	4b06      	ldr	r3, [pc, #24]	; (80002f4 <__aeabi_d2uiz+0x38>)
 80002da:	2200      	movs	r2, #0
 80002dc:	0020      	movs	r0, r4
 80002de:	0029      	movs	r1, r5
 80002e0:	f000 fe0a 	bl	8000ef8 <__aeabi_dsub>
 80002e4:	f001 f99a 	bl	800161c <__aeabi_d2iz>
 80002e8:	2380      	movs	r3, #128	; 0x80
 80002ea:	061b      	lsls	r3, r3, #24
 80002ec:	469c      	mov	ip, r3
 80002ee:	4460      	add	r0, ip
 80002f0:	e7f1      	b.n	80002d6 <__aeabi_d2uiz+0x1a>
 80002f2:	46c0      	nop			; (mov r8, r8)
 80002f4:	41e00000 	.word	0x41e00000

080002f8 <__gnu_ldivmod_helper>:
 80002f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002fa:	46ce      	mov	lr, r9
 80002fc:	4647      	mov	r7, r8
 80002fe:	b580      	push	{r7, lr}
 8000300:	4691      	mov	r9, r2
 8000302:	4698      	mov	r8, r3
 8000304:	0004      	movs	r4, r0
 8000306:	000d      	movs	r5, r1
 8000308:	f001 faca 	bl	80018a0 <__divdi3>
 800030c:	0007      	movs	r7, r0
 800030e:	000e      	movs	r6, r1
 8000310:	0002      	movs	r2, r0
 8000312:	000b      	movs	r3, r1
 8000314:	4648      	mov	r0, r9
 8000316:	4641      	mov	r1, r8
 8000318:	f001 fa94 	bl	8001844 <__aeabi_lmul>
 800031c:	1a24      	subs	r4, r4, r0
 800031e:	418d      	sbcs	r5, r1
 8000320:	9b08      	ldr	r3, [sp, #32]
 8000322:	0038      	movs	r0, r7
 8000324:	0031      	movs	r1, r6
 8000326:	601c      	str	r4, [r3, #0]
 8000328:	605d      	str	r5, [r3, #4]
 800032a:	bcc0      	pop	{r6, r7}
 800032c:	46b9      	mov	r9, r7
 800032e:	46b0      	mov	r8, r6
 8000330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000332:	46c0      	nop			; (mov r8, r8)

08000334 <__aeabi_fdiv>:
 8000334:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000336:	464f      	mov	r7, r9
 8000338:	4646      	mov	r6, r8
 800033a:	46d6      	mov	lr, sl
 800033c:	0245      	lsls	r5, r0, #9
 800033e:	b5c0      	push	{r6, r7, lr}
 8000340:	0047      	lsls	r7, r0, #1
 8000342:	1c0c      	adds	r4, r1, #0
 8000344:	0a6d      	lsrs	r5, r5, #9
 8000346:	0e3f      	lsrs	r7, r7, #24
 8000348:	0fc6      	lsrs	r6, r0, #31
 800034a:	2f00      	cmp	r7, #0
 800034c:	d100      	bne.n	8000350 <__aeabi_fdiv+0x1c>
 800034e:	e070      	b.n	8000432 <__aeabi_fdiv+0xfe>
 8000350:	2fff      	cmp	r7, #255	; 0xff
 8000352:	d100      	bne.n	8000356 <__aeabi_fdiv+0x22>
 8000354:	e075      	b.n	8000442 <__aeabi_fdiv+0x10e>
 8000356:	00eb      	lsls	r3, r5, #3
 8000358:	2580      	movs	r5, #128	; 0x80
 800035a:	04ed      	lsls	r5, r5, #19
 800035c:	431d      	orrs	r5, r3
 800035e:	2300      	movs	r3, #0
 8000360:	4699      	mov	r9, r3
 8000362:	469a      	mov	sl, r3
 8000364:	3f7f      	subs	r7, #127	; 0x7f
 8000366:	0260      	lsls	r0, r4, #9
 8000368:	0a43      	lsrs	r3, r0, #9
 800036a:	4698      	mov	r8, r3
 800036c:	0063      	lsls	r3, r4, #1
 800036e:	0e1b      	lsrs	r3, r3, #24
 8000370:	0fe4      	lsrs	r4, r4, #31
 8000372:	2b00      	cmp	r3, #0
 8000374:	d04e      	beq.n	8000414 <__aeabi_fdiv+0xe0>
 8000376:	2bff      	cmp	r3, #255	; 0xff
 8000378:	d046      	beq.n	8000408 <__aeabi_fdiv+0xd4>
 800037a:	4642      	mov	r2, r8
 800037c:	00d0      	lsls	r0, r2, #3
 800037e:	2280      	movs	r2, #128	; 0x80
 8000380:	04d2      	lsls	r2, r2, #19
 8000382:	4302      	orrs	r2, r0
 8000384:	4690      	mov	r8, r2
 8000386:	2200      	movs	r2, #0
 8000388:	3b7f      	subs	r3, #127	; 0x7f
 800038a:	0031      	movs	r1, r6
 800038c:	1aff      	subs	r7, r7, r3
 800038e:	464b      	mov	r3, r9
 8000390:	4061      	eors	r1, r4
 8000392:	b2c9      	uxtb	r1, r1
 8000394:	4313      	orrs	r3, r2
 8000396:	2b0f      	cmp	r3, #15
 8000398:	d900      	bls.n	800039c <__aeabi_fdiv+0x68>
 800039a:	e0b5      	b.n	8000508 <__aeabi_fdiv+0x1d4>
 800039c:	486e      	ldr	r0, [pc, #440]	; (8000558 <__aeabi_fdiv+0x224>)
 800039e:	009b      	lsls	r3, r3, #2
 80003a0:	58c3      	ldr	r3, [r0, r3]
 80003a2:	469f      	mov	pc, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	4698      	mov	r8, r3
 80003a8:	0026      	movs	r6, r4
 80003aa:	4645      	mov	r5, r8
 80003ac:	4692      	mov	sl, r2
 80003ae:	4653      	mov	r3, sl
 80003b0:	2b02      	cmp	r3, #2
 80003b2:	d100      	bne.n	80003b6 <__aeabi_fdiv+0x82>
 80003b4:	e089      	b.n	80004ca <__aeabi_fdiv+0x196>
 80003b6:	2b03      	cmp	r3, #3
 80003b8:	d100      	bne.n	80003bc <__aeabi_fdiv+0x88>
 80003ba:	e09e      	b.n	80004fa <__aeabi_fdiv+0x1c6>
 80003bc:	2b01      	cmp	r3, #1
 80003be:	d018      	beq.n	80003f2 <__aeabi_fdiv+0xbe>
 80003c0:	003b      	movs	r3, r7
 80003c2:	337f      	adds	r3, #127	; 0x7f
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	dd69      	ble.n	800049c <__aeabi_fdiv+0x168>
 80003c8:	076a      	lsls	r2, r5, #29
 80003ca:	d004      	beq.n	80003d6 <__aeabi_fdiv+0xa2>
 80003cc:	220f      	movs	r2, #15
 80003ce:	402a      	ands	r2, r5
 80003d0:	2a04      	cmp	r2, #4
 80003d2:	d000      	beq.n	80003d6 <__aeabi_fdiv+0xa2>
 80003d4:	3504      	adds	r5, #4
 80003d6:	012a      	lsls	r2, r5, #4
 80003d8:	d503      	bpl.n	80003e2 <__aeabi_fdiv+0xae>
 80003da:	4b60      	ldr	r3, [pc, #384]	; (800055c <__aeabi_fdiv+0x228>)
 80003dc:	401d      	ands	r5, r3
 80003de:	003b      	movs	r3, r7
 80003e0:	3380      	adds	r3, #128	; 0x80
 80003e2:	2bfe      	cmp	r3, #254	; 0xfe
 80003e4:	dd00      	ble.n	80003e8 <__aeabi_fdiv+0xb4>
 80003e6:	e070      	b.n	80004ca <__aeabi_fdiv+0x196>
 80003e8:	01ad      	lsls	r5, r5, #6
 80003ea:	0a6d      	lsrs	r5, r5, #9
 80003ec:	b2d8      	uxtb	r0, r3
 80003ee:	e002      	b.n	80003f6 <__aeabi_fdiv+0xc2>
 80003f0:	000e      	movs	r6, r1
 80003f2:	2000      	movs	r0, #0
 80003f4:	2500      	movs	r5, #0
 80003f6:	05c0      	lsls	r0, r0, #23
 80003f8:	4328      	orrs	r0, r5
 80003fa:	07f6      	lsls	r6, r6, #31
 80003fc:	4330      	orrs	r0, r6
 80003fe:	bce0      	pop	{r5, r6, r7}
 8000400:	46ba      	mov	sl, r7
 8000402:	46b1      	mov	r9, r6
 8000404:	46a8      	mov	r8, r5
 8000406:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000408:	4643      	mov	r3, r8
 800040a:	2b00      	cmp	r3, #0
 800040c:	d13f      	bne.n	800048e <__aeabi_fdiv+0x15a>
 800040e:	2202      	movs	r2, #2
 8000410:	3fff      	subs	r7, #255	; 0xff
 8000412:	e003      	b.n	800041c <__aeabi_fdiv+0xe8>
 8000414:	4643      	mov	r3, r8
 8000416:	2b00      	cmp	r3, #0
 8000418:	d12d      	bne.n	8000476 <__aeabi_fdiv+0x142>
 800041a:	2201      	movs	r2, #1
 800041c:	0031      	movs	r1, r6
 800041e:	464b      	mov	r3, r9
 8000420:	4061      	eors	r1, r4
 8000422:	b2c9      	uxtb	r1, r1
 8000424:	4313      	orrs	r3, r2
 8000426:	2b0f      	cmp	r3, #15
 8000428:	d834      	bhi.n	8000494 <__aeabi_fdiv+0x160>
 800042a:	484d      	ldr	r0, [pc, #308]	; (8000560 <__aeabi_fdiv+0x22c>)
 800042c:	009b      	lsls	r3, r3, #2
 800042e:	58c3      	ldr	r3, [r0, r3]
 8000430:	469f      	mov	pc, r3
 8000432:	2d00      	cmp	r5, #0
 8000434:	d113      	bne.n	800045e <__aeabi_fdiv+0x12a>
 8000436:	2304      	movs	r3, #4
 8000438:	4699      	mov	r9, r3
 800043a:	3b03      	subs	r3, #3
 800043c:	2700      	movs	r7, #0
 800043e:	469a      	mov	sl, r3
 8000440:	e791      	b.n	8000366 <__aeabi_fdiv+0x32>
 8000442:	2d00      	cmp	r5, #0
 8000444:	d105      	bne.n	8000452 <__aeabi_fdiv+0x11e>
 8000446:	2308      	movs	r3, #8
 8000448:	4699      	mov	r9, r3
 800044a:	3b06      	subs	r3, #6
 800044c:	27ff      	movs	r7, #255	; 0xff
 800044e:	469a      	mov	sl, r3
 8000450:	e789      	b.n	8000366 <__aeabi_fdiv+0x32>
 8000452:	230c      	movs	r3, #12
 8000454:	4699      	mov	r9, r3
 8000456:	3b09      	subs	r3, #9
 8000458:	27ff      	movs	r7, #255	; 0xff
 800045a:	469a      	mov	sl, r3
 800045c:	e783      	b.n	8000366 <__aeabi_fdiv+0x32>
 800045e:	0028      	movs	r0, r5
 8000460:	f001 f9d2 	bl	8001808 <__clzsi2>
 8000464:	2776      	movs	r7, #118	; 0x76
 8000466:	1f43      	subs	r3, r0, #5
 8000468:	409d      	lsls	r5, r3
 800046a:	2300      	movs	r3, #0
 800046c:	427f      	negs	r7, r7
 800046e:	4699      	mov	r9, r3
 8000470:	469a      	mov	sl, r3
 8000472:	1a3f      	subs	r7, r7, r0
 8000474:	e777      	b.n	8000366 <__aeabi_fdiv+0x32>
 8000476:	4640      	mov	r0, r8
 8000478:	f001 f9c6 	bl	8001808 <__clzsi2>
 800047c:	4642      	mov	r2, r8
 800047e:	1f43      	subs	r3, r0, #5
 8000480:	409a      	lsls	r2, r3
 8000482:	2376      	movs	r3, #118	; 0x76
 8000484:	425b      	negs	r3, r3
 8000486:	4690      	mov	r8, r2
 8000488:	1a1b      	subs	r3, r3, r0
 800048a:	2200      	movs	r2, #0
 800048c:	e77d      	b.n	800038a <__aeabi_fdiv+0x56>
 800048e:	23ff      	movs	r3, #255	; 0xff
 8000490:	2203      	movs	r2, #3
 8000492:	e77a      	b.n	800038a <__aeabi_fdiv+0x56>
 8000494:	000e      	movs	r6, r1
 8000496:	20ff      	movs	r0, #255	; 0xff
 8000498:	2500      	movs	r5, #0
 800049a:	e7ac      	b.n	80003f6 <__aeabi_fdiv+0xc2>
 800049c:	2001      	movs	r0, #1
 800049e:	1ac0      	subs	r0, r0, r3
 80004a0:	281b      	cmp	r0, #27
 80004a2:	dca6      	bgt.n	80003f2 <__aeabi_fdiv+0xbe>
 80004a4:	379e      	adds	r7, #158	; 0x9e
 80004a6:	002a      	movs	r2, r5
 80004a8:	40bd      	lsls	r5, r7
 80004aa:	40c2      	lsrs	r2, r0
 80004ac:	1e6b      	subs	r3, r5, #1
 80004ae:	419d      	sbcs	r5, r3
 80004b0:	4315      	orrs	r5, r2
 80004b2:	076b      	lsls	r3, r5, #29
 80004b4:	d004      	beq.n	80004c0 <__aeabi_fdiv+0x18c>
 80004b6:	230f      	movs	r3, #15
 80004b8:	402b      	ands	r3, r5
 80004ba:	2b04      	cmp	r3, #4
 80004bc:	d000      	beq.n	80004c0 <__aeabi_fdiv+0x18c>
 80004be:	3504      	adds	r5, #4
 80004c0:	016b      	lsls	r3, r5, #5
 80004c2:	d544      	bpl.n	800054e <__aeabi_fdiv+0x21a>
 80004c4:	2001      	movs	r0, #1
 80004c6:	2500      	movs	r5, #0
 80004c8:	e795      	b.n	80003f6 <__aeabi_fdiv+0xc2>
 80004ca:	20ff      	movs	r0, #255	; 0xff
 80004cc:	2500      	movs	r5, #0
 80004ce:	e792      	b.n	80003f6 <__aeabi_fdiv+0xc2>
 80004d0:	2580      	movs	r5, #128	; 0x80
 80004d2:	2600      	movs	r6, #0
 80004d4:	20ff      	movs	r0, #255	; 0xff
 80004d6:	03ed      	lsls	r5, r5, #15
 80004d8:	e78d      	b.n	80003f6 <__aeabi_fdiv+0xc2>
 80004da:	2300      	movs	r3, #0
 80004dc:	4698      	mov	r8, r3
 80004de:	2080      	movs	r0, #128	; 0x80
 80004e0:	03c0      	lsls	r0, r0, #15
 80004e2:	4205      	tst	r5, r0
 80004e4:	d009      	beq.n	80004fa <__aeabi_fdiv+0x1c6>
 80004e6:	4643      	mov	r3, r8
 80004e8:	4203      	tst	r3, r0
 80004ea:	d106      	bne.n	80004fa <__aeabi_fdiv+0x1c6>
 80004ec:	4645      	mov	r5, r8
 80004ee:	4305      	orrs	r5, r0
 80004f0:	026d      	lsls	r5, r5, #9
 80004f2:	0026      	movs	r6, r4
 80004f4:	20ff      	movs	r0, #255	; 0xff
 80004f6:	0a6d      	lsrs	r5, r5, #9
 80004f8:	e77d      	b.n	80003f6 <__aeabi_fdiv+0xc2>
 80004fa:	2080      	movs	r0, #128	; 0x80
 80004fc:	03c0      	lsls	r0, r0, #15
 80004fe:	4305      	orrs	r5, r0
 8000500:	026d      	lsls	r5, r5, #9
 8000502:	20ff      	movs	r0, #255	; 0xff
 8000504:	0a6d      	lsrs	r5, r5, #9
 8000506:	e776      	b.n	80003f6 <__aeabi_fdiv+0xc2>
 8000508:	4642      	mov	r2, r8
 800050a:	016b      	lsls	r3, r5, #5
 800050c:	0150      	lsls	r0, r2, #5
 800050e:	4283      	cmp	r3, r0
 8000510:	d219      	bcs.n	8000546 <__aeabi_fdiv+0x212>
 8000512:	221b      	movs	r2, #27
 8000514:	2500      	movs	r5, #0
 8000516:	3f01      	subs	r7, #1
 8000518:	2601      	movs	r6, #1
 800051a:	001c      	movs	r4, r3
 800051c:	006d      	lsls	r5, r5, #1
 800051e:	005b      	lsls	r3, r3, #1
 8000520:	2c00      	cmp	r4, #0
 8000522:	db01      	blt.n	8000528 <__aeabi_fdiv+0x1f4>
 8000524:	4298      	cmp	r0, r3
 8000526:	d801      	bhi.n	800052c <__aeabi_fdiv+0x1f8>
 8000528:	1a1b      	subs	r3, r3, r0
 800052a:	4335      	orrs	r5, r6
 800052c:	3a01      	subs	r2, #1
 800052e:	2a00      	cmp	r2, #0
 8000530:	d1f3      	bne.n	800051a <__aeabi_fdiv+0x1e6>
 8000532:	1e5a      	subs	r2, r3, #1
 8000534:	4193      	sbcs	r3, r2
 8000536:	431d      	orrs	r5, r3
 8000538:	003b      	movs	r3, r7
 800053a:	337f      	adds	r3, #127	; 0x7f
 800053c:	000e      	movs	r6, r1
 800053e:	2b00      	cmp	r3, #0
 8000540:	dd00      	ble.n	8000544 <__aeabi_fdiv+0x210>
 8000542:	e741      	b.n	80003c8 <__aeabi_fdiv+0x94>
 8000544:	e7aa      	b.n	800049c <__aeabi_fdiv+0x168>
 8000546:	221a      	movs	r2, #26
 8000548:	2501      	movs	r5, #1
 800054a:	1a1b      	subs	r3, r3, r0
 800054c:	e7e4      	b.n	8000518 <__aeabi_fdiv+0x1e4>
 800054e:	01ad      	lsls	r5, r5, #6
 8000550:	2000      	movs	r0, #0
 8000552:	0a6d      	lsrs	r5, r5, #9
 8000554:	e74f      	b.n	80003f6 <__aeabi_fdiv+0xc2>
 8000556:	46c0      	nop			; (mov r8, r8)
 8000558:	080050d0 	.word	0x080050d0
 800055c:	f7ffffff 	.word	0xf7ffffff
 8000560:	08005110 	.word	0x08005110

08000564 <__aeabi_fsub>:
 8000564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000566:	46ce      	mov	lr, r9
 8000568:	4647      	mov	r7, r8
 800056a:	0243      	lsls	r3, r0, #9
 800056c:	0a5b      	lsrs	r3, r3, #9
 800056e:	024e      	lsls	r6, r1, #9
 8000570:	00da      	lsls	r2, r3, #3
 8000572:	4694      	mov	ip, r2
 8000574:	0a72      	lsrs	r2, r6, #9
 8000576:	4691      	mov	r9, r2
 8000578:	0045      	lsls	r5, r0, #1
 800057a:	004a      	lsls	r2, r1, #1
 800057c:	b580      	push	{r7, lr}
 800057e:	0e2d      	lsrs	r5, r5, #24
 8000580:	001f      	movs	r7, r3
 8000582:	0fc4      	lsrs	r4, r0, #31
 8000584:	0e12      	lsrs	r2, r2, #24
 8000586:	0fc9      	lsrs	r1, r1, #31
 8000588:	09b6      	lsrs	r6, r6, #6
 800058a:	2aff      	cmp	r2, #255	; 0xff
 800058c:	d05b      	beq.n	8000646 <__aeabi_fsub+0xe2>
 800058e:	2001      	movs	r0, #1
 8000590:	4041      	eors	r1, r0
 8000592:	428c      	cmp	r4, r1
 8000594:	d039      	beq.n	800060a <__aeabi_fsub+0xa6>
 8000596:	1aa8      	subs	r0, r5, r2
 8000598:	2800      	cmp	r0, #0
 800059a:	dd5a      	ble.n	8000652 <__aeabi_fsub+0xee>
 800059c:	2a00      	cmp	r2, #0
 800059e:	d06a      	beq.n	8000676 <__aeabi_fsub+0x112>
 80005a0:	2dff      	cmp	r5, #255	; 0xff
 80005a2:	d100      	bne.n	80005a6 <__aeabi_fsub+0x42>
 80005a4:	e0d9      	b.n	800075a <__aeabi_fsub+0x1f6>
 80005a6:	2280      	movs	r2, #128	; 0x80
 80005a8:	04d2      	lsls	r2, r2, #19
 80005aa:	4316      	orrs	r6, r2
 80005ac:	281b      	cmp	r0, #27
 80005ae:	dc00      	bgt.n	80005b2 <__aeabi_fsub+0x4e>
 80005b0:	e0e9      	b.n	8000786 <__aeabi_fsub+0x222>
 80005b2:	2001      	movs	r0, #1
 80005b4:	4663      	mov	r3, ip
 80005b6:	1a18      	subs	r0, r3, r0
 80005b8:	0143      	lsls	r3, r0, #5
 80005ba:	d400      	bmi.n	80005be <__aeabi_fsub+0x5a>
 80005bc:	e0b4      	b.n	8000728 <__aeabi_fsub+0x1c4>
 80005be:	0180      	lsls	r0, r0, #6
 80005c0:	0987      	lsrs	r7, r0, #6
 80005c2:	0038      	movs	r0, r7
 80005c4:	f001 f920 	bl	8001808 <__clzsi2>
 80005c8:	3805      	subs	r0, #5
 80005ca:	4087      	lsls	r7, r0
 80005cc:	4285      	cmp	r5, r0
 80005ce:	dc00      	bgt.n	80005d2 <__aeabi_fsub+0x6e>
 80005d0:	e0cc      	b.n	800076c <__aeabi_fsub+0x208>
 80005d2:	1a2d      	subs	r5, r5, r0
 80005d4:	48b5      	ldr	r0, [pc, #724]	; (80008ac <__aeabi_fsub+0x348>)
 80005d6:	4038      	ands	r0, r7
 80005d8:	0743      	lsls	r3, r0, #29
 80005da:	d004      	beq.n	80005e6 <__aeabi_fsub+0x82>
 80005dc:	230f      	movs	r3, #15
 80005de:	4003      	ands	r3, r0
 80005e0:	2b04      	cmp	r3, #4
 80005e2:	d000      	beq.n	80005e6 <__aeabi_fsub+0x82>
 80005e4:	3004      	adds	r0, #4
 80005e6:	0143      	lsls	r3, r0, #5
 80005e8:	d400      	bmi.n	80005ec <__aeabi_fsub+0x88>
 80005ea:	e0a0      	b.n	800072e <__aeabi_fsub+0x1ca>
 80005ec:	1c6a      	adds	r2, r5, #1
 80005ee:	2dfe      	cmp	r5, #254	; 0xfe
 80005f0:	d100      	bne.n	80005f4 <__aeabi_fsub+0x90>
 80005f2:	e08d      	b.n	8000710 <__aeabi_fsub+0x1ac>
 80005f4:	0180      	lsls	r0, r0, #6
 80005f6:	0a47      	lsrs	r7, r0, #9
 80005f8:	b2d2      	uxtb	r2, r2
 80005fa:	05d0      	lsls	r0, r2, #23
 80005fc:	4338      	orrs	r0, r7
 80005fe:	07e4      	lsls	r4, r4, #31
 8000600:	4320      	orrs	r0, r4
 8000602:	bcc0      	pop	{r6, r7}
 8000604:	46b9      	mov	r9, r7
 8000606:	46b0      	mov	r8, r6
 8000608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800060a:	1aa8      	subs	r0, r5, r2
 800060c:	4680      	mov	r8, r0
 800060e:	2800      	cmp	r0, #0
 8000610:	dd45      	ble.n	800069e <__aeabi_fsub+0x13a>
 8000612:	2a00      	cmp	r2, #0
 8000614:	d070      	beq.n	80006f8 <__aeabi_fsub+0x194>
 8000616:	2dff      	cmp	r5, #255	; 0xff
 8000618:	d100      	bne.n	800061c <__aeabi_fsub+0xb8>
 800061a:	e09e      	b.n	800075a <__aeabi_fsub+0x1f6>
 800061c:	2380      	movs	r3, #128	; 0x80
 800061e:	04db      	lsls	r3, r3, #19
 8000620:	431e      	orrs	r6, r3
 8000622:	4643      	mov	r3, r8
 8000624:	2b1b      	cmp	r3, #27
 8000626:	dc00      	bgt.n	800062a <__aeabi_fsub+0xc6>
 8000628:	e0d2      	b.n	80007d0 <__aeabi_fsub+0x26c>
 800062a:	2001      	movs	r0, #1
 800062c:	4460      	add	r0, ip
 800062e:	0143      	lsls	r3, r0, #5
 8000630:	d57a      	bpl.n	8000728 <__aeabi_fsub+0x1c4>
 8000632:	3501      	adds	r5, #1
 8000634:	2dff      	cmp	r5, #255	; 0xff
 8000636:	d06b      	beq.n	8000710 <__aeabi_fsub+0x1ac>
 8000638:	2301      	movs	r3, #1
 800063a:	4a9d      	ldr	r2, [pc, #628]	; (80008b0 <__aeabi_fsub+0x34c>)
 800063c:	4003      	ands	r3, r0
 800063e:	0840      	lsrs	r0, r0, #1
 8000640:	4010      	ands	r0, r2
 8000642:	4318      	orrs	r0, r3
 8000644:	e7c8      	b.n	80005d8 <__aeabi_fsub+0x74>
 8000646:	2e00      	cmp	r6, #0
 8000648:	d020      	beq.n	800068c <__aeabi_fsub+0x128>
 800064a:	428c      	cmp	r4, r1
 800064c:	d023      	beq.n	8000696 <__aeabi_fsub+0x132>
 800064e:	0028      	movs	r0, r5
 8000650:	38ff      	subs	r0, #255	; 0xff
 8000652:	2800      	cmp	r0, #0
 8000654:	d039      	beq.n	80006ca <__aeabi_fsub+0x166>
 8000656:	1b57      	subs	r7, r2, r5
 8000658:	2d00      	cmp	r5, #0
 800065a:	d000      	beq.n	800065e <__aeabi_fsub+0xfa>
 800065c:	e09d      	b.n	800079a <__aeabi_fsub+0x236>
 800065e:	4663      	mov	r3, ip
 8000660:	2b00      	cmp	r3, #0
 8000662:	d100      	bne.n	8000666 <__aeabi_fsub+0x102>
 8000664:	e0db      	b.n	800081e <__aeabi_fsub+0x2ba>
 8000666:	1e7b      	subs	r3, r7, #1
 8000668:	2f01      	cmp	r7, #1
 800066a:	d100      	bne.n	800066e <__aeabi_fsub+0x10a>
 800066c:	e10d      	b.n	800088a <__aeabi_fsub+0x326>
 800066e:	2fff      	cmp	r7, #255	; 0xff
 8000670:	d071      	beq.n	8000756 <__aeabi_fsub+0x1f2>
 8000672:	001f      	movs	r7, r3
 8000674:	e098      	b.n	80007a8 <__aeabi_fsub+0x244>
 8000676:	2e00      	cmp	r6, #0
 8000678:	d100      	bne.n	800067c <__aeabi_fsub+0x118>
 800067a:	e0a7      	b.n	80007cc <__aeabi_fsub+0x268>
 800067c:	1e42      	subs	r2, r0, #1
 800067e:	2801      	cmp	r0, #1
 8000680:	d100      	bne.n	8000684 <__aeabi_fsub+0x120>
 8000682:	e0e6      	b.n	8000852 <__aeabi_fsub+0x2ee>
 8000684:	28ff      	cmp	r0, #255	; 0xff
 8000686:	d068      	beq.n	800075a <__aeabi_fsub+0x1f6>
 8000688:	0010      	movs	r0, r2
 800068a:	e78f      	b.n	80005ac <__aeabi_fsub+0x48>
 800068c:	2001      	movs	r0, #1
 800068e:	4041      	eors	r1, r0
 8000690:	42a1      	cmp	r1, r4
 8000692:	d000      	beq.n	8000696 <__aeabi_fsub+0x132>
 8000694:	e77f      	b.n	8000596 <__aeabi_fsub+0x32>
 8000696:	20ff      	movs	r0, #255	; 0xff
 8000698:	4240      	negs	r0, r0
 800069a:	4680      	mov	r8, r0
 800069c:	44a8      	add	r8, r5
 800069e:	4640      	mov	r0, r8
 80006a0:	2800      	cmp	r0, #0
 80006a2:	d038      	beq.n	8000716 <__aeabi_fsub+0x1b2>
 80006a4:	1b51      	subs	r1, r2, r5
 80006a6:	2d00      	cmp	r5, #0
 80006a8:	d100      	bne.n	80006ac <__aeabi_fsub+0x148>
 80006aa:	e0ae      	b.n	800080a <__aeabi_fsub+0x2a6>
 80006ac:	2aff      	cmp	r2, #255	; 0xff
 80006ae:	d100      	bne.n	80006b2 <__aeabi_fsub+0x14e>
 80006b0:	e0df      	b.n	8000872 <__aeabi_fsub+0x30e>
 80006b2:	2380      	movs	r3, #128	; 0x80
 80006b4:	4660      	mov	r0, ip
 80006b6:	04db      	lsls	r3, r3, #19
 80006b8:	4318      	orrs	r0, r3
 80006ba:	4684      	mov	ip, r0
 80006bc:	291b      	cmp	r1, #27
 80006be:	dc00      	bgt.n	80006c2 <__aeabi_fsub+0x15e>
 80006c0:	e0d9      	b.n	8000876 <__aeabi_fsub+0x312>
 80006c2:	2001      	movs	r0, #1
 80006c4:	0015      	movs	r5, r2
 80006c6:	1980      	adds	r0, r0, r6
 80006c8:	e7b1      	b.n	800062e <__aeabi_fsub+0xca>
 80006ca:	20fe      	movs	r0, #254	; 0xfe
 80006cc:	1c6a      	adds	r2, r5, #1
 80006ce:	4210      	tst	r0, r2
 80006d0:	d171      	bne.n	80007b6 <__aeabi_fsub+0x252>
 80006d2:	2d00      	cmp	r5, #0
 80006d4:	d000      	beq.n	80006d8 <__aeabi_fsub+0x174>
 80006d6:	e0a6      	b.n	8000826 <__aeabi_fsub+0x2c2>
 80006d8:	4663      	mov	r3, ip
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d100      	bne.n	80006e0 <__aeabi_fsub+0x17c>
 80006de:	e0d9      	b.n	8000894 <__aeabi_fsub+0x330>
 80006e0:	2200      	movs	r2, #0
 80006e2:	2e00      	cmp	r6, #0
 80006e4:	d100      	bne.n	80006e8 <__aeabi_fsub+0x184>
 80006e6:	e788      	b.n	80005fa <__aeabi_fsub+0x96>
 80006e8:	1b98      	subs	r0, r3, r6
 80006ea:	0143      	lsls	r3, r0, #5
 80006ec:	d400      	bmi.n	80006f0 <__aeabi_fsub+0x18c>
 80006ee:	e0e1      	b.n	80008b4 <__aeabi_fsub+0x350>
 80006f0:	4663      	mov	r3, ip
 80006f2:	000c      	movs	r4, r1
 80006f4:	1af0      	subs	r0, r6, r3
 80006f6:	e76f      	b.n	80005d8 <__aeabi_fsub+0x74>
 80006f8:	2e00      	cmp	r6, #0
 80006fa:	d100      	bne.n	80006fe <__aeabi_fsub+0x19a>
 80006fc:	e0b7      	b.n	800086e <__aeabi_fsub+0x30a>
 80006fe:	0002      	movs	r2, r0
 8000700:	3a01      	subs	r2, #1
 8000702:	2801      	cmp	r0, #1
 8000704:	d100      	bne.n	8000708 <__aeabi_fsub+0x1a4>
 8000706:	e09c      	b.n	8000842 <__aeabi_fsub+0x2de>
 8000708:	28ff      	cmp	r0, #255	; 0xff
 800070a:	d026      	beq.n	800075a <__aeabi_fsub+0x1f6>
 800070c:	4690      	mov	r8, r2
 800070e:	e788      	b.n	8000622 <__aeabi_fsub+0xbe>
 8000710:	22ff      	movs	r2, #255	; 0xff
 8000712:	2700      	movs	r7, #0
 8000714:	e771      	b.n	80005fa <__aeabi_fsub+0x96>
 8000716:	20fe      	movs	r0, #254	; 0xfe
 8000718:	1c6a      	adds	r2, r5, #1
 800071a:	4210      	tst	r0, r2
 800071c:	d064      	beq.n	80007e8 <__aeabi_fsub+0x284>
 800071e:	2aff      	cmp	r2, #255	; 0xff
 8000720:	d0f6      	beq.n	8000710 <__aeabi_fsub+0x1ac>
 8000722:	0015      	movs	r5, r2
 8000724:	4466      	add	r6, ip
 8000726:	0870      	lsrs	r0, r6, #1
 8000728:	0743      	lsls	r3, r0, #29
 800072a:	d000      	beq.n	800072e <__aeabi_fsub+0x1ca>
 800072c:	e756      	b.n	80005dc <__aeabi_fsub+0x78>
 800072e:	08c3      	lsrs	r3, r0, #3
 8000730:	2dff      	cmp	r5, #255	; 0xff
 8000732:	d012      	beq.n	800075a <__aeabi_fsub+0x1f6>
 8000734:	025b      	lsls	r3, r3, #9
 8000736:	0a5f      	lsrs	r7, r3, #9
 8000738:	b2ea      	uxtb	r2, r5
 800073a:	e75e      	b.n	80005fa <__aeabi_fsub+0x96>
 800073c:	4662      	mov	r2, ip
 800073e:	2a00      	cmp	r2, #0
 8000740:	d100      	bne.n	8000744 <__aeabi_fsub+0x1e0>
 8000742:	e096      	b.n	8000872 <__aeabi_fsub+0x30e>
 8000744:	2e00      	cmp	r6, #0
 8000746:	d008      	beq.n	800075a <__aeabi_fsub+0x1f6>
 8000748:	2280      	movs	r2, #128	; 0x80
 800074a:	03d2      	lsls	r2, r2, #15
 800074c:	4213      	tst	r3, r2
 800074e:	d004      	beq.n	800075a <__aeabi_fsub+0x1f6>
 8000750:	4648      	mov	r0, r9
 8000752:	4210      	tst	r0, r2
 8000754:	d101      	bne.n	800075a <__aeabi_fsub+0x1f6>
 8000756:	000c      	movs	r4, r1
 8000758:	464b      	mov	r3, r9
 800075a:	2b00      	cmp	r3, #0
 800075c:	d0d8      	beq.n	8000710 <__aeabi_fsub+0x1ac>
 800075e:	2780      	movs	r7, #128	; 0x80
 8000760:	03ff      	lsls	r7, r7, #15
 8000762:	431f      	orrs	r7, r3
 8000764:	027f      	lsls	r7, r7, #9
 8000766:	22ff      	movs	r2, #255	; 0xff
 8000768:	0a7f      	lsrs	r7, r7, #9
 800076a:	e746      	b.n	80005fa <__aeabi_fsub+0x96>
 800076c:	2320      	movs	r3, #32
 800076e:	003a      	movs	r2, r7
 8000770:	1b45      	subs	r5, r0, r5
 8000772:	0038      	movs	r0, r7
 8000774:	3501      	adds	r5, #1
 8000776:	40ea      	lsrs	r2, r5
 8000778:	1b5d      	subs	r5, r3, r5
 800077a:	40a8      	lsls	r0, r5
 800077c:	1e43      	subs	r3, r0, #1
 800077e:	4198      	sbcs	r0, r3
 8000780:	2500      	movs	r5, #0
 8000782:	4310      	orrs	r0, r2
 8000784:	e728      	b.n	80005d8 <__aeabi_fsub+0x74>
 8000786:	2320      	movs	r3, #32
 8000788:	1a1b      	subs	r3, r3, r0
 800078a:	0032      	movs	r2, r6
 800078c:	409e      	lsls	r6, r3
 800078e:	40c2      	lsrs	r2, r0
 8000790:	0030      	movs	r0, r6
 8000792:	1e43      	subs	r3, r0, #1
 8000794:	4198      	sbcs	r0, r3
 8000796:	4310      	orrs	r0, r2
 8000798:	e70c      	b.n	80005b4 <__aeabi_fsub+0x50>
 800079a:	2aff      	cmp	r2, #255	; 0xff
 800079c:	d0db      	beq.n	8000756 <__aeabi_fsub+0x1f2>
 800079e:	2380      	movs	r3, #128	; 0x80
 80007a0:	4660      	mov	r0, ip
 80007a2:	04db      	lsls	r3, r3, #19
 80007a4:	4318      	orrs	r0, r3
 80007a6:	4684      	mov	ip, r0
 80007a8:	2f1b      	cmp	r7, #27
 80007aa:	dd56      	ble.n	800085a <__aeabi_fsub+0x2f6>
 80007ac:	2001      	movs	r0, #1
 80007ae:	000c      	movs	r4, r1
 80007b0:	0015      	movs	r5, r2
 80007b2:	1a30      	subs	r0, r6, r0
 80007b4:	e700      	b.n	80005b8 <__aeabi_fsub+0x54>
 80007b6:	4663      	mov	r3, ip
 80007b8:	1b9f      	subs	r7, r3, r6
 80007ba:	017b      	lsls	r3, r7, #5
 80007bc:	d43d      	bmi.n	800083a <__aeabi_fsub+0x2d6>
 80007be:	2f00      	cmp	r7, #0
 80007c0:	d000      	beq.n	80007c4 <__aeabi_fsub+0x260>
 80007c2:	e6fe      	b.n	80005c2 <__aeabi_fsub+0x5e>
 80007c4:	2400      	movs	r4, #0
 80007c6:	2200      	movs	r2, #0
 80007c8:	2700      	movs	r7, #0
 80007ca:	e716      	b.n	80005fa <__aeabi_fsub+0x96>
 80007cc:	0005      	movs	r5, r0
 80007ce:	e7af      	b.n	8000730 <__aeabi_fsub+0x1cc>
 80007d0:	0032      	movs	r2, r6
 80007d2:	4643      	mov	r3, r8
 80007d4:	4641      	mov	r1, r8
 80007d6:	40da      	lsrs	r2, r3
 80007d8:	2320      	movs	r3, #32
 80007da:	1a5b      	subs	r3, r3, r1
 80007dc:	409e      	lsls	r6, r3
 80007de:	0030      	movs	r0, r6
 80007e0:	1e43      	subs	r3, r0, #1
 80007e2:	4198      	sbcs	r0, r3
 80007e4:	4310      	orrs	r0, r2
 80007e6:	e721      	b.n	800062c <__aeabi_fsub+0xc8>
 80007e8:	2d00      	cmp	r5, #0
 80007ea:	d1a7      	bne.n	800073c <__aeabi_fsub+0x1d8>
 80007ec:	4663      	mov	r3, ip
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d059      	beq.n	80008a6 <__aeabi_fsub+0x342>
 80007f2:	2200      	movs	r2, #0
 80007f4:	2e00      	cmp	r6, #0
 80007f6:	d100      	bne.n	80007fa <__aeabi_fsub+0x296>
 80007f8:	e6ff      	b.n	80005fa <__aeabi_fsub+0x96>
 80007fa:	0030      	movs	r0, r6
 80007fc:	4460      	add	r0, ip
 80007fe:	0143      	lsls	r3, r0, #5
 8000800:	d592      	bpl.n	8000728 <__aeabi_fsub+0x1c4>
 8000802:	4b2a      	ldr	r3, [pc, #168]	; (80008ac <__aeabi_fsub+0x348>)
 8000804:	3501      	adds	r5, #1
 8000806:	4018      	ands	r0, r3
 8000808:	e78e      	b.n	8000728 <__aeabi_fsub+0x1c4>
 800080a:	4663      	mov	r3, ip
 800080c:	2b00      	cmp	r3, #0
 800080e:	d047      	beq.n	80008a0 <__aeabi_fsub+0x33c>
 8000810:	1e4b      	subs	r3, r1, #1
 8000812:	2901      	cmp	r1, #1
 8000814:	d015      	beq.n	8000842 <__aeabi_fsub+0x2de>
 8000816:	29ff      	cmp	r1, #255	; 0xff
 8000818:	d02b      	beq.n	8000872 <__aeabi_fsub+0x30e>
 800081a:	0019      	movs	r1, r3
 800081c:	e74e      	b.n	80006bc <__aeabi_fsub+0x158>
 800081e:	000c      	movs	r4, r1
 8000820:	464b      	mov	r3, r9
 8000822:	003d      	movs	r5, r7
 8000824:	e784      	b.n	8000730 <__aeabi_fsub+0x1cc>
 8000826:	4662      	mov	r2, ip
 8000828:	2a00      	cmp	r2, #0
 800082a:	d18b      	bne.n	8000744 <__aeabi_fsub+0x1e0>
 800082c:	2e00      	cmp	r6, #0
 800082e:	d192      	bne.n	8000756 <__aeabi_fsub+0x1f2>
 8000830:	2780      	movs	r7, #128	; 0x80
 8000832:	2400      	movs	r4, #0
 8000834:	22ff      	movs	r2, #255	; 0xff
 8000836:	03ff      	lsls	r7, r7, #15
 8000838:	e6df      	b.n	80005fa <__aeabi_fsub+0x96>
 800083a:	4663      	mov	r3, ip
 800083c:	000c      	movs	r4, r1
 800083e:	1af7      	subs	r7, r6, r3
 8000840:	e6bf      	b.n	80005c2 <__aeabi_fsub+0x5e>
 8000842:	0030      	movs	r0, r6
 8000844:	4460      	add	r0, ip
 8000846:	2501      	movs	r5, #1
 8000848:	0143      	lsls	r3, r0, #5
 800084a:	d400      	bmi.n	800084e <__aeabi_fsub+0x2ea>
 800084c:	e76c      	b.n	8000728 <__aeabi_fsub+0x1c4>
 800084e:	2502      	movs	r5, #2
 8000850:	e6f2      	b.n	8000638 <__aeabi_fsub+0xd4>
 8000852:	4663      	mov	r3, ip
 8000854:	2501      	movs	r5, #1
 8000856:	1b98      	subs	r0, r3, r6
 8000858:	e6ae      	b.n	80005b8 <__aeabi_fsub+0x54>
 800085a:	2320      	movs	r3, #32
 800085c:	4664      	mov	r4, ip
 800085e:	4660      	mov	r0, ip
 8000860:	40fc      	lsrs	r4, r7
 8000862:	1bdf      	subs	r7, r3, r7
 8000864:	40b8      	lsls	r0, r7
 8000866:	1e43      	subs	r3, r0, #1
 8000868:	4198      	sbcs	r0, r3
 800086a:	4320      	orrs	r0, r4
 800086c:	e79f      	b.n	80007ae <__aeabi_fsub+0x24a>
 800086e:	0005      	movs	r5, r0
 8000870:	e75e      	b.n	8000730 <__aeabi_fsub+0x1cc>
 8000872:	464b      	mov	r3, r9
 8000874:	e771      	b.n	800075a <__aeabi_fsub+0x1f6>
 8000876:	2320      	movs	r3, #32
 8000878:	4665      	mov	r5, ip
 800087a:	4660      	mov	r0, ip
 800087c:	40cd      	lsrs	r5, r1
 800087e:	1a59      	subs	r1, r3, r1
 8000880:	4088      	lsls	r0, r1
 8000882:	1e43      	subs	r3, r0, #1
 8000884:	4198      	sbcs	r0, r3
 8000886:	4328      	orrs	r0, r5
 8000888:	e71c      	b.n	80006c4 <__aeabi_fsub+0x160>
 800088a:	4663      	mov	r3, ip
 800088c:	000c      	movs	r4, r1
 800088e:	2501      	movs	r5, #1
 8000890:	1af0      	subs	r0, r6, r3
 8000892:	e691      	b.n	80005b8 <__aeabi_fsub+0x54>
 8000894:	2e00      	cmp	r6, #0
 8000896:	d095      	beq.n	80007c4 <__aeabi_fsub+0x260>
 8000898:	000c      	movs	r4, r1
 800089a:	464f      	mov	r7, r9
 800089c:	2200      	movs	r2, #0
 800089e:	e6ac      	b.n	80005fa <__aeabi_fsub+0x96>
 80008a0:	464b      	mov	r3, r9
 80008a2:	000d      	movs	r5, r1
 80008a4:	e744      	b.n	8000730 <__aeabi_fsub+0x1cc>
 80008a6:	464f      	mov	r7, r9
 80008a8:	2200      	movs	r2, #0
 80008aa:	e6a6      	b.n	80005fa <__aeabi_fsub+0x96>
 80008ac:	fbffffff 	.word	0xfbffffff
 80008b0:	7dffffff 	.word	0x7dffffff
 80008b4:	2800      	cmp	r0, #0
 80008b6:	d000      	beq.n	80008ba <__aeabi_fsub+0x356>
 80008b8:	e736      	b.n	8000728 <__aeabi_fsub+0x1c4>
 80008ba:	2400      	movs	r4, #0
 80008bc:	2700      	movs	r7, #0
 80008be:	e69c      	b.n	80005fa <__aeabi_fsub+0x96>

080008c0 <__aeabi_f2iz>:
 80008c0:	0241      	lsls	r1, r0, #9
 80008c2:	0042      	lsls	r2, r0, #1
 80008c4:	0fc3      	lsrs	r3, r0, #31
 80008c6:	0a49      	lsrs	r1, r1, #9
 80008c8:	2000      	movs	r0, #0
 80008ca:	0e12      	lsrs	r2, r2, #24
 80008cc:	2a7e      	cmp	r2, #126	; 0x7e
 80008ce:	dd03      	ble.n	80008d8 <__aeabi_f2iz+0x18>
 80008d0:	2a9d      	cmp	r2, #157	; 0x9d
 80008d2:	dd02      	ble.n	80008da <__aeabi_f2iz+0x1a>
 80008d4:	4a09      	ldr	r2, [pc, #36]	; (80008fc <__aeabi_f2iz+0x3c>)
 80008d6:	1898      	adds	r0, r3, r2
 80008d8:	4770      	bx	lr
 80008da:	2080      	movs	r0, #128	; 0x80
 80008dc:	0400      	lsls	r0, r0, #16
 80008de:	4301      	orrs	r1, r0
 80008e0:	2a95      	cmp	r2, #149	; 0x95
 80008e2:	dc07      	bgt.n	80008f4 <__aeabi_f2iz+0x34>
 80008e4:	2096      	movs	r0, #150	; 0x96
 80008e6:	1a82      	subs	r2, r0, r2
 80008e8:	40d1      	lsrs	r1, r2
 80008ea:	4248      	negs	r0, r1
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d1f3      	bne.n	80008d8 <__aeabi_f2iz+0x18>
 80008f0:	0008      	movs	r0, r1
 80008f2:	e7f1      	b.n	80008d8 <__aeabi_f2iz+0x18>
 80008f4:	3a96      	subs	r2, #150	; 0x96
 80008f6:	4091      	lsls	r1, r2
 80008f8:	e7f7      	b.n	80008ea <__aeabi_f2iz+0x2a>
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	7fffffff 	.word	0x7fffffff

08000900 <__aeabi_i2f>:
 8000900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000902:	2800      	cmp	r0, #0
 8000904:	d013      	beq.n	800092e <__aeabi_i2f+0x2e>
 8000906:	17c3      	asrs	r3, r0, #31
 8000908:	18c6      	adds	r6, r0, r3
 800090a:	405e      	eors	r6, r3
 800090c:	0fc4      	lsrs	r4, r0, #31
 800090e:	0030      	movs	r0, r6
 8000910:	f000 ff7a 	bl	8001808 <__clzsi2>
 8000914:	239e      	movs	r3, #158	; 0x9e
 8000916:	0005      	movs	r5, r0
 8000918:	1a1b      	subs	r3, r3, r0
 800091a:	2b96      	cmp	r3, #150	; 0x96
 800091c:	dc0f      	bgt.n	800093e <__aeabi_i2f+0x3e>
 800091e:	2808      	cmp	r0, #8
 8000920:	dd01      	ble.n	8000926 <__aeabi_i2f+0x26>
 8000922:	3d08      	subs	r5, #8
 8000924:	40ae      	lsls	r6, r5
 8000926:	0276      	lsls	r6, r6, #9
 8000928:	0a76      	lsrs	r6, r6, #9
 800092a:	b2d8      	uxtb	r0, r3
 800092c:	e002      	b.n	8000934 <__aeabi_i2f+0x34>
 800092e:	2400      	movs	r4, #0
 8000930:	2000      	movs	r0, #0
 8000932:	2600      	movs	r6, #0
 8000934:	05c0      	lsls	r0, r0, #23
 8000936:	4330      	orrs	r0, r6
 8000938:	07e4      	lsls	r4, r4, #31
 800093a:	4320      	orrs	r0, r4
 800093c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800093e:	2b99      	cmp	r3, #153	; 0x99
 8000940:	dd0c      	ble.n	800095c <__aeabi_i2f+0x5c>
 8000942:	2205      	movs	r2, #5
 8000944:	0031      	movs	r1, r6
 8000946:	1a12      	subs	r2, r2, r0
 8000948:	40d1      	lsrs	r1, r2
 800094a:	000a      	movs	r2, r1
 800094c:	0001      	movs	r1, r0
 800094e:	0030      	movs	r0, r6
 8000950:	311b      	adds	r1, #27
 8000952:	4088      	lsls	r0, r1
 8000954:	1e41      	subs	r1, r0, #1
 8000956:	4188      	sbcs	r0, r1
 8000958:	4302      	orrs	r2, r0
 800095a:	0016      	movs	r6, r2
 800095c:	2d05      	cmp	r5, #5
 800095e:	dc12      	bgt.n	8000986 <__aeabi_i2f+0x86>
 8000960:	0031      	movs	r1, r6
 8000962:	4f0d      	ldr	r7, [pc, #52]	; (8000998 <__aeabi_i2f+0x98>)
 8000964:	4039      	ands	r1, r7
 8000966:	0772      	lsls	r2, r6, #29
 8000968:	d009      	beq.n	800097e <__aeabi_i2f+0x7e>
 800096a:	200f      	movs	r0, #15
 800096c:	4030      	ands	r0, r6
 800096e:	2804      	cmp	r0, #4
 8000970:	d005      	beq.n	800097e <__aeabi_i2f+0x7e>
 8000972:	3104      	adds	r1, #4
 8000974:	014a      	lsls	r2, r1, #5
 8000976:	d502      	bpl.n	800097e <__aeabi_i2f+0x7e>
 8000978:	239f      	movs	r3, #159	; 0x9f
 800097a:	4039      	ands	r1, r7
 800097c:	1b5b      	subs	r3, r3, r5
 800097e:	0189      	lsls	r1, r1, #6
 8000980:	0a4e      	lsrs	r6, r1, #9
 8000982:	b2d8      	uxtb	r0, r3
 8000984:	e7d6      	b.n	8000934 <__aeabi_i2f+0x34>
 8000986:	1f6a      	subs	r2, r5, #5
 8000988:	4096      	lsls	r6, r2
 800098a:	0031      	movs	r1, r6
 800098c:	4f02      	ldr	r7, [pc, #8]	; (8000998 <__aeabi_i2f+0x98>)
 800098e:	4039      	ands	r1, r7
 8000990:	0772      	lsls	r2, r6, #29
 8000992:	d0f4      	beq.n	800097e <__aeabi_i2f+0x7e>
 8000994:	e7e9      	b.n	800096a <__aeabi_i2f+0x6a>
 8000996:	46c0      	nop			; (mov r8, r8)
 8000998:	fbffffff 	.word	0xfbffffff

0800099c <__aeabi_ui2f>:
 800099c:	b570      	push	{r4, r5, r6, lr}
 800099e:	1e05      	subs	r5, r0, #0
 80009a0:	d00e      	beq.n	80009c0 <__aeabi_ui2f+0x24>
 80009a2:	f000 ff31 	bl	8001808 <__clzsi2>
 80009a6:	239e      	movs	r3, #158	; 0x9e
 80009a8:	0004      	movs	r4, r0
 80009aa:	1a1b      	subs	r3, r3, r0
 80009ac:	2b96      	cmp	r3, #150	; 0x96
 80009ae:	dc0c      	bgt.n	80009ca <__aeabi_ui2f+0x2e>
 80009b0:	2808      	cmp	r0, #8
 80009b2:	dd01      	ble.n	80009b8 <__aeabi_ui2f+0x1c>
 80009b4:	3c08      	subs	r4, #8
 80009b6:	40a5      	lsls	r5, r4
 80009b8:	026d      	lsls	r5, r5, #9
 80009ba:	0a6d      	lsrs	r5, r5, #9
 80009bc:	b2d8      	uxtb	r0, r3
 80009be:	e001      	b.n	80009c4 <__aeabi_ui2f+0x28>
 80009c0:	2000      	movs	r0, #0
 80009c2:	2500      	movs	r5, #0
 80009c4:	05c0      	lsls	r0, r0, #23
 80009c6:	4328      	orrs	r0, r5
 80009c8:	bd70      	pop	{r4, r5, r6, pc}
 80009ca:	2b99      	cmp	r3, #153	; 0x99
 80009cc:	dd09      	ble.n	80009e2 <__aeabi_ui2f+0x46>
 80009ce:	0002      	movs	r2, r0
 80009d0:	0029      	movs	r1, r5
 80009d2:	321b      	adds	r2, #27
 80009d4:	4091      	lsls	r1, r2
 80009d6:	1e4a      	subs	r2, r1, #1
 80009d8:	4191      	sbcs	r1, r2
 80009da:	2205      	movs	r2, #5
 80009dc:	1a12      	subs	r2, r2, r0
 80009de:	40d5      	lsrs	r5, r2
 80009e0:	430d      	orrs	r5, r1
 80009e2:	2c05      	cmp	r4, #5
 80009e4:	dc12      	bgt.n	8000a0c <__aeabi_ui2f+0x70>
 80009e6:	0029      	movs	r1, r5
 80009e8:	4e0c      	ldr	r6, [pc, #48]	; (8000a1c <__aeabi_ui2f+0x80>)
 80009ea:	4031      	ands	r1, r6
 80009ec:	076a      	lsls	r2, r5, #29
 80009ee:	d009      	beq.n	8000a04 <__aeabi_ui2f+0x68>
 80009f0:	200f      	movs	r0, #15
 80009f2:	4028      	ands	r0, r5
 80009f4:	2804      	cmp	r0, #4
 80009f6:	d005      	beq.n	8000a04 <__aeabi_ui2f+0x68>
 80009f8:	3104      	adds	r1, #4
 80009fa:	014a      	lsls	r2, r1, #5
 80009fc:	d502      	bpl.n	8000a04 <__aeabi_ui2f+0x68>
 80009fe:	239f      	movs	r3, #159	; 0x9f
 8000a00:	4031      	ands	r1, r6
 8000a02:	1b1b      	subs	r3, r3, r4
 8000a04:	0189      	lsls	r1, r1, #6
 8000a06:	0a4d      	lsrs	r5, r1, #9
 8000a08:	b2d8      	uxtb	r0, r3
 8000a0a:	e7db      	b.n	80009c4 <__aeabi_ui2f+0x28>
 8000a0c:	1f62      	subs	r2, r4, #5
 8000a0e:	4095      	lsls	r5, r2
 8000a10:	0029      	movs	r1, r5
 8000a12:	4e02      	ldr	r6, [pc, #8]	; (8000a1c <__aeabi_ui2f+0x80>)
 8000a14:	4031      	ands	r1, r6
 8000a16:	076a      	lsls	r2, r5, #29
 8000a18:	d0f4      	beq.n	8000a04 <__aeabi_ui2f+0x68>
 8000a1a:	e7e9      	b.n	80009f0 <__aeabi_ui2f+0x54>
 8000a1c:	fbffffff 	.word	0xfbffffff

08000a20 <__aeabi_dmul>:
 8000a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a22:	4657      	mov	r7, sl
 8000a24:	464e      	mov	r6, r9
 8000a26:	4645      	mov	r5, r8
 8000a28:	46de      	mov	lr, fp
 8000a2a:	b5e0      	push	{r5, r6, r7, lr}
 8000a2c:	4698      	mov	r8, r3
 8000a2e:	030c      	lsls	r4, r1, #12
 8000a30:	004b      	lsls	r3, r1, #1
 8000a32:	0006      	movs	r6, r0
 8000a34:	4692      	mov	sl, r2
 8000a36:	b087      	sub	sp, #28
 8000a38:	0b24      	lsrs	r4, r4, #12
 8000a3a:	0d5b      	lsrs	r3, r3, #21
 8000a3c:	0fcf      	lsrs	r7, r1, #31
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d100      	bne.n	8000a44 <__aeabi_dmul+0x24>
 8000a42:	e15c      	b.n	8000cfe <__aeabi_dmul+0x2de>
 8000a44:	4ad9      	ldr	r2, [pc, #868]	; (8000dac <__aeabi_dmul+0x38c>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d100      	bne.n	8000a4c <__aeabi_dmul+0x2c>
 8000a4a:	e175      	b.n	8000d38 <__aeabi_dmul+0x318>
 8000a4c:	0f42      	lsrs	r2, r0, #29
 8000a4e:	00e4      	lsls	r4, r4, #3
 8000a50:	4314      	orrs	r4, r2
 8000a52:	2280      	movs	r2, #128	; 0x80
 8000a54:	0412      	lsls	r2, r2, #16
 8000a56:	4314      	orrs	r4, r2
 8000a58:	4ad5      	ldr	r2, [pc, #852]	; (8000db0 <__aeabi_dmul+0x390>)
 8000a5a:	00c5      	lsls	r5, r0, #3
 8000a5c:	4694      	mov	ip, r2
 8000a5e:	4463      	add	r3, ip
 8000a60:	9300      	str	r3, [sp, #0]
 8000a62:	2300      	movs	r3, #0
 8000a64:	4699      	mov	r9, r3
 8000a66:	469b      	mov	fp, r3
 8000a68:	4643      	mov	r3, r8
 8000a6a:	4642      	mov	r2, r8
 8000a6c:	031e      	lsls	r6, r3, #12
 8000a6e:	0fd2      	lsrs	r2, r2, #31
 8000a70:	005b      	lsls	r3, r3, #1
 8000a72:	4650      	mov	r0, sl
 8000a74:	4690      	mov	r8, r2
 8000a76:	0b36      	lsrs	r6, r6, #12
 8000a78:	0d5b      	lsrs	r3, r3, #21
 8000a7a:	d100      	bne.n	8000a7e <__aeabi_dmul+0x5e>
 8000a7c:	e120      	b.n	8000cc0 <__aeabi_dmul+0x2a0>
 8000a7e:	4acb      	ldr	r2, [pc, #812]	; (8000dac <__aeabi_dmul+0x38c>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d100      	bne.n	8000a86 <__aeabi_dmul+0x66>
 8000a84:	e162      	b.n	8000d4c <__aeabi_dmul+0x32c>
 8000a86:	49ca      	ldr	r1, [pc, #808]	; (8000db0 <__aeabi_dmul+0x390>)
 8000a88:	0f42      	lsrs	r2, r0, #29
 8000a8a:	468c      	mov	ip, r1
 8000a8c:	9900      	ldr	r1, [sp, #0]
 8000a8e:	4463      	add	r3, ip
 8000a90:	00f6      	lsls	r6, r6, #3
 8000a92:	468c      	mov	ip, r1
 8000a94:	4316      	orrs	r6, r2
 8000a96:	2280      	movs	r2, #128	; 0x80
 8000a98:	449c      	add	ip, r3
 8000a9a:	0412      	lsls	r2, r2, #16
 8000a9c:	4663      	mov	r3, ip
 8000a9e:	4316      	orrs	r6, r2
 8000aa0:	00c2      	lsls	r2, r0, #3
 8000aa2:	2000      	movs	r0, #0
 8000aa4:	9300      	str	r3, [sp, #0]
 8000aa6:	9900      	ldr	r1, [sp, #0]
 8000aa8:	4643      	mov	r3, r8
 8000aaa:	3101      	adds	r1, #1
 8000aac:	468c      	mov	ip, r1
 8000aae:	4649      	mov	r1, r9
 8000ab0:	407b      	eors	r3, r7
 8000ab2:	9301      	str	r3, [sp, #4]
 8000ab4:	290f      	cmp	r1, #15
 8000ab6:	d826      	bhi.n	8000b06 <__aeabi_dmul+0xe6>
 8000ab8:	4bbe      	ldr	r3, [pc, #760]	; (8000db4 <__aeabi_dmul+0x394>)
 8000aba:	0089      	lsls	r1, r1, #2
 8000abc:	5859      	ldr	r1, [r3, r1]
 8000abe:	468f      	mov	pc, r1
 8000ac0:	4643      	mov	r3, r8
 8000ac2:	9301      	str	r3, [sp, #4]
 8000ac4:	0034      	movs	r4, r6
 8000ac6:	0015      	movs	r5, r2
 8000ac8:	4683      	mov	fp, r0
 8000aca:	465b      	mov	r3, fp
 8000acc:	2b02      	cmp	r3, #2
 8000ace:	d016      	beq.n	8000afe <__aeabi_dmul+0xde>
 8000ad0:	2b03      	cmp	r3, #3
 8000ad2:	d100      	bne.n	8000ad6 <__aeabi_dmul+0xb6>
 8000ad4:	e203      	b.n	8000ede <__aeabi_dmul+0x4be>
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d000      	beq.n	8000adc <__aeabi_dmul+0xbc>
 8000ada:	e0cd      	b.n	8000c78 <__aeabi_dmul+0x258>
 8000adc:	2200      	movs	r2, #0
 8000ade:	2400      	movs	r4, #0
 8000ae0:	2500      	movs	r5, #0
 8000ae2:	9b01      	ldr	r3, [sp, #4]
 8000ae4:	0512      	lsls	r2, r2, #20
 8000ae6:	4322      	orrs	r2, r4
 8000ae8:	07db      	lsls	r3, r3, #31
 8000aea:	431a      	orrs	r2, r3
 8000aec:	0028      	movs	r0, r5
 8000aee:	0011      	movs	r1, r2
 8000af0:	b007      	add	sp, #28
 8000af2:	bcf0      	pop	{r4, r5, r6, r7}
 8000af4:	46bb      	mov	fp, r7
 8000af6:	46b2      	mov	sl, r6
 8000af8:	46a9      	mov	r9, r5
 8000afa:	46a0      	mov	r8, r4
 8000afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000afe:	2400      	movs	r4, #0
 8000b00:	2500      	movs	r5, #0
 8000b02:	4aaa      	ldr	r2, [pc, #680]	; (8000dac <__aeabi_dmul+0x38c>)
 8000b04:	e7ed      	b.n	8000ae2 <__aeabi_dmul+0xc2>
 8000b06:	0c28      	lsrs	r0, r5, #16
 8000b08:	042d      	lsls	r5, r5, #16
 8000b0a:	0c2d      	lsrs	r5, r5, #16
 8000b0c:	002b      	movs	r3, r5
 8000b0e:	0c11      	lsrs	r1, r2, #16
 8000b10:	0412      	lsls	r2, r2, #16
 8000b12:	0c12      	lsrs	r2, r2, #16
 8000b14:	4353      	muls	r3, r2
 8000b16:	4698      	mov	r8, r3
 8000b18:	0013      	movs	r3, r2
 8000b1a:	002f      	movs	r7, r5
 8000b1c:	4343      	muls	r3, r0
 8000b1e:	4699      	mov	r9, r3
 8000b20:	434f      	muls	r7, r1
 8000b22:	444f      	add	r7, r9
 8000b24:	46bb      	mov	fp, r7
 8000b26:	4647      	mov	r7, r8
 8000b28:	000b      	movs	r3, r1
 8000b2a:	0c3f      	lsrs	r7, r7, #16
 8000b2c:	46ba      	mov	sl, r7
 8000b2e:	4343      	muls	r3, r0
 8000b30:	44da      	add	sl, fp
 8000b32:	9302      	str	r3, [sp, #8]
 8000b34:	45d1      	cmp	r9, sl
 8000b36:	d904      	bls.n	8000b42 <__aeabi_dmul+0x122>
 8000b38:	2780      	movs	r7, #128	; 0x80
 8000b3a:	027f      	lsls	r7, r7, #9
 8000b3c:	46b9      	mov	r9, r7
 8000b3e:	444b      	add	r3, r9
 8000b40:	9302      	str	r3, [sp, #8]
 8000b42:	4653      	mov	r3, sl
 8000b44:	0c1b      	lsrs	r3, r3, #16
 8000b46:	469b      	mov	fp, r3
 8000b48:	4653      	mov	r3, sl
 8000b4a:	041f      	lsls	r7, r3, #16
 8000b4c:	4643      	mov	r3, r8
 8000b4e:	041b      	lsls	r3, r3, #16
 8000b50:	0c1b      	lsrs	r3, r3, #16
 8000b52:	4698      	mov	r8, r3
 8000b54:	003b      	movs	r3, r7
 8000b56:	4443      	add	r3, r8
 8000b58:	9304      	str	r3, [sp, #16]
 8000b5a:	0c33      	lsrs	r3, r6, #16
 8000b5c:	0436      	lsls	r6, r6, #16
 8000b5e:	0c36      	lsrs	r6, r6, #16
 8000b60:	4698      	mov	r8, r3
 8000b62:	0033      	movs	r3, r6
 8000b64:	4343      	muls	r3, r0
 8000b66:	4699      	mov	r9, r3
 8000b68:	4643      	mov	r3, r8
 8000b6a:	4343      	muls	r3, r0
 8000b6c:	002f      	movs	r7, r5
 8000b6e:	469a      	mov	sl, r3
 8000b70:	4643      	mov	r3, r8
 8000b72:	4377      	muls	r7, r6
 8000b74:	435d      	muls	r5, r3
 8000b76:	0c38      	lsrs	r0, r7, #16
 8000b78:	444d      	add	r5, r9
 8000b7a:	1945      	adds	r5, r0, r5
 8000b7c:	45a9      	cmp	r9, r5
 8000b7e:	d903      	bls.n	8000b88 <__aeabi_dmul+0x168>
 8000b80:	2380      	movs	r3, #128	; 0x80
 8000b82:	025b      	lsls	r3, r3, #9
 8000b84:	4699      	mov	r9, r3
 8000b86:	44ca      	add	sl, r9
 8000b88:	043f      	lsls	r7, r7, #16
 8000b8a:	0c28      	lsrs	r0, r5, #16
 8000b8c:	0c3f      	lsrs	r7, r7, #16
 8000b8e:	042d      	lsls	r5, r5, #16
 8000b90:	19ed      	adds	r5, r5, r7
 8000b92:	0c27      	lsrs	r7, r4, #16
 8000b94:	0424      	lsls	r4, r4, #16
 8000b96:	0c24      	lsrs	r4, r4, #16
 8000b98:	0003      	movs	r3, r0
 8000b9a:	0020      	movs	r0, r4
 8000b9c:	4350      	muls	r0, r2
 8000b9e:	437a      	muls	r2, r7
 8000ba0:	4691      	mov	r9, r2
 8000ba2:	003a      	movs	r2, r7
 8000ba4:	4453      	add	r3, sl
 8000ba6:	9305      	str	r3, [sp, #20]
 8000ba8:	0c03      	lsrs	r3, r0, #16
 8000baa:	469a      	mov	sl, r3
 8000bac:	434a      	muls	r2, r1
 8000bae:	4361      	muls	r1, r4
 8000bb0:	4449      	add	r1, r9
 8000bb2:	4451      	add	r1, sl
 8000bb4:	44ab      	add	fp, r5
 8000bb6:	4589      	cmp	r9, r1
 8000bb8:	d903      	bls.n	8000bc2 <__aeabi_dmul+0x1a2>
 8000bba:	2380      	movs	r3, #128	; 0x80
 8000bbc:	025b      	lsls	r3, r3, #9
 8000bbe:	4699      	mov	r9, r3
 8000bc0:	444a      	add	r2, r9
 8000bc2:	0400      	lsls	r0, r0, #16
 8000bc4:	0c0b      	lsrs	r3, r1, #16
 8000bc6:	0c00      	lsrs	r0, r0, #16
 8000bc8:	0409      	lsls	r1, r1, #16
 8000bca:	1809      	adds	r1, r1, r0
 8000bcc:	0020      	movs	r0, r4
 8000bce:	4699      	mov	r9, r3
 8000bd0:	4643      	mov	r3, r8
 8000bd2:	4370      	muls	r0, r6
 8000bd4:	435c      	muls	r4, r3
 8000bd6:	437e      	muls	r6, r7
 8000bd8:	435f      	muls	r7, r3
 8000bda:	0c03      	lsrs	r3, r0, #16
 8000bdc:	4698      	mov	r8, r3
 8000bde:	19a4      	adds	r4, r4, r6
 8000be0:	4444      	add	r4, r8
 8000be2:	444a      	add	r2, r9
 8000be4:	9703      	str	r7, [sp, #12]
 8000be6:	42a6      	cmp	r6, r4
 8000be8:	d904      	bls.n	8000bf4 <__aeabi_dmul+0x1d4>
 8000bea:	2380      	movs	r3, #128	; 0x80
 8000bec:	025b      	lsls	r3, r3, #9
 8000bee:	4698      	mov	r8, r3
 8000bf0:	4447      	add	r7, r8
 8000bf2:	9703      	str	r7, [sp, #12]
 8000bf4:	0423      	lsls	r3, r4, #16
 8000bf6:	9e02      	ldr	r6, [sp, #8]
 8000bf8:	469a      	mov	sl, r3
 8000bfa:	9b05      	ldr	r3, [sp, #20]
 8000bfc:	445e      	add	r6, fp
 8000bfe:	4698      	mov	r8, r3
 8000c00:	42ae      	cmp	r6, r5
 8000c02:	41ad      	sbcs	r5, r5
 8000c04:	1876      	adds	r6, r6, r1
 8000c06:	428e      	cmp	r6, r1
 8000c08:	4189      	sbcs	r1, r1
 8000c0a:	0400      	lsls	r0, r0, #16
 8000c0c:	0c00      	lsrs	r0, r0, #16
 8000c0e:	4450      	add	r0, sl
 8000c10:	4440      	add	r0, r8
 8000c12:	426d      	negs	r5, r5
 8000c14:	1947      	adds	r7, r0, r5
 8000c16:	46b8      	mov	r8, r7
 8000c18:	4693      	mov	fp, r2
 8000c1a:	4249      	negs	r1, r1
 8000c1c:	4689      	mov	r9, r1
 8000c1e:	44c3      	add	fp, r8
 8000c20:	44d9      	add	r9, fp
 8000c22:	4298      	cmp	r0, r3
 8000c24:	4180      	sbcs	r0, r0
 8000c26:	45a8      	cmp	r8, r5
 8000c28:	41ad      	sbcs	r5, r5
 8000c2a:	4593      	cmp	fp, r2
 8000c2c:	4192      	sbcs	r2, r2
 8000c2e:	4589      	cmp	r9, r1
 8000c30:	4189      	sbcs	r1, r1
 8000c32:	426d      	negs	r5, r5
 8000c34:	4240      	negs	r0, r0
 8000c36:	4328      	orrs	r0, r5
 8000c38:	0c24      	lsrs	r4, r4, #16
 8000c3a:	4252      	negs	r2, r2
 8000c3c:	4249      	negs	r1, r1
 8000c3e:	430a      	orrs	r2, r1
 8000c40:	9b03      	ldr	r3, [sp, #12]
 8000c42:	1900      	adds	r0, r0, r4
 8000c44:	1880      	adds	r0, r0, r2
 8000c46:	18c7      	adds	r7, r0, r3
 8000c48:	464b      	mov	r3, r9
 8000c4a:	0ddc      	lsrs	r4, r3, #23
 8000c4c:	9b04      	ldr	r3, [sp, #16]
 8000c4e:	0275      	lsls	r5, r6, #9
 8000c50:	431d      	orrs	r5, r3
 8000c52:	1e6a      	subs	r2, r5, #1
 8000c54:	4195      	sbcs	r5, r2
 8000c56:	464b      	mov	r3, r9
 8000c58:	0df6      	lsrs	r6, r6, #23
 8000c5a:	027f      	lsls	r7, r7, #9
 8000c5c:	4335      	orrs	r5, r6
 8000c5e:	025a      	lsls	r2, r3, #9
 8000c60:	433c      	orrs	r4, r7
 8000c62:	4315      	orrs	r5, r2
 8000c64:	01fb      	lsls	r3, r7, #7
 8000c66:	d400      	bmi.n	8000c6a <__aeabi_dmul+0x24a>
 8000c68:	e11c      	b.n	8000ea4 <__aeabi_dmul+0x484>
 8000c6a:	2101      	movs	r1, #1
 8000c6c:	086a      	lsrs	r2, r5, #1
 8000c6e:	400d      	ands	r5, r1
 8000c70:	4315      	orrs	r5, r2
 8000c72:	07e2      	lsls	r2, r4, #31
 8000c74:	4315      	orrs	r5, r2
 8000c76:	0864      	lsrs	r4, r4, #1
 8000c78:	494f      	ldr	r1, [pc, #316]	; (8000db8 <__aeabi_dmul+0x398>)
 8000c7a:	4461      	add	r1, ip
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	dc00      	bgt.n	8000c82 <__aeabi_dmul+0x262>
 8000c80:	e0b0      	b.n	8000de4 <__aeabi_dmul+0x3c4>
 8000c82:	076b      	lsls	r3, r5, #29
 8000c84:	d009      	beq.n	8000c9a <__aeabi_dmul+0x27a>
 8000c86:	220f      	movs	r2, #15
 8000c88:	402a      	ands	r2, r5
 8000c8a:	2a04      	cmp	r2, #4
 8000c8c:	d005      	beq.n	8000c9a <__aeabi_dmul+0x27a>
 8000c8e:	1d2a      	adds	r2, r5, #4
 8000c90:	42aa      	cmp	r2, r5
 8000c92:	41ad      	sbcs	r5, r5
 8000c94:	426d      	negs	r5, r5
 8000c96:	1964      	adds	r4, r4, r5
 8000c98:	0015      	movs	r5, r2
 8000c9a:	01e3      	lsls	r3, r4, #7
 8000c9c:	d504      	bpl.n	8000ca8 <__aeabi_dmul+0x288>
 8000c9e:	2180      	movs	r1, #128	; 0x80
 8000ca0:	4a46      	ldr	r2, [pc, #280]	; (8000dbc <__aeabi_dmul+0x39c>)
 8000ca2:	00c9      	lsls	r1, r1, #3
 8000ca4:	4014      	ands	r4, r2
 8000ca6:	4461      	add	r1, ip
 8000ca8:	4a45      	ldr	r2, [pc, #276]	; (8000dc0 <__aeabi_dmul+0x3a0>)
 8000caa:	4291      	cmp	r1, r2
 8000cac:	dd00      	ble.n	8000cb0 <__aeabi_dmul+0x290>
 8000cae:	e726      	b.n	8000afe <__aeabi_dmul+0xde>
 8000cb0:	0762      	lsls	r2, r4, #29
 8000cb2:	08ed      	lsrs	r5, r5, #3
 8000cb4:	0264      	lsls	r4, r4, #9
 8000cb6:	0549      	lsls	r1, r1, #21
 8000cb8:	4315      	orrs	r5, r2
 8000cba:	0b24      	lsrs	r4, r4, #12
 8000cbc:	0d4a      	lsrs	r2, r1, #21
 8000cbe:	e710      	b.n	8000ae2 <__aeabi_dmul+0xc2>
 8000cc0:	4652      	mov	r2, sl
 8000cc2:	4332      	orrs	r2, r6
 8000cc4:	d100      	bne.n	8000cc8 <__aeabi_dmul+0x2a8>
 8000cc6:	e07f      	b.n	8000dc8 <__aeabi_dmul+0x3a8>
 8000cc8:	2e00      	cmp	r6, #0
 8000cca:	d100      	bne.n	8000cce <__aeabi_dmul+0x2ae>
 8000ccc:	e0dc      	b.n	8000e88 <__aeabi_dmul+0x468>
 8000cce:	0030      	movs	r0, r6
 8000cd0:	f000 fd9a 	bl	8001808 <__clzsi2>
 8000cd4:	0002      	movs	r2, r0
 8000cd6:	3a0b      	subs	r2, #11
 8000cd8:	231d      	movs	r3, #29
 8000cda:	0001      	movs	r1, r0
 8000cdc:	1a9b      	subs	r3, r3, r2
 8000cde:	4652      	mov	r2, sl
 8000ce0:	3908      	subs	r1, #8
 8000ce2:	40da      	lsrs	r2, r3
 8000ce4:	408e      	lsls	r6, r1
 8000ce6:	4316      	orrs	r6, r2
 8000ce8:	4652      	mov	r2, sl
 8000cea:	408a      	lsls	r2, r1
 8000cec:	9b00      	ldr	r3, [sp, #0]
 8000cee:	4935      	ldr	r1, [pc, #212]	; (8000dc4 <__aeabi_dmul+0x3a4>)
 8000cf0:	1a18      	subs	r0, r3, r0
 8000cf2:	0003      	movs	r3, r0
 8000cf4:	468c      	mov	ip, r1
 8000cf6:	4463      	add	r3, ip
 8000cf8:	2000      	movs	r0, #0
 8000cfa:	9300      	str	r3, [sp, #0]
 8000cfc:	e6d3      	b.n	8000aa6 <__aeabi_dmul+0x86>
 8000cfe:	0025      	movs	r5, r4
 8000d00:	4305      	orrs	r5, r0
 8000d02:	d04a      	beq.n	8000d9a <__aeabi_dmul+0x37a>
 8000d04:	2c00      	cmp	r4, #0
 8000d06:	d100      	bne.n	8000d0a <__aeabi_dmul+0x2ea>
 8000d08:	e0b0      	b.n	8000e6c <__aeabi_dmul+0x44c>
 8000d0a:	0020      	movs	r0, r4
 8000d0c:	f000 fd7c 	bl	8001808 <__clzsi2>
 8000d10:	0001      	movs	r1, r0
 8000d12:	0002      	movs	r2, r0
 8000d14:	390b      	subs	r1, #11
 8000d16:	231d      	movs	r3, #29
 8000d18:	0010      	movs	r0, r2
 8000d1a:	1a5b      	subs	r3, r3, r1
 8000d1c:	0031      	movs	r1, r6
 8000d1e:	0035      	movs	r5, r6
 8000d20:	3808      	subs	r0, #8
 8000d22:	4084      	lsls	r4, r0
 8000d24:	40d9      	lsrs	r1, r3
 8000d26:	4085      	lsls	r5, r0
 8000d28:	430c      	orrs	r4, r1
 8000d2a:	4826      	ldr	r0, [pc, #152]	; (8000dc4 <__aeabi_dmul+0x3a4>)
 8000d2c:	1a83      	subs	r3, r0, r2
 8000d2e:	9300      	str	r3, [sp, #0]
 8000d30:	2300      	movs	r3, #0
 8000d32:	4699      	mov	r9, r3
 8000d34:	469b      	mov	fp, r3
 8000d36:	e697      	b.n	8000a68 <__aeabi_dmul+0x48>
 8000d38:	0005      	movs	r5, r0
 8000d3a:	4325      	orrs	r5, r4
 8000d3c:	d126      	bne.n	8000d8c <__aeabi_dmul+0x36c>
 8000d3e:	2208      	movs	r2, #8
 8000d40:	9300      	str	r3, [sp, #0]
 8000d42:	2302      	movs	r3, #2
 8000d44:	2400      	movs	r4, #0
 8000d46:	4691      	mov	r9, r2
 8000d48:	469b      	mov	fp, r3
 8000d4a:	e68d      	b.n	8000a68 <__aeabi_dmul+0x48>
 8000d4c:	4652      	mov	r2, sl
 8000d4e:	9b00      	ldr	r3, [sp, #0]
 8000d50:	4332      	orrs	r2, r6
 8000d52:	d110      	bne.n	8000d76 <__aeabi_dmul+0x356>
 8000d54:	4915      	ldr	r1, [pc, #84]	; (8000dac <__aeabi_dmul+0x38c>)
 8000d56:	2600      	movs	r6, #0
 8000d58:	468c      	mov	ip, r1
 8000d5a:	4463      	add	r3, ip
 8000d5c:	4649      	mov	r1, r9
 8000d5e:	9300      	str	r3, [sp, #0]
 8000d60:	2302      	movs	r3, #2
 8000d62:	4319      	orrs	r1, r3
 8000d64:	4689      	mov	r9, r1
 8000d66:	2002      	movs	r0, #2
 8000d68:	e69d      	b.n	8000aa6 <__aeabi_dmul+0x86>
 8000d6a:	465b      	mov	r3, fp
 8000d6c:	9701      	str	r7, [sp, #4]
 8000d6e:	2b02      	cmp	r3, #2
 8000d70:	d000      	beq.n	8000d74 <__aeabi_dmul+0x354>
 8000d72:	e6ad      	b.n	8000ad0 <__aeabi_dmul+0xb0>
 8000d74:	e6c3      	b.n	8000afe <__aeabi_dmul+0xde>
 8000d76:	4a0d      	ldr	r2, [pc, #52]	; (8000dac <__aeabi_dmul+0x38c>)
 8000d78:	2003      	movs	r0, #3
 8000d7a:	4694      	mov	ip, r2
 8000d7c:	4463      	add	r3, ip
 8000d7e:	464a      	mov	r2, r9
 8000d80:	9300      	str	r3, [sp, #0]
 8000d82:	2303      	movs	r3, #3
 8000d84:	431a      	orrs	r2, r3
 8000d86:	4691      	mov	r9, r2
 8000d88:	4652      	mov	r2, sl
 8000d8a:	e68c      	b.n	8000aa6 <__aeabi_dmul+0x86>
 8000d8c:	220c      	movs	r2, #12
 8000d8e:	9300      	str	r3, [sp, #0]
 8000d90:	2303      	movs	r3, #3
 8000d92:	0005      	movs	r5, r0
 8000d94:	4691      	mov	r9, r2
 8000d96:	469b      	mov	fp, r3
 8000d98:	e666      	b.n	8000a68 <__aeabi_dmul+0x48>
 8000d9a:	2304      	movs	r3, #4
 8000d9c:	4699      	mov	r9, r3
 8000d9e:	2300      	movs	r3, #0
 8000da0:	9300      	str	r3, [sp, #0]
 8000da2:	3301      	adds	r3, #1
 8000da4:	2400      	movs	r4, #0
 8000da6:	469b      	mov	fp, r3
 8000da8:	e65e      	b.n	8000a68 <__aeabi_dmul+0x48>
 8000daa:	46c0      	nop			; (mov r8, r8)
 8000dac:	000007ff 	.word	0x000007ff
 8000db0:	fffffc01 	.word	0xfffffc01
 8000db4:	08005150 	.word	0x08005150
 8000db8:	000003ff 	.word	0x000003ff
 8000dbc:	feffffff 	.word	0xfeffffff
 8000dc0:	000007fe 	.word	0x000007fe
 8000dc4:	fffffc0d 	.word	0xfffffc0d
 8000dc8:	4649      	mov	r1, r9
 8000dca:	2301      	movs	r3, #1
 8000dcc:	4319      	orrs	r1, r3
 8000dce:	4689      	mov	r9, r1
 8000dd0:	2600      	movs	r6, #0
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	e667      	b.n	8000aa6 <__aeabi_dmul+0x86>
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	2480      	movs	r4, #128	; 0x80
 8000dda:	2500      	movs	r5, #0
 8000ddc:	4a43      	ldr	r2, [pc, #268]	; (8000eec <__aeabi_dmul+0x4cc>)
 8000dde:	9301      	str	r3, [sp, #4]
 8000de0:	0324      	lsls	r4, r4, #12
 8000de2:	e67e      	b.n	8000ae2 <__aeabi_dmul+0xc2>
 8000de4:	2001      	movs	r0, #1
 8000de6:	1a40      	subs	r0, r0, r1
 8000de8:	2838      	cmp	r0, #56	; 0x38
 8000dea:	dd00      	ble.n	8000dee <__aeabi_dmul+0x3ce>
 8000dec:	e676      	b.n	8000adc <__aeabi_dmul+0xbc>
 8000dee:	281f      	cmp	r0, #31
 8000df0:	dd5b      	ble.n	8000eaa <__aeabi_dmul+0x48a>
 8000df2:	221f      	movs	r2, #31
 8000df4:	0023      	movs	r3, r4
 8000df6:	4252      	negs	r2, r2
 8000df8:	1a51      	subs	r1, r2, r1
 8000dfa:	40cb      	lsrs	r3, r1
 8000dfc:	0019      	movs	r1, r3
 8000dfe:	2820      	cmp	r0, #32
 8000e00:	d003      	beq.n	8000e0a <__aeabi_dmul+0x3ea>
 8000e02:	4a3b      	ldr	r2, [pc, #236]	; (8000ef0 <__aeabi_dmul+0x4d0>)
 8000e04:	4462      	add	r2, ip
 8000e06:	4094      	lsls	r4, r2
 8000e08:	4325      	orrs	r5, r4
 8000e0a:	1e6a      	subs	r2, r5, #1
 8000e0c:	4195      	sbcs	r5, r2
 8000e0e:	002a      	movs	r2, r5
 8000e10:	430a      	orrs	r2, r1
 8000e12:	2107      	movs	r1, #7
 8000e14:	000d      	movs	r5, r1
 8000e16:	2400      	movs	r4, #0
 8000e18:	4015      	ands	r5, r2
 8000e1a:	4211      	tst	r1, r2
 8000e1c:	d05b      	beq.n	8000ed6 <__aeabi_dmul+0x4b6>
 8000e1e:	210f      	movs	r1, #15
 8000e20:	2400      	movs	r4, #0
 8000e22:	4011      	ands	r1, r2
 8000e24:	2904      	cmp	r1, #4
 8000e26:	d053      	beq.n	8000ed0 <__aeabi_dmul+0x4b0>
 8000e28:	1d11      	adds	r1, r2, #4
 8000e2a:	4291      	cmp	r1, r2
 8000e2c:	4192      	sbcs	r2, r2
 8000e2e:	4252      	negs	r2, r2
 8000e30:	18a4      	adds	r4, r4, r2
 8000e32:	000a      	movs	r2, r1
 8000e34:	0223      	lsls	r3, r4, #8
 8000e36:	d54b      	bpl.n	8000ed0 <__aeabi_dmul+0x4b0>
 8000e38:	2201      	movs	r2, #1
 8000e3a:	2400      	movs	r4, #0
 8000e3c:	2500      	movs	r5, #0
 8000e3e:	e650      	b.n	8000ae2 <__aeabi_dmul+0xc2>
 8000e40:	2380      	movs	r3, #128	; 0x80
 8000e42:	031b      	lsls	r3, r3, #12
 8000e44:	421c      	tst	r4, r3
 8000e46:	d009      	beq.n	8000e5c <__aeabi_dmul+0x43c>
 8000e48:	421e      	tst	r6, r3
 8000e4a:	d107      	bne.n	8000e5c <__aeabi_dmul+0x43c>
 8000e4c:	4333      	orrs	r3, r6
 8000e4e:	031c      	lsls	r4, r3, #12
 8000e50:	4643      	mov	r3, r8
 8000e52:	0015      	movs	r5, r2
 8000e54:	0b24      	lsrs	r4, r4, #12
 8000e56:	4a25      	ldr	r2, [pc, #148]	; (8000eec <__aeabi_dmul+0x4cc>)
 8000e58:	9301      	str	r3, [sp, #4]
 8000e5a:	e642      	b.n	8000ae2 <__aeabi_dmul+0xc2>
 8000e5c:	2280      	movs	r2, #128	; 0x80
 8000e5e:	0312      	lsls	r2, r2, #12
 8000e60:	4314      	orrs	r4, r2
 8000e62:	0324      	lsls	r4, r4, #12
 8000e64:	4a21      	ldr	r2, [pc, #132]	; (8000eec <__aeabi_dmul+0x4cc>)
 8000e66:	0b24      	lsrs	r4, r4, #12
 8000e68:	9701      	str	r7, [sp, #4]
 8000e6a:	e63a      	b.n	8000ae2 <__aeabi_dmul+0xc2>
 8000e6c:	f000 fccc 	bl	8001808 <__clzsi2>
 8000e70:	0001      	movs	r1, r0
 8000e72:	0002      	movs	r2, r0
 8000e74:	3115      	adds	r1, #21
 8000e76:	3220      	adds	r2, #32
 8000e78:	291c      	cmp	r1, #28
 8000e7a:	dc00      	bgt.n	8000e7e <__aeabi_dmul+0x45e>
 8000e7c:	e74b      	b.n	8000d16 <__aeabi_dmul+0x2f6>
 8000e7e:	0034      	movs	r4, r6
 8000e80:	3808      	subs	r0, #8
 8000e82:	2500      	movs	r5, #0
 8000e84:	4084      	lsls	r4, r0
 8000e86:	e750      	b.n	8000d2a <__aeabi_dmul+0x30a>
 8000e88:	f000 fcbe 	bl	8001808 <__clzsi2>
 8000e8c:	0003      	movs	r3, r0
 8000e8e:	001a      	movs	r2, r3
 8000e90:	3215      	adds	r2, #21
 8000e92:	3020      	adds	r0, #32
 8000e94:	2a1c      	cmp	r2, #28
 8000e96:	dc00      	bgt.n	8000e9a <__aeabi_dmul+0x47a>
 8000e98:	e71e      	b.n	8000cd8 <__aeabi_dmul+0x2b8>
 8000e9a:	4656      	mov	r6, sl
 8000e9c:	3b08      	subs	r3, #8
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	409e      	lsls	r6, r3
 8000ea2:	e723      	b.n	8000cec <__aeabi_dmul+0x2cc>
 8000ea4:	9b00      	ldr	r3, [sp, #0]
 8000ea6:	469c      	mov	ip, r3
 8000ea8:	e6e6      	b.n	8000c78 <__aeabi_dmul+0x258>
 8000eaa:	4912      	ldr	r1, [pc, #72]	; (8000ef4 <__aeabi_dmul+0x4d4>)
 8000eac:	0022      	movs	r2, r4
 8000eae:	4461      	add	r1, ip
 8000eb0:	002e      	movs	r6, r5
 8000eb2:	408d      	lsls	r5, r1
 8000eb4:	408a      	lsls	r2, r1
 8000eb6:	40c6      	lsrs	r6, r0
 8000eb8:	1e69      	subs	r1, r5, #1
 8000eba:	418d      	sbcs	r5, r1
 8000ebc:	4332      	orrs	r2, r6
 8000ebe:	432a      	orrs	r2, r5
 8000ec0:	40c4      	lsrs	r4, r0
 8000ec2:	0753      	lsls	r3, r2, #29
 8000ec4:	d0b6      	beq.n	8000e34 <__aeabi_dmul+0x414>
 8000ec6:	210f      	movs	r1, #15
 8000ec8:	4011      	ands	r1, r2
 8000eca:	2904      	cmp	r1, #4
 8000ecc:	d1ac      	bne.n	8000e28 <__aeabi_dmul+0x408>
 8000ece:	e7b1      	b.n	8000e34 <__aeabi_dmul+0x414>
 8000ed0:	0765      	lsls	r5, r4, #29
 8000ed2:	0264      	lsls	r4, r4, #9
 8000ed4:	0b24      	lsrs	r4, r4, #12
 8000ed6:	08d2      	lsrs	r2, r2, #3
 8000ed8:	4315      	orrs	r5, r2
 8000eda:	2200      	movs	r2, #0
 8000edc:	e601      	b.n	8000ae2 <__aeabi_dmul+0xc2>
 8000ede:	2280      	movs	r2, #128	; 0x80
 8000ee0:	0312      	lsls	r2, r2, #12
 8000ee2:	4314      	orrs	r4, r2
 8000ee4:	0324      	lsls	r4, r4, #12
 8000ee6:	4a01      	ldr	r2, [pc, #4]	; (8000eec <__aeabi_dmul+0x4cc>)
 8000ee8:	0b24      	lsrs	r4, r4, #12
 8000eea:	e5fa      	b.n	8000ae2 <__aeabi_dmul+0xc2>
 8000eec:	000007ff 	.word	0x000007ff
 8000ef0:	0000043e 	.word	0x0000043e
 8000ef4:	0000041e 	.word	0x0000041e

08000ef8 <__aeabi_dsub>:
 8000ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000efa:	4657      	mov	r7, sl
 8000efc:	464e      	mov	r6, r9
 8000efe:	4645      	mov	r5, r8
 8000f00:	46de      	mov	lr, fp
 8000f02:	b5e0      	push	{r5, r6, r7, lr}
 8000f04:	001e      	movs	r6, r3
 8000f06:	0017      	movs	r7, r2
 8000f08:	004a      	lsls	r2, r1, #1
 8000f0a:	030b      	lsls	r3, r1, #12
 8000f0c:	0d52      	lsrs	r2, r2, #21
 8000f0e:	0a5b      	lsrs	r3, r3, #9
 8000f10:	4690      	mov	r8, r2
 8000f12:	0f42      	lsrs	r2, r0, #29
 8000f14:	431a      	orrs	r2, r3
 8000f16:	0fcd      	lsrs	r5, r1, #31
 8000f18:	4ccd      	ldr	r4, [pc, #820]	; (8001250 <__aeabi_dsub+0x358>)
 8000f1a:	0331      	lsls	r1, r6, #12
 8000f1c:	00c3      	lsls	r3, r0, #3
 8000f1e:	4694      	mov	ip, r2
 8000f20:	0070      	lsls	r0, r6, #1
 8000f22:	0f7a      	lsrs	r2, r7, #29
 8000f24:	0a49      	lsrs	r1, r1, #9
 8000f26:	00ff      	lsls	r7, r7, #3
 8000f28:	469a      	mov	sl, r3
 8000f2a:	46b9      	mov	r9, r7
 8000f2c:	0d40      	lsrs	r0, r0, #21
 8000f2e:	0ff6      	lsrs	r6, r6, #31
 8000f30:	4311      	orrs	r1, r2
 8000f32:	42a0      	cmp	r0, r4
 8000f34:	d100      	bne.n	8000f38 <__aeabi_dsub+0x40>
 8000f36:	e0b1      	b.n	800109c <__aeabi_dsub+0x1a4>
 8000f38:	2201      	movs	r2, #1
 8000f3a:	4056      	eors	r6, r2
 8000f3c:	46b3      	mov	fp, r6
 8000f3e:	42b5      	cmp	r5, r6
 8000f40:	d100      	bne.n	8000f44 <__aeabi_dsub+0x4c>
 8000f42:	e088      	b.n	8001056 <__aeabi_dsub+0x15e>
 8000f44:	4642      	mov	r2, r8
 8000f46:	1a12      	subs	r2, r2, r0
 8000f48:	2a00      	cmp	r2, #0
 8000f4a:	dc00      	bgt.n	8000f4e <__aeabi_dsub+0x56>
 8000f4c:	e0ae      	b.n	80010ac <__aeabi_dsub+0x1b4>
 8000f4e:	2800      	cmp	r0, #0
 8000f50:	d100      	bne.n	8000f54 <__aeabi_dsub+0x5c>
 8000f52:	e0c1      	b.n	80010d8 <__aeabi_dsub+0x1e0>
 8000f54:	48be      	ldr	r0, [pc, #760]	; (8001250 <__aeabi_dsub+0x358>)
 8000f56:	4580      	cmp	r8, r0
 8000f58:	d100      	bne.n	8000f5c <__aeabi_dsub+0x64>
 8000f5a:	e151      	b.n	8001200 <__aeabi_dsub+0x308>
 8000f5c:	2080      	movs	r0, #128	; 0x80
 8000f5e:	0400      	lsls	r0, r0, #16
 8000f60:	4301      	orrs	r1, r0
 8000f62:	2a38      	cmp	r2, #56	; 0x38
 8000f64:	dd00      	ble.n	8000f68 <__aeabi_dsub+0x70>
 8000f66:	e17b      	b.n	8001260 <__aeabi_dsub+0x368>
 8000f68:	2a1f      	cmp	r2, #31
 8000f6a:	dd00      	ble.n	8000f6e <__aeabi_dsub+0x76>
 8000f6c:	e1ee      	b.n	800134c <__aeabi_dsub+0x454>
 8000f6e:	2020      	movs	r0, #32
 8000f70:	003e      	movs	r6, r7
 8000f72:	1a80      	subs	r0, r0, r2
 8000f74:	000c      	movs	r4, r1
 8000f76:	40d6      	lsrs	r6, r2
 8000f78:	40d1      	lsrs	r1, r2
 8000f7a:	4087      	lsls	r7, r0
 8000f7c:	4662      	mov	r2, ip
 8000f7e:	4084      	lsls	r4, r0
 8000f80:	1a52      	subs	r2, r2, r1
 8000f82:	1e78      	subs	r0, r7, #1
 8000f84:	4187      	sbcs	r7, r0
 8000f86:	4694      	mov	ip, r2
 8000f88:	4334      	orrs	r4, r6
 8000f8a:	4327      	orrs	r7, r4
 8000f8c:	1bdc      	subs	r4, r3, r7
 8000f8e:	42a3      	cmp	r3, r4
 8000f90:	419b      	sbcs	r3, r3
 8000f92:	4662      	mov	r2, ip
 8000f94:	425b      	negs	r3, r3
 8000f96:	1ad3      	subs	r3, r2, r3
 8000f98:	4699      	mov	r9, r3
 8000f9a:	464b      	mov	r3, r9
 8000f9c:	021b      	lsls	r3, r3, #8
 8000f9e:	d400      	bmi.n	8000fa2 <__aeabi_dsub+0xaa>
 8000fa0:	e118      	b.n	80011d4 <__aeabi_dsub+0x2dc>
 8000fa2:	464b      	mov	r3, r9
 8000fa4:	0258      	lsls	r0, r3, #9
 8000fa6:	0a43      	lsrs	r3, r0, #9
 8000fa8:	4699      	mov	r9, r3
 8000faa:	464b      	mov	r3, r9
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d100      	bne.n	8000fb2 <__aeabi_dsub+0xba>
 8000fb0:	e137      	b.n	8001222 <__aeabi_dsub+0x32a>
 8000fb2:	4648      	mov	r0, r9
 8000fb4:	f000 fc28 	bl	8001808 <__clzsi2>
 8000fb8:	0001      	movs	r1, r0
 8000fba:	3908      	subs	r1, #8
 8000fbc:	2320      	movs	r3, #32
 8000fbe:	0022      	movs	r2, r4
 8000fc0:	4648      	mov	r0, r9
 8000fc2:	1a5b      	subs	r3, r3, r1
 8000fc4:	40da      	lsrs	r2, r3
 8000fc6:	4088      	lsls	r0, r1
 8000fc8:	408c      	lsls	r4, r1
 8000fca:	4643      	mov	r3, r8
 8000fcc:	4310      	orrs	r0, r2
 8000fce:	4588      	cmp	r8, r1
 8000fd0:	dd00      	ble.n	8000fd4 <__aeabi_dsub+0xdc>
 8000fd2:	e136      	b.n	8001242 <__aeabi_dsub+0x34a>
 8000fd4:	1ac9      	subs	r1, r1, r3
 8000fd6:	1c4b      	adds	r3, r1, #1
 8000fd8:	2b1f      	cmp	r3, #31
 8000fda:	dd00      	ble.n	8000fde <__aeabi_dsub+0xe6>
 8000fdc:	e0ea      	b.n	80011b4 <__aeabi_dsub+0x2bc>
 8000fde:	2220      	movs	r2, #32
 8000fe0:	0026      	movs	r6, r4
 8000fe2:	1ad2      	subs	r2, r2, r3
 8000fe4:	0001      	movs	r1, r0
 8000fe6:	4094      	lsls	r4, r2
 8000fe8:	40de      	lsrs	r6, r3
 8000fea:	40d8      	lsrs	r0, r3
 8000fec:	2300      	movs	r3, #0
 8000fee:	4091      	lsls	r1, r2
 8000ff0:	1e62      	subs	r2, r4, #1
 8000ff2:	4194      	sbcs	r4, r2
 8000ff4:	4681      	mov	r9, r0
 8000ff6:	4698      	mov	r8, r3
 8000ff8:	4331      	orrs	r1, r6
 8000ffa:	430c      	orrs	r4, r1
 8000ffc:	0763      	lsls	r3, r4, #29
 8000ffe:	d009      	beq.n	8001014 <__aeabi_dsub+0x11c>
 8001000:	230f      	movs	r3, #15
 8001002:	4023      	ands	r3, r4
 8001004:	2b04      	cmp	r3, #4
 8001006:	d005      	beq.n	8001014 <__aeabi_dsub+0x11c>
 8001008:	1d23      	adds	r3, r4, #4
 800100a:	42a3      	cmp	r3, r4
 800100c:	41a4      	sbcs	r4, r4
 800100e:	4264      	negs	r4, r4
 8001010:	44a1      	add	r9, r4
 8001012:	001c      	movs	r4, r3
 8001014:	464b      	mov	r3, r9
 8001016:	021b      	lsls	r3, r3, #8
 8001018:	d400      	bmi.n	800101c <__aeabi_dsub+0x124>
 800101a:	e0de      	b.n	80011da <__aeabi_dsub+0x2e2>
 800101c:	4641      	mov	r1, r8
 800101e:	4b8c      	ldr	r3, [pc, #560]	; (8001250 <__aeabi_dsub+0x358>)
 8001020:	3101      	adds	r1, #1
 8001022:	4299      	cmp	r1, r3
 8001024:	d100      	bne.n	8001028 <__aeabi_dsub+0x130>
 8001026:	e0e7      	b.n	80011f8 <__aeabi_dsub+0x300>
 8001028:	464b      	mov	r3, r9
 800102a:	488a      	ldr	r0, [pc, #552]	; (8001254 <__aeabi_dsub+0x35c>)
 800102c:	08e4      	lsrs	r4, r4, #3
 800102e:	4003      	ands	r3, r0
 8001030:	0018      	movs	r0, r3
 8001032:	0549      	lsls	r1, r1, #21
 8001034:	075b      	lsls	r3, r3, #29
 8001036:	0240      	lsls	r0, r0, #9
 8001038:	4323      	orrs	r3, r4
 800103a:	0d4a      	lsrs	r2, r1, #21
 800103c:	0b04      	lsrs	r4, r0, #12
 800103e:	0512      	lsls	r2, r2, #20
 8001040:	07ed      	lsls	r5, r5, #31
 8001042:	4322      	orrs	r2, r4
 8001044:	432a      	orrs	r2, r5
 8001046:	0018      	movs	r0, r3
 8001048:	0011      	movs	r1, r2
 800104a:	bcf0      	pop	{r4, r5, r6, r7}
 800104c:	46bb      	mov	fp, r7
 800104e:	46b2      	mov	sl, r6
 8001050:	46a9      	mov	r9, r5
 8001052:	46a0      	mov	r8, r4
 8001054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001056:	4642      	mov	r2, r8
 8001058:	1a12      	subs	r2, r2, r0
 800105a:	2a00      	cmp	r2, #0
 800105c:	dd52      	ble.n	8001104 <__aeabi_dsub+0x20c>
 800105e:	2800      	cmp	r0, #0
 8001060:	d100      	bne.n	8001064 <__aeabi_dsub+0x16c>
 8001062:	e09c      	b.n	800119e <__aeabi_dsub+0x2a6>
 8001064:	45a0      	cmp	r8, r4
 8001066:	d100      	bne.n	800106a <__aeabi_dsub+0x172>
 8001068:	e0ca      	b.n	8001200 <__aeabi_dsub+0x308>
 800106a:	2080      	movs	r0, #128	; 0x80
 800106c:	0400      	lsls	r0, r0, #16
 800106e:	4301      	orrs	r1, r0
 8001070:	2a38      	cmp	r2, #56	; 0x38
 8001072:	dd00      	ble.n	8001076 <__aeabi_dsub+0x17e>
 8001074:	e149      	b.n	800130a <__aeabi_dsub+0x412>
 8001076:	2a1f      	cmp	r2, #31
 8001078:	dc00      	bgt.n	800107c <__aeabi_dsub+0x184>
 800107a:	e197      	b.n	80013ac <__aeabi_dsub+0x4b4>
 800107c:	0010      	movs	r0, r2
 800107e:	000e      	movs	r6, r1
 8001080:	3820      	subs	r0, #32
 8001082:	40c6      	lsrs	r6, r0
 8001084:	2a20      	cmp	r2, #32
 8001086:	d004      	beq.n	8001092 <__aeabi_dsub+0x19a>
 8001088:	2040      	movs	r0, #64	; 0x40
 800108a:	1a82      	subs	r2, r0, r2
 800108c:	4091      	lsls	r1, r2
 800108e:	430f      	orrs	r7, r1
 8001090:	46b9      	mov	r9, r7
 8001092:	464c      	mov	r4, r9
 8001094:	1e62      	subs	r2, r4, #1
 8001096:	4194      	sbcs	r4, r2
 8001098:	4334      	orrs	r4, r6
 800109a:	e13a      	b.n	8001312 <__aeabi_dsub+0x41a>
 800109c:	000a      	movs	r2, r1
 800109e:	433a      	orrs	r2, r7
 80010a0:	d028      	beq.n	80010f4 <__aeabi_dsub+0x1fc>
 80010a2:	46b3      	mov	fp, r6
 80010a4:	42b5      	cmp	r5, r6
 80010a6:	d02b      	beq.n	8001100 <__aeabi_dsub+0x208>
 80010a8:	4a6b      	ldr	r2, [pc, #428]	; (8001258 <__aeabi_dsub+0x360>)
 80010aa:	4442      	add	r2, r8
 80010ac:	2a00      	cmp	r2, #0
 80010ae:	d05d      	beq.n	800116c <__aeabi_dsub+0x274>
 80010b0:	4642      	mov	r2, r8
 80010b2:	4644      	mov	r4, r8
 80010b4:	1a82      	subs	r2, r0, r2
 80010b6:	2c00      	cmp	r4, #0
 80010b8:	d000      	beq.n	80010bc <__aeabi_dsub+0x1c4>
 80010ba:	e0f5      	b.n	80012a8 <__aeabi_dsub+0x3b0>
 80010bc:	4665      	mov	r5, ip
 80010be:	431d      	orrs	r5, r3
 80010c0:	d100      	bne.n	80010c4 <__aeabi_dsub+0x1cc>
 80010c2:	e19c      	b.n	80013fe <__aeabi_dsub+0x506>
 80010c4:	1e55      	subs	r5, r2, #1
 80010c6:	2a01      	cmp	r2, #1
 80010c8:	d100      	bne.n	80010cc <__aeabi_dsub+0x1d4>
 80010ca:	e1fb      	b.n	80014c4 <__aeabi_dsub+0x5cc>
 80010cc:	4c60      	ldr	r4, [pc, #384]	; (8001250 <__aeabi_dsub+0x358>)
 80010ce:	42a2      	cmp	r2, r4
 80010d0:	d100      	bne.n	80010d4 <__aeabi_dsub+0x1dc>
 80010d2:	e1bd      	b.n	8001450 <__aeabi_dsub+0x558>
 80010d4:	002a      	movs	r2, r5
 80010d6:	e0f0      	b.n	80012ba <__aeabi_dsub+0x3c2>
 80010d8:	0008      	movs	r0, r1
 80010da:	4338      	orrs	r0, r7
 80010dc:	d100      	bne.n	80010e0 <__aeabi_dsub+0x1e8>
 80010de:	e0c3      	b.n	8001268 <__aeabi_dsub+0x370>
 80010e0:	1e50      	subs	r0, r2, #1
 80010e2:	2a01      	cmp	r2, #1
 80010e4:	d100      	bne.n	80010e8 <__aeabi_dsub+0x1f0>
 80010e6:	e1a8      	b.n	800143a <__aeabi_dsub+0x542>
 80010e8:	4c59      	ldr	r4, [pc, #356]	; (8001250 <__aeabi_dsub+0x358>)
 80010ea:	42a2      	cmp	r2, r4
 80010ec:	d100      	bne.n	80010f0 <__aeabi_dsub+0x1f8>
 80010ee:	e087      	b.n	8001200 <__aeabi_dsub+0x308>
 80010f0:	0002      	movs	r2, r0
 80010f2:	e736      	b.n	8000f62 <__aeabi_dsub+0x6a>
 80010f4:	2201      	movs	r2, #1
 80010f6:	4056      	eors	r6, r2
 80010f8:	46b3      	mov	fp, r6
 80010fa:	42b5      	cmp	r5, r6
 80010fc:	d000      	beq.n	8001100 <__aeabi_dsub+0x208>
 80010fe:	e721      	b.n	8000f44 <__aeabi_dsub+0x4c>
 8001100:	4a55      	ldr	r2, [pc, #340]	; (8001258 <__aeabi_dsub+0x360>)
 8001102:	4442      	add	r2, r8
 8001104:	2a00      	cmp	r2, #0
 8001106:	d100      	bne.n	800110a <__aeabi_dsub+0x212>
 8001108:	e0b5      	b.n	8001276 <__aeabi_dsub+0x37e>
 800110a:	4642      	mov	r2, r8
 800110c:	4644      	mov	r4, r8
 800110e:	1a82      	subs	r2, r0, r2
 8001110:	2c00      	cmp	r4, #0
 8001112:	d100      	bne.n	8001116 <__aeabi_dsub+0x21e>
 8001114:	e138      	b.n	8001388 <__aeabi_dsub+0x490>
 8001116:	4e4e      	ldr	r6, [pc, #312]	; (8001250 <__aeabi_dsub+0x358>)
 8001118:	42b0      	cmp	r0, r6
 800111a:	d100      	bne.n	800111e <__aeabi_dsub+0x226>
 800111c:	e1de      	b.n	80014dc <__aeabi_dsub+0x5e4>
 800111e:	2680      	movs	r6, #128	; 0x80
 8001120:	4664      	mov	r4, ip
 8001122:	0436      	lsls	r6, r6, #16
 8001124:	4334      	orrs	r4, r6
 8001126:	46a4      	mov	ip, r4
 8001128:	2a38      	cmp	r2, #56	; 0x38
 800112a:	dd00      	ble.n	800112e <__aeabi_dsub+0x236>
 800112c:	e196      	b.n	800145c <__aeabi_dsub+0x564>
 800112e:	2a1f      	cmp	r2, #31
 8001130:	dd00      	ble.n	8001134 <__aeabi_dsub+0x23c>
 8001132:	e224      	b.n	800157e <__aeabi_dsub+0x686>
 8001134:	2620      	movs	r6, #32
 8001136:	1ab4      	subs	r4, r6, r2
 8001138:	46a2      	mov	sl, r4
 800113a:	4664      	mov	r4, ip
 800113c:	4656      	mov	r6, sl
 800113e:	40b4      	lsls	r4, r6
 8001140:	46a1      	mov	r9, r4
 8001142:	001c      	movs	r4, r3
 8001144:	464e      	mov	r6, r9
 8001146:	40d4      	lsrs	r4, r2
 8001148:	4326      	orrs	r6, r4
 800114a:	0034      	movs	r4, r6
 800114c:	4656      	mov	r6, sl
 800114e:	40b3      	lsls	r3, r6
 8001150:	1e5e      	subs	r6, r3, #1
 8001152:	41b3      	sbcs	r3, r6
 8001154:	431c      	orrs	r4, r3
 8001156:	4663      	mov	r3, ip
 8001158:	40d3      	lsrs	r3, r2
 800115a:	18c9      	adds	r1, r1, r3
 800115c:	19e4      	adds	r4, r4, r7
 800115e:	42bc      	cmp	r4, r7
 8001160:	41bf      	sbcs	r7, r7
 8001162:	427f      	negs	r7, r7
 8001164:	46b9      	mov	r9, r7
 8001166:	4680      	mov	r8, r0
 8001168:	4489      	add	r9, r1
 800116a:	e0d8      	b.n	800131e <__aeabi_dsub+0x426>
 800116c:	4640      	mov	r0, r8
 800116e:	4c3b      	ldr	r4, [pc, #236]	; (800125c <__aeabi_dsub+0x364>)
 8001170:	3001      	adds	r0, #1
 8001172:	4220      	tst	r0, r4
 8001174:	d000      	beq.n	8001178 <__aeabi_dsub+0x280>
 8001176:	e0b4      	b.n	80012e2 <__aeabi_dsub+0x3ea>
 8001178:	4640      	mov	r0, r8
 800117a:	2800      	cmp	r0, #0
 800117c:	d000      	beq.n	8001180 <__aeabi_dsub+0x288>
 800117e:	e144      	b.n	800140a <__aeabi_dsub+0x512>
 8001180:	4660      	mov	r0, ip
 8001182:	4318      	orrs	r0, r3
 8001184:	d100      	bne.n	8001188 <__aeabi_dsub+0x290>
 8001186:	e190      	b.n	80014aa <__aeabi_dsub+0x5b2>
 8001188:	0008      	movs	r0, r1
 800118a:	4338      	orrs	r0, r7
 800118c:	d000      	beq.n	8001190 <__aeabi_dsub+0x298>
 800118e:	e1aa      	b.n	80014e6 <__aeabi_dsub+0x5ee>
 8001190:	4661      	mov	r1, ip
 8001192:	08db      	lsrs	r3, r3, #3
 8001194:	0749      	lsls	r1, r1, #29
 8001196:	430b      	orrs	r3, r1
 8001198:	4661      	mov	r1, ip
 800119a:	08cc      	lsrs	r4, r1, #3
 800119c:	e027      	b.n	80011ee <__aeabi_dsub+0x2f6>
 800119e:	0008      	movs	r0, r1
 80011a0:	4338      	orrs	r0, r7
 80011a2:	d061      	beq.n	8001268 <__aeabi_dsub+0x370>
 80011a4:	1e50      	subs	r0, r2, #1
 80011a6:	2a01      	cmp	r2, #1
 80011a8:	d100      	bne.n	80011ac <__aeabi_dsub+0x2b4>
 80011aa:	e139      	b.n	8001420 <__aeabi_dsub+0x528>
 80011ac:	42a2      	cmp	r2, r4
 80011ae:	d027      	beq.n	8001200 <__aeabi_dsub+0x308>
 80011b0:	0002      	movs	r2, r0
 80011b2:	e75d      	b.n	8001070 <__aeabi_dsub+0x178>
 80011b4:	0002      	movs	r2, r0
 80011b6:	391f      	subs	r1, #31
 80011b8:	40ca      	lsrs	r2, r1
 80011ba:	0011      	movs	r1, r2
 80011bc:	2b20      	cmp	r3, #32
 80011be:	d003      	beq.n	80011c8 <__aeabi_dsub+0x2d0>
 80011c0:	2240      	movs	r2, #64	; 0x40
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	4098      	lsls	r0, r3
 80011c6:	4304      	orrs	r4, r0
 80011c8:	1e63      	subs	r3, r4, #1
 80011ca:	419c      	sbcs	r4, r3
 80011cc:	2300      	movs	r3, #0
 80011ce:	4699      	mov	r9, r3
 80011d0:	4698      	mov	r8, r3
 80011d2:	430c      	orrs	r4, r1
 80011d4:	0763      	lsls	r3, r4, #29
 80011d6:	d000      	beq.n	80011da <__aeabi_dsub+0x2e2>
 80011d8:	e712      	b.n	8001000 <__aeabi_dsub+0x108>
 80011da:	464b      	mov	r3, r9
 80011dc:	464a      	mov	r2, r9
 80011de:	08e4      	lsrs	r4, r4, #3
 80011e0:	075b      	lsls	r3, r3, #29
 80011e2:	4323      	orrs	r3, r4
 80011e4:	08d4      	lsrs	r4, r2, #3
 80011e6:	4642      	mov	r2, r8
 80011e8:	4919      	ldr	r1, [pc, #100]	; (8001250 <__aeabi_dsub+0x358>)
 80011ea:	428a      	cmp	r2, r1
 80011ec:	d00e      	beq.n	800120c <__aeabi_dsub+0x314>
 80011ee:	0324      	lsls	r4, r4, #12
 80011f0:	0552      	lsls	r2, r2, #21
 80011f2:	0b24      	lsrs	r4, r4, #12
 80011f4:	0d52      	lsrs	r2, r2, #21
 80011f6:	e722      	b.n	800103e <__aeabi_dsub+0x146>
 80011f8:	000a      	movs	r2, r1
 80011fa:	2400      	movs	r4, #0
 80011fc:	2300      	movs	r3, #0
 80011fe:	e71e      	b.n	800103e <__aeabi_dsub+0x146>
 8001200:	08db      	lsrs	r3, r3, #3
 8001202:	4662      	mov	r2, ip
 8001204:	0752      	lsls	r2, r2, #29
 8001206:	4313      	orrs	r3, r2
 8001208:	4662      	mov	r2, ip
 800120a:	08d4      	lsrs	r4, r2, #3
 800120c:	001a      	movs	r2, r3
 800120e:	4322      	orrs	r2, r4
 8001210:	d100      	bne.n	8001214 <__aeabi_dsub+0x31c>
 8001212:	e1fc      	b.n	800160e <__aeabi_dsub+0x716>
 8001214:	2280      	movs	r2, #128	; 0x80
 8001216:	0312      	lsls	r2, r2, #12
 8001218:	4314      	orrs	r4, r2
 800121a:	0324      	lsls	r4, r4, #12
 800121c:	4a0c      	ldr	r2, [pc, #48]	; (8001250 <__aeabi_dsub+0x358>)
 800121e:	0b24      	lsrs	r4, r4, #12
 8001220:	e70d      	b.n	800103e <__aeabi_dsub+0x146>
 8001222:	0020      	movs	r0, r4
 8001224:	f000 faf0 	bl	8001808 <__clzsi2>
 8001228:	0001      	movs	r1, r0
 800122a:	3118      	adds	r1, #24
 800122c:	291f      	cmp	r1, #31
 800122e:	dc00      	bgt.n	8001232 <__aeabi_dsub+0x33a>
 8001230:	e6c4      	b.n	8000fbc <__aeabi_dsub+0xc4>
 8001232:	3808      	subs	r0, #8
 8001234:	4084      	lsls	r4, r0
 8001236:	4643      	mov	r3, r8
 8001238:	0020      	movs	r0, r4
 800123a:	2400      	movs	r4, #0
 800123c:	4588      	cmp	r8, r1
 800123e:	dc00      	bgt.n	8001242 <__aeabi_dsub+0x34a>
 8001240:	e6c8      	b.n	8000fd4 <__aeabi_dsub+0xdc>
 8001242:	4a04      	ldr	r2, [pc, #16]	; (8001254 <__aeabi_dsub+0x35c>)
 8001244:	1a5b      	subs	r3, r3, r1
 8001246:	4010      	ands	r0, r2
 8001248:	4698      	mov	r8, r3
 800124a:	4681      	mov	r9, r0
 800124c:	e6d6      	b.n	8000ffc <__aeabi_dsub+0x104>
 800124e:	46c0      	nop			; (mov r8, r8)
 8001250:	000007ff 	.word	0x000007ff
 8001254:	ff7fffff 	.word	0xff7fffff
 8001258:	fffff801 	.word	0xfffff801
 800125c:	000007fe 	.word	0x000007fe
 8001260:	430f      	orrs	r7, r1
 8001262:	1e7a      	subs	r2, r7, #1
 8001264:	4197      	sbcs	r7, r2
 8001266:	e691      	b.n	8000f8c <__aeabi_dsub+0x94>
 8001268:	4661      	mov	r1, ip
 800126a:	08db      	lsrs	r3, r3, #3
 800126c:	0749      	lsls	r1, r1, #29
 800126e:	430b      	orrs	r3, r1
 8001270:	4661      	mov	r1, ip
 8001272:	08cc      	lsrs	r4, r1, #3
 8001274:	e7b8      	b.n	80011e8 <__aeabi_dsub+0x2f0>
 8001276:	4640      	mov	r0, r8
 8001278:	4cd3      	ldr	r4, [pc, #844]	; (80015c8 <__aeabi_dsub+0x6d0>)
 800127a:	3001      	adds	r0, #1
 800127c:	4220      	tst	r0, r4
 800127e:	d000      	beq.n	8001282 <__aeabi_dsub+0x38a>
 8001280:	e0a2      	b.n	80013c8 <__aeabi_dsub+0x4d0>
 8001282:	4640      	mov	r0, r8
 8001284:	2800      	cmp	r0, #0
 8001286:	d000      	beq.n	800128a <__aeabi_dsub+0x392>
 8001288:	e101      	b.n	800148e <__aeabi_dsub+0x596>
 800128a:	4660      	mov	r0, ip
 800128c:	4318      	orrs	r0, r3
 800128e:	d100      	bne.n	8001292 <__aeabi_dsub+0x39a>
 8001290:	e15e      	b.n	8001550 <__aeabi_dsub+0x658>
 8001292:	0008      	movs	r0, r1
 8001294:	4338      	orrs	r0, r7
 8001296:	d000      	beq.n	800129a <__aeabi_dsub+0x3a2>
 8001298:	e15f      	b.n	800155a <__aeabi_dsub+0x662>
 800129a:	4661      	mov	r1, ip
 800129c:	08db      	lsrs	r3, r3, #3
 800129e:	0749      	lsls	r1, r1, #29
 80012a0:	430b      	orrs	r3, r1
 80012a2:	4661      	mov	r1, ip
 80012a4:	08cc      	lsrs	r4, r1, #3
 80012a6:	e7a2      	b.n	80011ee <__aeabi_dsub+0x2f6>
 80012a8:	4dc8      	ldr	r5, [pc, #800]	; (80015cc <__aeabi_dsub+0x6d4>)
 80012aa:	42a8      	cmp	r0, r5
 80012ac:	d100      	bne.n	80012b0 <__aeabi_dsub+0x3b8>
 80012ae:	e0cf      	b.n	8001450 <__aeabi_dsub+0x558>
 80012b0:	2580      	movs	r5, #128	; 0x80
 80012b2:	4664      	mov	r4, ip
 80012b4:	042d      	lsls	r5, r5, #16
 80012b6:	432c      	orrs	r4, r5
 80012b8:	46a4      	mov	ip, r4
 80012ba:	2a38      	cmp	r2, #56	; 0x38
 80012bc:	dc56      	bgt.n	800136c <__aeabi_dsub+0x474>
 80012be:	2a1f      	cmp	r2, #31
 80012c0:	dd00      	ble.n	80012c4 <__aeabi_dsub+0x3cc>
 80012c2:	e0d1      	b.n	8001468 <__aeabi_dsub+0x570>
 80012c4:	2520      	movs	r5, #32
 80012c6:	001e      	movs	r6, r3
 80012c8:	1aad      	subs	r5, r5, r2
 80012ca:	4664      	mov	r4, ip
 80012cc:	40ab      	lsls	r3, r5
 80012ce:	40ac      	lsls	r4, r5
 80012d0:	40d6      	lsrs	r6, r2
 80012d2:	1e5d      	subs	r5, r3, #1
 80012d4:	41ab      	sbcs	r3, r5
 80012d6:	4334      	orrs	r4, r6
 80012d8:	4323      	orrs	r3, r4
 80012da:	4664      	mov	r4, ip
 80012dc:	40d4      	lsrs	r4, r2
 80012de:	1b09      	subs	r1, r1, r4
 80012e0:	e049      	b.n	8001376 <__aeabi_dsub+0x47e>
 80012e2:	4660      	mov	r0, ip
 80012e4:	1bdc      	subs	r4, r3, r7
 80012e6:	1a46      	subs	r6, r0, r1
 80012e8:	42a3      	cmp	r3, r4
 80012ea:	4180      	sbcs	r0, r0
 80012ec:	4240      	negs	r0, r0
 80012ee:	4681      	mov	r9, r0
 80012f0:	0030      	movs	r0, r6
 80012f2:	464e      	mov	r6, r9
 80012f4:	1b80      	subs	r0, r0, r6
 80012f6:	4681      	mov	r9, r0
 80012f8:	0200      	lsls	r0, r0, #8
 80012fa:	d476      	bmi.n	80013ea <__aeabi_dsub+0x4f2>
 80012fc:	464b      	mov	r3, r9
 80012fe:	4323      	orrs	r3, r4
 8001300:	d000      	beq.n	8001304 <__aeabi_dsub+0x40c>
 8001302:	e652      	b.n	8000faa <__aeabi_dsub+0xb2>
 8001304:	2400      	movs	r4, #0
 8001306:	2500      	movs	r5, #0
 8001308:	e771      	b.n	80011ee <__aeabi_dsub+0x2f6>
 800130a:	4339      	orrs	r1, r7
 800130c:	000c      	movs	r4, r1
 800130e:	1e62      	subs	r2, r4, #1
 8001310:	4194      	sbcs	r4, r2
 8001312:	18e4      	adds	r4, r4, r3
 8001314:	429c      	cmp	r4, r3
 8001316:	419b      	sbcs	r3, r3
 8001318:	425b      	negs	r3, r3
 800131a:	4463      	add	r3, ip
 800131c:	4699      	mov	r9, r3
 800131e:	464b      	mov	r3, r9
 8001320:	021b      	lsls	r3, r3, #8
 8001322:	d400      	bmi.n	8001326 <__aeabi_dsub+0x42e>
 8001324:	e756      	b.n	80011d4 <__aeabi_dsub+0x2dc>
 8001326:	2301      	movs	r3, #1
 8001328:	469c      	mov	ip, r3
 800132a:	4ba8      	ldr	r3, [pc, #672]	; (80015cc <__aeabi_dsub+0x6d4>)
 800132c:	44e0      	add	r8, ip
 800132e:	4598      	cmp	r8, r3
 8001330:	d038      	beq.n	80013a4 <__aeabi_dsub+0x4ac>
 8001332:	464b      	mov	r3, r9
 8001334:	48a6      	ldr	r0, [pc, #664]	; (80015d0 <__aeabi_dsub+0x6d8>)
 8001336:	2201      	movs	r2, #1
 8001338:	4003      	ands	r3, r0
 800133a:	0018      	movs	r0, r3
 800133c:	0863      	lsrs	r3, r4, #1
 800133e:	4014      	ands	r4, r2
 8001340:	431c      	orrs	r4, r3
 8001342:	07c3      	lsls	r3, r0, #31
 8001344:	431c      	orrs	r4, r3
 8001346:	0843      	lsrs	r3, r0, #1
 8001348:	4699      	mov	r9, r3
 800134a:	e657      	b.n	8000ffc <__aeabi_dsub+0x104>
 800134c:	0010      	movs	r0, r2
 800134e:	000e      	movs	r6, r1
 8001350:	3820      	subs	r0, #32
 8001352:	40c6      	lsrs	r6, r0
 8001354:	2a20      	cmp	r2, #32
 8001356:	d004      	beq.n	8001362 <__aeabi_dsub+0x46a>
 8001358:	2040      	movs	r0, #64	; 0x40
 800135a:	1a82      	subs	r2, r0, r2
 800135c:	4091      	lsls	r1, r2
 800135e:	430f      	orrs	r7, r1
 8001360:	46b9      	mov	r9, r7
 8001362:	464f      	mov	r7, r9
 8001364:	1e7a      	subs	r2, r7, #1
 8001366:	4197      	sbcs	r7, r2
 8001368:	4337      	orrs	r7, r6
 800136a:	e60f      	b.n	8000f8c <__aeabi_dsub+0x94>
 800136c:	4662      	mov	r2, ip
 800136e:	431a      	orrs	r2, r3
 8001370:	0013      	movs	r3, r2
 8001372:	1e5a      	subs	r2, r3, #1
 8001374:	4193      	sbcs	r3, r2
 8001376:	1afc      	subs	r4, r7, r3
 8001378:	42a7      	cmp	r7, r4
 800137a:	41bf      	sbcs	r7, r7
 800137c:	427f      	negs	r7, r7
 800137e:	1bcb      	subs	r3, r1, r7
 8001380:	4699      	mov	r9, r3
 8001382:	465d      	mov	r5, fp
 8001384:	4680      	mov	r8, r0
 8001386:	e608      	b.n	8000f9a <__aeabi_dsub+0xa2>
 8001388:	4666      	mov	r6, ip
 800138a:	431e      	orrs	r6, r3
 800138c:	d100      	bne.n	8001390 <__aeabi_dsub+0x498>
 800138e:	e0be      	b.n	800150e <__aeabi_dsub+0x616>
 8001390:	1e56      	subs	r6, r2, #1
 8001392:	2a01      	cmp	r2, #1
 8001394:	d100      	bne.n	8001398 <__aeabi_dsub+0x4a0>
 8001396:	e109      	b.n	80015ac <__aeabi_dsub+0x6b4>
 8001398:	4c8c      	ldr	r4, [pc, #560]	; (80015cc <__aeabi_dsub+0x6d4>)
 800139a:	42a2      	cmp	r2, r4
 800139c:	d100      	bne.n	80013a0 <__aeabi_dsub+0x4a8>
 800139e:	e119      	b.n	80015d4 <__aeabi_dsub+0x6dc>
 80013a0:	0032      	movs	r2, r6
 80013a2:	e6c1      	b.n	8001128 <__aeabi_dsub+0x230>
 80013a4:	4642      	mov	r2, r8
 80013a6:	2400      	movs	r4, #0
 80013a8:	2300      	movs	r3, #0
 80013aa:	e648      	b.n	800103e <__aeabi_dsub+0x146>
 80013ac:	2020      	movs	r0, #32
 80013ae:	000c      	movs	r4, r1
 80013b0:	1a80      	subs	r0, r0, r2
 80013b2:	003e      	movs	r6, r7
 80013b4:	4087      	lsls	r7, r0
 80013b6:	4084      	lsls	r4, r0
 80013b8:	40d6      	lsrs	r6, r2
 80013ba:	1e78      	subs	r0, r7, #1
 80013bc:	4187      	sbcs	r7, r0
 80013be:	40d1      	lsrs	r1, r2
 80013c0:	4334      	orrs	r4, r6
 80013c2:	433c      	orrs	r4, r7
 80013c4:	448c      	add	ip, r1
 80013c6:	e7a4      	b.n	8001312 <__aeabi_dsub+0x41a>
 80013c8:	4a80      	ldr	r2, [pc, #512]	; (80015cc <__aeabi_dsub+0x6d4>)
 80013ca:	4290      	cmp	r0, r2
 80013cc:	d100      	bne.n	80013d0 <__aeabi_dsub+0x4d8>
 80013ce:	e0e9      	b.n	80015a4 <__aeabi_dsub+0x6ac>
 80013d0:	19df      	adds	r7, r3, r7
 80013d2:	429f      	cmp	r7, r3
 80013d4:	419b      	sbcs	r3, r3
 80013d6:	4461      	add	r1, ip
 80013d8:	425b      	negs	r3, r3
 80013da:	18c9      	adds	r1, r1, r3
 80013dc:	07cc      	lsls	r4, r1, #31
 80013de:	087f      	lsrs	r7, r7, #1
 80013e0:	084b      	lsrs	r3, r1, #1
 80013e2:	4699      	mov	r9, r3
 80013e4:	4680      	mov	r8, r0
 80013e6:	433c      	orrs	r4, r7
 80013e8:	e6f4      	b.n	80011d4 <__aeabi_dsub+0x2dc>
 80013ea:	1afc      	subs	r4, r7, r3
 80013ec:	42a7      	cmp	r7, r4
 80013ee:	41bf      	sbcs	r7, r7
 80013f0:	4663      	mov	r3, ip
 80013f2:	427f      	negs	r7, r7
 80013f4:	1ac9      	subs	r1, r1, r3
 80013f6:	1bcb      	subs	r3, r1, r7
 80013f8:	4699      	mov	r9, r3
 80013fa:	465d      	mov	r5, fp
 80013fc:	e5d5      	b.n	8000faa <__aeabi_dsub+0xb2>
 80013fe:	08ff      	lsrs	r7, r7, #3
 8001400:	074b      	lsls	r3, r1, #29
 8001402:	465d      	mov	r5, fp
 8001404:	433b      	orrs	r3, r7
 8001406:	08cc      	lsrs	r4, r1, #3
 8001408:	e6ee      	b.n	80011e8 <__aeabi_dsub+0x2f0>
 800140a:	4662      	mov	r2, ip
 800140c:	431a      	orrs	r2, r3
 800140e:	d000      	beq.n	8001412 <__aeabi_dsub+0x51a>
 8001410:	e082      	b.n	8001518 <__aeabi_dsub+0x620>
 8001412:	000b      	movs	r3, r1
 8001414:	433b      	orrs	r3, r7
 8001416:	d11b      	bne.n	8001450 <__aeabi_dsub+0x558>
 8001418:	2480      	movs	r4, #128	; 0x80
 800141a:	2500      	movs	r5, #0
 800141c:	0324      	lsls	r4, r4, #12
 800141e:	e6f9      	b.n	8001214 <__aeabi_dsub+0x31c>
 8001420:	19dc      	adds	r4, r3, r7
 8001422:	429c      	cmp	r4, r3
 8001424:	419b      	sbcs	r3, r3
 8001426:	4461      	add	r1, ip
 8001428:	4689      	mov	r9, r1
 800142a:	425b      	negs	r3, r3
 800142c:	4499      	add	r9, r3
 800142e:	464b      	mov	r3, r9
 8001430:	021b      	lsls	r3, r3, #8
 8001432:	d444      	bmi.n	80014be <__aeabi_dsub+0x5c6>
 8001434:	2301      	movs	r3, #1
 8001436:	4698      	mov	r8, r3
 8001438:	e6cc      	b.n	80011d4 <__aeabi_dsub+0x2dc>
 800143a:	1bdc      	subs	r4, r3, r7
 800143c:	4662      	mov	r2, ip
 800143e:	42a3      	cmp	r3, r4
 8001440:	419b      	sbcs	r3, r3
 8001442:	1a51      	subs	r1, r2, r1
 8001444:	425b      	negs	r3, r3
 8001446:	1acb      	subs	r3, r1, r3
 8001448:	4699      	mov	r9, r3
 800144a:	2301      	movs	r3, #1
 800144c:	4698      	mov	r8, r3
 800144e:	e5a4      	b.n	8000f9a <__aeabi_dsub+0xa2>
 8001450:	08ff      	lsrs	r7, r7, #3
 8001452:	074b      	lsls	r3, r1, #29
 8001454:	465d      	mov	r5, fp
 8001456:	433b      	orrs	r3, r7
 8001458:	08cc      	lsrs	r4, r1, #3
 800145a:	e6d7      	b.n	800120c <__aeabi_dsub+0x314>
 800145c:	4662      	mov	r2, ip
 800145e:	431a      	orrs	r2, r3
 8001460:	0014      	movs	r4, r2
 8001462:	1e63      	subs	r3, r4, #1
 8001464:	419c      	sbcs	r4, r3
 8001466:	e679      	b.n	800115c <__aeabi_dsub+0x264>
 8001468:	0015      	movs	r5, r2
 800146a:	4664      	mov	r4, ip
 800146c:	3d20      	subs	r5, #32
 800146e:	40ec      	lsrs	r4, r5
 8001470:	46a0      	mov	r8, r4
 8001472:	2a20      	cmp	r2, #32
 8001474:	d005      	beq.n	8001482 <__aeabi_dsub+0x58a>
 8001476:	2540      	movs	r5, #64	; 0x40
 8001478:	4664      	mov	r4, ip
 800147a:	1aaa      	subs	r2, r5, r2
 800147c:	4094      	lsls	r4, r2
 800147e:	4323      	orrs	r3, r4
 8001480:	469a      	mov	sl, r3
 8001482:	4654      	mov	r4, sl
 8001484:	1e63      	subs	r3, r4, #1
 8001486:	419c      	sbcs	r4, r3
 8001488:	4643      	mov	r3, r8
 800148a:	4323      	orrs	r3, r4
 800148c:	e773      	b.n	8001376 <__aeabi_dsub+0x47e>
 800148e:	4662      	mov	r2, ip
 8001490:	431a      	orrs	r2, r3
 8001492:	d023      	beq.n	80014dc <__aeabi_dsub+0x5e4>
 8001494:	000a      	movs	r2, r1
 8001496:	433a      	orrs	r2, r7
 8001498:	d000      	beq.n	800149c <__aeabi_dsub+0x5a4>
 800149a:	e0a0      	b.n	80015de <__aeabi_dsub+0x6e6>
 800149c:	4662      	mov	r2, ip
 800149e:	08db      	lsrs	r3, r3, #3
 80014a0:	0752      	lsls	r2, r2, #29
 80014a2:	4313      	orrs	r3, r2
 80014a4:	4662      	mov	r2, ip
 80014a6:	08d4      	lsrs	r4, r2, #3
 80014a8:	e6b0      	b.n	800120c <__aeabi_dsub+0x314>
 80014aa:	000b      	movs	r3, r1
 80014ac:	433b      	orrs	r3, r7
 80014ae:	d100      	bne.n	80014b2 <__aeabi_dsub+0x5ba>
 80014b0:	e728      	b.n	8001304 <__aeabi_dsub+0x40c>
 80014b2:	08ff      	lsrs	r7, r7, #3
 80014b4:	074b      	lsls	r3, r1, #29
 80014b6:	465d      	mov	r5, fp
 80014b8:	433b      	orrs	r3, r7
 80014ba:	08cc      	lsrs	r4, r1, #3
 80014bc:	e697      	b.n	80011ee <__aeabi_dsub+0x2f6>
 80014be:	2302      	movs	r3, #2
 80014c0:	4698      	mov	r8, r3
 80014c2:	e736      	b.n	8001332 <__aeabi_dsub+0x43a>
 80014c4:	1afc      	subs	r4, r7, r3
 80014c6:	42a7      	cmp	r7, r4
 80014c8:	41bf      	sbcs	r7, r7
 80014ca:	4663      	mov	r3, ip
 80014cc:	427f      	negs	r7, r7
 80014ce:	1ac9      	subs	r1, r1, r3
 80014d0:	1bcb      	subs	r3, r1, r7
 80014d2:	4699      	mov	r9, r3
 80014d4:	2301      	movs	r3, #1
 80014d6:	465d      	mov	r5, fp
 80014d8:	4698      	mov	r8, r3
 80014da:	e55e      	b.n	8000f9a <__aeabi_dsub+0xa2>
 80014dc:	074b      	lsls	r3, r1, #29
 80014de:	08ff      	lsrs	r7, r7, #3
 80014e0:	433b      	orrs	r3, r7
 80014e2:	08cc      	lsrs	r4, r1, #3
 80014e4:	e692      	b.n	800120c <__aeabi_dsub+0x314>
 80014e6:	1bdc      	subs	r4, r3, r7
 80014e8:	4660      	mov	r0, ip
 80014ea:	42a3      	cmp	r3, r4
 80014ec:	41b6      	sbcs	r6, r6
 80014ee:	1a40      	subs	r0, r0, r1
 80014f0:	4276      	negs	r6, r6
 80014f2:	1b80      	subs	r0, r0, r6
 80014f4:	4681      	mov	r9, r0
 80014f6:	0200      	lsls	r0, r0, #8
 80014f8:	d560      	bpl.n	80015bc <__aeabi_dsub+0x6c4>
 80014fa:	1afc      	subs	r4, r7, r3
 80014fc:	42a7      	cmp	r7, r4
 80014fe:	41bf      	sbcs	r7, r7
 8001500:	4663      	mov	r3, ip
 8001502:	427f      	negs	r7, r7
 8001504:	1ac9      	subs	r1, r1, r3
 8001506:	1bcb      	subs	r3, r1, r7
 8001508:	4699      	mov	r9, r3
 800150a:	465d      	mov	r5, fp
 800150c:	e576      	b.n	8000ffc <__aeabi_dsub+0x104>
 800150e:	08ff      	lsrs	r7, r7, #3
 8001510:	074b      	lsls	r3, r1, #29
 8001512:	433b      	orrs	r3, r7
 8001514:	08cc      	lsrs	r4, r1, #3
 8001516:	e667      	b.n	80011e8 <__aeabi_dsub+0x2f0>
 8001518:	000a      	movs	r2, r1
 800151a:	08db      	lsrs	r3, r3, #3
 800151c:	433a      	orrs	r2, r7
 800151e:	d100      	bne.n	8001522 <__aeabi_dsub+0x62a>
 8001520:	e66f      	b.n	8001202 <__aeabi_dsub+0x30a>
 8001522:	4662      	mov	r2, ip
 8001524:	0752      	lsls	r2, r2, #29
 8001526:	4313      	orrs	r3, r2
 8001528:	4662      	mov	r2, ip
 800152a:	08d4      	lsrs	r4, r2, #3
 800152c:	2280      	movs	r2, #128	; 0x80
 800152e:	0312      	lsls	r2, r2, #12
 8001530:	4214      	tst	r4, r2
 8001532:	d007      	beq.n	8001544 <__aeabi_dsub+0x64c>
 8001534:	08c8      	lsrs	r0, r1, #3
 8001536:	4210      	tst	r0, r2
 8001538:	d104      	bne.n	8001544 <__aeabi_dsub+0x64c>
 800153a:	465d      	mov	r5, fp
 800153c:	0004      	movs	r4, r0
 800153e:	08fb      	lsrs	r3, r7, #3
 8001540:	0749      	lsls	r1, r1, #29
 8001542:	430b      	orrs	r3, r1
 8001544:	0f5a      	lsrs	r2, r3, #29
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	08db      	lsrs	r3, r3, #3
 800154a:	0752      	lsls	r2, r2, #29
 800154c:	4313      	orrs	r3, r2
 800154e:	e65d      	b.n	800120c <__aeabi_dsub+0x314>
 8001550:	074b      	lsls	r3, r1, #29
 8001552:	08ff      	lsrs	r7, r7, #3
 8001554:	433b      	orrs	r3, r7
 8001556:	08cc      	lsrs	r4, r1, #3
 8001558:	e649      	b.n	80011ee <__aeabi_dsub+0x2f6>
 800155a:	19dc      	adds	r4, r3, r7
 800155c:	429c      	cmp	r4, r3
 800155e:	419b      	sbcs	r3, r3
 8001560:	4461      	add	r1, ip
 8001562:	4689      	mov	r9, r1
 8001564:	425b      	negs	r3, r3
 8001566:	4499      	add	r9, r3
 8001568:	464b      	mov	r3, r9
 800156a:	021b      	lsls	r3, r3, #8
 800156c:	d400      	bmi.n	8001570 <__aeabi_dsub+0x678>
 800156e:	e631      	b.n	80011d4 <__aeabi_dsub+0x2dc>
 8001570:	464a      	mov	r2, r9
 8001572:	4b17      	ldr	r3, [pc, #92]	; (80015d0 <__aeabi_dsub+0x6d8>)
 8001574:	401a      	ands	r2, r3
 8001576:	2301      	movs	r3, #1
 8001578:	4691      	mov	r9, r2
 800157a:	4698      	mov	r8, r3
 800157c:	e62a      	b.n	80011d4 <__aeabi_dsub+0x2dc>
 800157e:	0016      	movs	r6, r2
 8001580:	4664      	mov	r4, ip
 8001582:	3e20      	subs	r6, #32
 8001584:	40f4      	lsrs	r4, r6
 8001586:	46a0      	mov	r8, r4
 8001588:	2a20      	cmp	r2, #32
 800158a:	d005      	beq.n	8001598 <__aeabi_dsub+0x6a0>
 800158c:	2640      	movs	r6, #64	; 0x40
 800158e:	4664      	mov	r4, ip
 8001590:	1ab2      	subs	r2, r6, r2
 8001592:	4094      	lsls	r4, r2
 8001594:	4323      	orrs	r3, r4
 8001596:	469a      	mov	sl, r3
 8001598:	4654      	mov	r4, sl
 800159a:	1e63      	subs	r3, r4, #1
 800159c:	419c      	sbcs	r4, r3
 800159e:	4643      	mov	r3, r8
 80015a0:	431c      	orrs	r4, r3
 80015a2:	e5db      	b.n	800115c <__aeabi_dsub+0x264>
 80015a4:	0002      	movs	r2, r0
 80015a6:	2400      	movs	r4, #0
 80015a8:	2300      	movs	r3, #0
 80015aa:	e548      	b.n	800103e <__aeabi_dsub+0x146>
 80015ac:	19dc      	adds	r4, r3, r7
 80015ae:	42bc      	cmp	r4, r7
 80015b0:	41bf      	sbcs	r7, r7
 80015b2:	4461      	add	r1, ip
 80015b4:	4689      	mov	r9, r1
 80015b6:	427f      	negs	r7, r7
 80015b8:	44b9      	add	r9, r7
 80015ba:	e738      	b.n	800142e <__aeabi_dsub+0x536>
 80015bc:	464b      	mov	r3, r9
 80015be:	4323      	orrs	r3, r4
 80015c0:	d100      	bne.n	80015c4 <__aeabi_dsub+0x6cc>
 80015c2:	e69f      	b.n	8001304 <__aeabi_dsub+0x40c>
 80015c4:	e606      	b.n	80011d4 <__aeabi_dsub+0x2dc>
 80015c6:	46c0      	nop			; (mov r8, r8)
 80015c8:	000007fe 	.word	0x000007fe
 80015cc:	000007ff 	.word	0x000007ff
 80015d0:	ff7fffff 	.word	0xff7fffff
 80015d4:	08ff      	lsrs	r7, r7, #3
 80015d6:	074b      	lsls	r3, r1, #29
 80015d8:	433b      	orrs	r3, r7
 80015da:	08cc      	lsrs	r4, r1, #3
 80015dc:	e616      	b.n	800120c <__aeabi_dsub+0x314>
 80015de:	4662      	mov	r2, ip
 80015e0:	08db      	lsrs	r3, r3, #3
 80015e2:	0752      	lsls	r2, r2, #29
 80015e4:	4313      	orrs	r3, r2
 80015e6:	4662      	mov	r2, ip
 80015e8:	08d4      	lsrs	r4, r2, #3
 80015ea:	2280      	movs	r2, #128	; 0x80
 80015ec:	0312      	lsls	r2, r2, #12
 80015ee:	4214      	tst	r4, r2
 80015f0:	d007      	beq.n	8001602 <__aeabi_dsub+0x70a>
 80015f2:	08c8      	lsrs	r0, r1, #3
 80015f4:	4210      	tst	r0, r2
 80015f6:	d104      	bne.n	8001602 <__aeabi_dsub+0x70a>
 80015f8:	465d      	mov	r5, fp
 80015fa:	0004      	movs	r4, r0
 80015fc:	08fb      	lsrs	r3, r7, #3
 80015fe:	0749      	lsls	r1, r1, #29
 8001600:	430b      	orrs	r3, r1
 8001602:	0f5a      	lsrs	r2, r3, #29
 8001604:	00db      	lsls	r3, r3, #3
 8001606:	0752      	lsls	r2, r2, #29
 8001608:	08db      	lsrs	r3, r3, #3
 800160a:	4313      	orrs	r3, r2
 800160c:	e5fe      	b.n	800120c <__aeabi_dsub+0x314>
 800160e:	2300      	movs	r3, #0
 8001610:	4a01      	ldr	r2, [pc, #4]	; (8001618 <__aeabi_dsub+0x720>)
 8001612:	001c      	movs	r4, r3
 8001614:	e513      	b.n	800103e <__aeabi_dsub+0x146>
 8001616:	46c0      	nop			; (mov r8, r8)
 8001618:	000007ff 	.word	0x000007ff

0800161c <__aeabi_d2iz>:
 800161c:	000a      	movs	r2, r1
 800161e:	b530      	push	{r4, r5, lr}
 8001620:	4c13      	ldr	r4, [pc, #76]	; (8001670 <__aeabi_d2iz+0x54>)
 8001622:	0053      	lsls	r3, r2, #1
 8001624:	0309      	lsls	r1, r1, #12
 8001626:	0005      	movs	r5, r0
 8001628:	0b09      	lsrs	r1, r1, #12
 800162a:	2000      	movs	r0, #0
 800162c:	0d5b      	lsrs	r3, r3, #21
 800162e:	0fd2      	lsrs	r2, r2, #31
 8001630:	42a3      	cmp	r3, r4
 8001632:	dd04      	ble.n	800163e <__aeabi_d2iz+0x22>
 8001634:	480f      	ldr	r0, [pc, #60]	; (8001674 <__aeabi_d2iz+0x58>)
 8001636:	4283      	cmp	r3, r0
 8001638:	dd02      	ble.n	8001640 <__aeabi_d2iz+0x24>
 800163a:	4b0f      	ldr	r3, [pc, #60]	; (8001678 <__aeabi_d2iz+0x5c>)
 800163c:	18d0      	adds	r0, r2, r3
 800163e:	bd30      	pop	{r4, r5, pc}
 8001640:	2080      	movs	r0, #128	; 0x80
 8001642:	0340      	lsls	r0, r0, #13
 8001644:	4301      	orrs	r1, r0
 8001646:	480d      	ldr	r0, [pc, #52]	; (800167c <__aeabi_d2iz+0x60>)
 8001648:	1ac0      	subs	r0, r0, r3
 800164a:	281f      	cmp	r0, #31
 800164c:	dd08      	ble.n	8001660 <__aeabi_d2iz+0x44>
 800164e:	480c      	ldr	r0, [pc, #48]	; (8001680 <__aeabi_d2iz+0x64>)
 8001650:	1ac3      	subs	r3, r0, r3
 8001652:	40d9      	lsrs	r1, r3
 8001654:	000b      	movs	r3, r1
 8001656:	4258      	negs	r0, r3
 8001658:	2a00      	cmp	r2, #0
 800165a:	d1f0      	bne.n	800163e <__aeabi_d2iz+0x22>
 800165c:	0018      	movs	r0, r3
 800165e:	e7ee      	b.n	800163e <__aeabi_d2iz+0x22>
 8001660:	4c08      	ldr	r4, [pc, #32]	; (8001684 <__aeabi_d2iz+0x68>)
 8001662:	40c5      	lsrs	r5, r0
 8001664:	46a4      	mov	ip, r4
 8001666:	4463      	add	r3, ip
 8001668:	4099      	lsls	r1, r3
 800166a:	000b      	movs	r3, r1
 800166c:	432b      	orrs	r3, r5
 800166e:	e7f2      	b.n	8001656 <__aeabi_d2iz+0x3a>
 8001670:	000003fe 	.word	0x000003fe
 8001674:	0000041d 	.word	0x0000041d
 8001678:	7fffffff 	.word	0x7fffffff
 800167c:	00000433 	.word	0x00000433
 8001680:	00000413 	.word	0x00000413
 8001684:	fffffbed 	.word	0xfffffbed

08001688 <__aeabi_f2d>:
 8001688:	b570      	push	{r4, r5, r6, lr}
 800168a:	0043      	lsls	r3, r0, #1
 800168c:	0246      	lsls	r6, r0, #9
 800168e:	0fc4      	lsrs	r4, r0, #31
 8001690:	20fe      	movs	r0, #254	; 0xfe
 8001692:	0e1b      	lsrs	r3, r3, #24
 8001694:	1c59      	adds	r1, r3, #1
 8001696:	0a75      	lsrs	r5, r6, #9
 8001698:	4208      	tst	r0, r1
 800169a:	d00c      	beq.n	80016b6 <__aeabi_f2d+0x2e>
 800169c:	22e0      	movs	r2, #224	; 0xe0
 800169e:	0092      	lsls	r2, r2, #2
 80016a0:	4694      	mov	ip, r2
 80016a2:	076d      	lsls	r5, r5, #29
 80016a4:	0b36      	lsrs	r6, r6, #12
 80016a6:	4463      	add	r3, ip
 80016a8:	051b      	lsls	r3, r3, #20
 80016aa:	4333      	orrs	r3, r6
 80016ac:	07e4      	lsls	r4, r4, #31
 80016ae:	4323      	orrs	r3, r4
 80016b0:	0028      	movs	r0, r5
 80016b2:	0019      	movs	r1, r3
 80016b4:	bd70      	pop	{r4, r5, r6, pc}
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d114      	bne.n	80016e4 <__aeabi_f2d+0x5c>
 80016ba:	2d00      	cmp	r5, #0
 80016bc:	d01b      	beq.n	80016f6 <__aeabi_f2d+0x6e>
 80016be:	0028      	movs	r0, r5
 80016c0:	f000 f8a2 	bl	8001808 <__clzsi2>
 80016c4:	280a      	cmp	r0, #10
 80016c6:	dc1c      	bgt.n	8001702 <__aeabi_f2d+0x7a>
 80016c8:	230b      	movs	r3, #11
 80016ca:	002e      	movs	r6, r5
 80016cc:	1a1b      	subs	r3, r3, r0
 80016ce:	40de      	lsrs	r6, r3
 80016d0:	0003      	movs	r3, r0
 80016d2:	3315      	adds	r3, #21
 80016d4:	409d      	lsls	r5, r3
 80016d6:	4a0e      	ldr	r2, [pc, #56]	; (8001710 <__aeabi_f2d+0x88>)
 80016d8:	0336      	lsls	r6, r6, #12
 80016da:	1a12      	subs	r2, r2, r0
 80016dc:	0552      	lsls	r2, r2, #21
 80016de:	0b36      	lsrs	r6, r6, #12
 80016e0:	0d53      	lsrs	r3, r2, #21
 80016e2:	e7e1      	b.n	80016a8 <__aeabi_f2d+0x20>
 80016e4:	2d00      	cmp	r5, #0
 80016e6:	d009      	beq.n	80016fc <__aeabi_f2d+0x74>
 80016e8:	2280      	movs	r2, #128	; 0x80
 80016ea:	0b36      	lsrs	r6, r6, #12
 80016ec:	0312      	lsls	r2, r2, #12
 80016ee:	4b09      	ldr	r3, [pc, #36]	; (8001714 <__aeabi_f2d+0x8c>)
 80016f0:	076d      	lsls	r5, r5, #29
 80016f2:	4316      	orrs	r6, r2
 80016f4:	e7d8      	b.n	80016a8 <__aeabi_f2d+0x20>
 80016f6:	2300      	movs	r3, #0
 80016f8:	2600      	movs	r6, #0
 80016fa:	e7d5      	b.n	80016a8 <__aeabi_f2d+0x20>
 80016fc:	2600      	movs	r6, #0
 80016fe:	4b05      	ldr	r3, [pc, #20]	; (8001714 <__aeabi_f2d+0x8c>)
 8001700:	e7d2      	b.n	80016a8 <__aeabi_f2d+0x20>
 8001702:	0003      	movs	r3, r0
 8001704:	3b0b      	subs	r3, #11
 8001706:	409d      	lsls	r5, r3
 8001708:	002e      	movs	r6, r5
 800170a:	2500      	movs	r5, #0
 800170c:	e7e3      	b.n	80016d6 <__aeabi_f2d+0x4e>
 800170e:	46c0      	nop			; (mov r8, r8)
 8001710:	00000389 	.word	0x00000389
 8001714:	000007ff 	.word	0x000007ff

08001718 <__aeabi_cdrcmple>:
 8001718:	4684      	mov	ip, r0
 800171a:	0010      	movs	r0, r2
 800171c:	4662      	mov	r2, ip
 800171e:	468c      	mov	ip, r1
 8001720:	0019      	movs	r1, r3
 8001722:	4663      	mov	r3, ip
 8001724:	e000      	b.n	8001728 <__aeabi_cdcmpeq>
 8001726:	46c0      	nop			; (mov r8, r8)

08001728 <__aeabi_cdcmpeq>:
 8001728:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800172a:	f000 faf7 	bl	8001d1c <__ledf2>
 800172e:	2800      	cmp	r0, #0
 8001730:	d401      	bmi.n	8001736 <__aeabi_cdcmpeq+0xe>
 8001732:	2100      	movs	r1, #0
 8001734:	42c8      	cmn	r0, r1
 8001736:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001738 <__aeabi_dcmpeq>:
 8001738:	b510      	push	{r4, lr}
 800173a:	f000 fa47 	bl	8001bcc <__eqdf2>
 800173e:	4240      	negs	r0, r0
 8001740:	3001      	adds	r0, #1
 8001742:	bd10      	pop	{r4, pc}

08001744 <__aeabi_dcmplt>:
 8001744:	b510      	push	{r4, lr}
 8001746:	f000 fae9 	bl	8001d1c <__ledf2>
 800174a:	2800      	cmp	r0, #0
 800174c:	db01      	blt.n	8001752 <__aeabi_dcmplt+0xe>
 800174e:	2000      	movs	r0, #0
 8001750:	bd10      	pop	{r4, pc}
 8001752:	2001      	movs	r0, #1
 8001754:	bd10      	pop	{r4, pc}
 8001756:	46c0      	nop			; (mov r8, r8)

08001758 <__aeabi_dcmple>:
 8001758:	b510      	push	{r4, lr}
 800175a:	f000 fadf 	bl	8001d1c <__ledf2>
 800175e:	2800      	cmp	r0, #0
 8001760:	dd01      	ble.n	8001766 <__aeabi_dcmple+0xe>
 8001762:	2000      	movs	r0, #0
 8001764:	bd10      	pop	{r4, pc}
 8001766:	2001      	movs	r0, #1
 8001768:	bd10      	pop	{r4, pc}
 800176a:	46c0      	nop			; (mov r8, r8)

0800176c <__aeabi_dcmpgt>:
 800176c:	b510      	push	{r4, lr}
 800176e:	f000 fa6f 	bl	8001c50 <__gedf2>
 8001772:	2800      	cmp	r0, #0
 8001774:	dc01      	bgt.n	800177a <__aeabi_dcmpgt+0xe>
 8001776:	2000      	movs	r0, #0
 8001778:	bd10      	pop	{r4, pc}
 800177a:	2001      	movs	r0, #1
 800177c:	bd10      	pop	{r4, pc}
 800177e:	46c0      	nop			; (mov r8, r8)

08001780 <__aeabi_dcmpge>:
 8001780:	b510      	push	{r4, lr}
 8001782:	f000 fa65 	bl	8001c50 <__gedf2>
 8001786:	2800      	cmp	r0, #0
 8001788:	da01      	bge.n	800178e <__aeabi_dcmpge+0xe>
 800178a:	2000      	movs	r0, #0
 800178c:	bd10      	pop	{r4, pc}
 800178e:	2001      	movs	r0, #1
 8001790:	bd10      	pop	{r4, pc}
 8001792:	46c0      	nop			; (mov r8, r8)

08001794 <__aeabi_cfrcmple>:
 8001794:	4684      	mov	ip, r0
 8001796:	0008      	movs	r0, r1
 8001798:	4661      	mov	r1, ip
 800179a:	e7ff      	b.n	800179c <__aeabi_cfcmpeq>

0800179c <__aeabi_cfcmpeq>:
 800179c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800179e:	f000 f9d1 	bl	8001b44 <__lesf2>
 80017a2:	2800      	cmp	r0, #0
 80017a4:	d401      	bmi.n	80017aa <__aeabi_cfcmpeq+0xe>
 80017a6:	2100      	movs	r1, #0
 80017a8:	42c8      	cmn	r0, r1
 80017aa:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080017ac <__aeabi_fcmpeq>:
 80017ac:	b510      	push	{r4, lr}
 80017ae:	f000 f95d 	bl	8001a6c <__eqsf2>
 80017b2:	4240      	negs	r0, r0
 80017b4:	3001      	adds	r0, #1
 80017b6:	bd10      	pop	{r4, pc}

080017b8 <__aeabi_fcmplt>:
 80017b8:	b510      	push	{r4, lr}
 80017ba:	f000 f9c3 	bl	8001b44 <__lesf2>
 80017be:	2800      	cmp	r0, #0
 80017c0:	db01      	blt.n	80017c6 <__aeabi_fcmplt+0xe>
 80017c2:	2000      	movs	r0, #0
 80017c4:	bd10      	pop	{r4, pc}
 80017c6:	2001      	movs	r0, #1
 80017c8:	bd10      	pop	{r4, pc}
 80017ca:	46c0      	nop			; (mov r8, r8)

080017cc <__aeabi_fcmple>:
 80017cc:	b510      	push	{r4, lr}
 80017ce:	f000 f9b9 	bl	8001b44 <__lesf2>
 80017d2:	2800      	cmp	r0, #0
 80017d4:	dd01      	ble.n	80017da <__aeabi_fcmple+0xe>
 80017d6:	2000      	movs	r0, #0
 80017d8:	bd10      	pop	{r4, pc}
 80017da:	2001      	movs	r0, #1
 80017dc:	bd10      	pop	{r4, pc}
 80017de:	46c0      	nop			; (mov r8, r8)

080017e0 <__aeabi_fcmpgt>:
 80017e0:	b510      	push	{r4, lr}
 80017e2:	f000 f969 	bl	8001ab8 <__gesf2>
 80017e6:	2800      	cmp	r0, #0
 80017e8:	dc01      	bgt.n	80017ee <__aeabi_fcmpgt+0xe>
 80017ea:	2000      	movs	r0, #0
 80017ec:	bd10      	pop	{r4, pc}
 80017ee:	2001      	movs	r0, #1
 80017f0:	bd10      	pop	{r4, pc}
 80017f2:	46c0      	nop			; (mov r8, r8)

080017f4 <__aeabi_fcmpge>:
 80017f4:	b510      	push	{r4, lr}
 80017f6:	f000 f95f 	bl	8001ab8 <__gesf2>
 80017fa:	2800      	cmp	r0, #0
 80017fc:	da01      	bge.n	8001802 <__aeabi_fcmpge+0xe>
 80017fe:	2000      	movs	r0, #0
 8001800:	bd10      	pop	{r4, pc}
 8001802:	2001      	movs	r0, #1
 8001804:	bd10      	pop	{r4, pc}
 8001806:	46c0      	nop			; (mov r8, r8)

08001808 <__clzsi2>:
 8001808:	211c      	movs	r1, #28
 800180a:	2301      	movs	r3, #1
 800180c:	041b      	lsls	r3, r3, #16
 800180e:	4298      	cmp	r0, r3
 8001810:	d301      	bcc.n	8001816 <__clzsi2+0xe>
 8001812:	0c00      	lsrs	r0, r0, #16
 8001814:	3910      	subs	r1, #16
 8001816:	0a1b      	lsrs	r3, r3, #8
 8001818:	4298      	cmp	r0, r3
 800181a:	d301      	bcc.n	8001820 <__clzsi2+0x18>
 800181c:	0a00      	lsrs	r0, r0, #8
 800181e:	3908      	subs	r1, #8
 8001820:	091b      	lsrs	r3, r3, #4
 8001822:	4298      	cmp	r0, r3
 8001824:	d301      	bcc.n	800182a <__clzsi2+0x22>
 8001826:	0900      	lsrs	r0, r0, #4
 8001828:	3904      	subs	r1, #4
 800182a:	a202      	add	r2, pc, #8	; (adr r2, 8001834 <__clzsi2+0x2c>)
 800182c:	5c10      	ldrb	r0, [r2, r0]
 800182e:	1840      	adds	r0, r0, r1
 8001830:	4770      	bx	lr
 8001832:	46c0      	nop			; (mov r8, r8)
 8001834:	02020304 	.word	0x02020304
 8001838:	01010101 	.word	0x01010101
	...

08001844 <__aeabi_lmul>:
 8001844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001846:	46ce      	mov	lr, r9
 8001848:	4647      	mov	r7, r8
 800184a:	b580      	push	{r7, lr}
 800184c:	0007      	movs	r7, r0
 800184e:	4699      	mov	r9, r3
 8001850:	0c3b      	lsrs	r3, r7, #16
 8001852:	469c      	mov	ip, r3
 8001854:	0413      	lsls	r3, r2, #16
 8001856:	0c1b      	lsrs	r3, r3, #16
 8001858:	001d      	movs	r5, r3
 800185a:	000e      	movs	r6, r1
 800185c:	4661      	mov	r1, ip
 800185e:	0400      	lsls	r0, r0, #16
 8001860:	0c14      	lsrs	r4, r2, #16
 8001862:	0c00      	lsrs	r0, r0, #16
 8001864:	4345      	muls	r5, r0
 8001866:	434b      	muls	r3, r1
 8001868:	4360      	muls	r0, r4
 800186a:	4361      	muls	r1, r4
 800186c:	18c0      	adds	r0, r0, r3
 800186e:	0c2c      	lsrs	r4, r5, #16
 8001870:	1820      	adds	r0, r4, r0
 8001872:	468c      	mov	ip, r1
 8001874:	4283      	cmp	r3, r0
 8001876:	d903      	bls.n	8001880 <__aeabi_lmul+0x3c>
 8001878:	2380      	movs	r3, #128	; 0x80
 800187a:	025b      	lsls	r3, r3, #9
 800187c:	4698      	mov	r8, r3
 800187e:	44c4      	add	ip, r8
 8001880:	4649      	mov	r1, r9
 8001882:	4379      	muls	r1, r7
 8001884:	4372      	muls	r2, r6
 8001886:	0c03      	lsrs	r3, r0, #16
 8001888:	4463      	add	r3, ip
 800188a:	042d      	lsls	r5, r5, #16
 800188c:	0c2d      	lsrs	r5, r5, #16
 800188e:	18c9      	adds	r1, r1, r3
 8001890:	0400      	lsls	r0, r0, #16
 8001892:	1940      	adds	r0, r0, r5
 8001894:	1889      	adds	r1, r1, r2
 8001896:	bcc0      	pop	{r6, r7}
 8001898:	46b9      	mov	r9, r7
 800189a:	46b0      	mov	r8, r6
 800189c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800189e:	46c0      	nop			; (mov r8, r8)

080018a0 <__divdi3>:
 80018a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018a2:	4657      	mov	r7, sl
 80018a4:	464e      	mov	r6, r9
 80018a6:	4645      	mov	r5, r8
 80018a8:	46de      	mov	lr, fp
 80018aa:	b5e0      	push	{r5, r6, r7, lr}
 80018ac:	000f      	movs	r7, r1
 80018ae:	0019      	movs	r1, r3
 80018b0:	2300      	movs	r3, #0
 80018b2:	0006      	movs	r6, r0
 80018b4:	4698      	mov	r8, r3
 80018b6:	0010      	movs	r0, r2
 80018b8:	b083      	sub	sp, #12
 80018ba:	2f00      	cmp	r7, #0
 80018bc:	da07      	bge.n	80018ce <__divdi3+0x2e>
 80018be:	0033      	movs	r3, r6
 80018c0:	003c      	movs	r4, r7
 80018c2:	2700      	movs	r7, #0
 80018c4:	425e      	negs	r6, r3
 80018c6:	41a7      	sbcs	r7, r4
 80018c8:	2301      	movs	r3, #1
 80018ca:	425b      	negs	r3, r3
 80018cc:	4698      	mov	r8, r3
 80018ce:	2900      	cmp	r1, #0
 80018d0:	da07      	bge.n	80018e2 <__divdi3+0x42>
 80018d2:	4643      	mov	r3, r8
 80018d4:	43db      	mvns	r3, r3
 80018d6:	000c      	movs	r4, r1
 80018d8:	4698      	mov	r8, r3
 80018da:	0003      	movs	r3, r0
 80018dc:	2100      	movs	r1, #0
 80018de:	4258      	negs	r0, r3
 80018e0:	41a1      	sbcs	r1, r4
 80018e2:	0034      	movs	r4, r6
 80018e4:	003d      	movs	r5, r7
 80018e6:	4682      	mov	sl, r0
 80018e8:	4689      	mov	r9, r1
 80018ea:	42b9      	cmp	r1, r7
 80018ec:	d86a      	bhi.n	80019c4 <__divdi3+0x124>
 80018ee:	d067      	beq.n	80019c0 <__divdi3+0x120>
 80018f0:	4649      	mov	r1, r9
 80018f2:	4650      	mov	r0, sl
 80018f4:	f000 fa76 	bl	8001de4 <__clzdi2>
 80018f8:	4683      	mov	fp, r0
 80018fa:	0039      	movs	r1, r7
 80018fc:	0030      	movs	r0, r6
 80018fe:	f000 fa71 	bl	8001de4 <__clzdi2>
 8001902:	465b      	mov	r3, fp
 8001904:	1a1b      	subs	r3, r3, r0
 8001906:	469c      	mov	ip, r3
 8001908:	3b20      	subs	r3, #32
 800190a:	469b      	mov	fp, r3
 800190c:	d46b      	bmi.n	80019e6 <__divdi3+0x146>
 800190e:	4658      	mov	r0, fp
 8001910:	4651      	mov	r1, sl
 8001912:	4081      	lsls	r1, r0
 8001914:	4660      	mov	r0, ip
 8001916:	000b      	movs	r3, r1
 8001918:	4651      	mov	r1, sl
 800191a:	4081      	lsls	r1, r0
 800191c:	000a      	movs	r2, r1
 800191e:	42bb      	cmp	r3, r7
 8001920:	d900      	bls.n	8001924 <__divdi3+0x84>
 8001922:	e072      	b.n	8001a0a <__divdi3+0x16a>
 8001924:	42bb      	cmp	r3, r7
 8001926:	d100      	bne.n	800192a <__divdi3+0x8a>
 8001928:	e079      	b.n	8001a1e <__divdi3+0x17e>
 800192a:	0034      	movs	r4, r6
 800192c:	003d      	movs	r5, r7
 800192e:	4659      	mov	r1, fp
 8001930:	1aa4      	subs	r4, r4, r2
 8001932:	419d      	sbcs	r5, r3
 8001934:	2900      	cmp	r1, #0
 8001936:	da00      	bge.n	800193a <__divdi3+0x9a>
 8001938:	e074      	b.n	8001a24 <__divdi3+0x184>
 800193a:	2100      	movs	r1, #0
 800193c:	2000      	movs	r0, #0
 800193e:	2601      	movs	r6, #1
 8001940:	9000      	str	r0, [sp, #0]
 8001942:	9101      	str	r1, [sp, #4]
 8001944:	4659      	mov	r1, fp
 8001946:	408e      	lsls	r6, r1
 8001948:	9601      	str	r6, [sp, #4]
 800194a:	4661      	mov	r1, ip
 800194c:	2601      	movs	r6, #1
 800194e:	408e      	lsls	r6, r1
 8001950:	4661      	mov	r1, ip
 8001952:	9600      	str	r6, [sp, #0]
 8001954:	2900      	cmp	r1, #0
 8001956:	d05f      	beq.n	8001a18 <__divdi3+0x178>
 8001958:	07d9      	lsls	r1, r3, #31
 800195a:	0856      	lsrs	r6, r2, #1
 800195c:	430e      	orrs	r6, r1
 800195e:	085f      	lsrs	r7, r3, #1
 8001960:	4661      	mov	r1, ip
 8001962:	2201      	movs	r2, #1
 8001964:	2300      	movs	r3, #0
 8001966:	e00c      	b.n	8001982 <__divdi3+0xe2>
 8001968:	42af      	cmp	r7, r5
 800196a:	d101      	bne.n	8001970 <__divdi3+0xd0>
 800196c:	42a6      	cmp	r6, r4
 800196e:	d80a      	bhi.n	8001986 <__divdi3+0xe6>
 8001970:	1ba4      	subs	r4, r4, r6
 8001972:	41bd      	sbcs	r5, r7
 8001974:	1924      	adds	r4, r4, r4
 8001976:	416d      	adcs	r5, r5
 8001978:	3901      	subs	r1, #1
 800197a:	18a4      	adds	r4, r4, r2
 800197c:	415d      	adcs	r5, r3
 800197e:	2900      	cmp	r1, #0
 8001980:	d006      	beq.n	8001990 <__divdi3+0xf0>
 8001982:	42af      	cmp	r7, r5
 8001984:	d9f0      	bls.n	8001968 <__divdi3+0xc8>
 8001986:	3901      	subs	r1, #1
 8001988:	1924      	adds	r4, r4, r4
 800198a:	416d      	adcs	r5, r5
 800198c:	2900      	cmp	r1, #0
 800198e:	d1f8      	bne.n	8001982 <__divdi3+0xe2>
 8001990:	9800      	ldr	r0, [sp, #0]
 8001992:	9901      	ldr	r1, [sp, #4]
 8001994:	465b      	mov	r3, fp
 8001996:	1900      	adds	r0, r0, r4
 8001998:	4169      	adcs	r1, r5
 800199a:	2b00      	cmp	r3, #0
 800199c:	db4d      	blt.n	8001a3a <__divdi3+0x19a>
 800199e:	002e      	movs	r6, r5
 80019a0:	002c      	movs	r4, r5
 80019a2:	40de      	lsrs	r6, r3
 80019a4:	4663      	mov	r3, ip
 80019a6:	40dc      	lsrs	r4, r3
 80019a8:	465b      	mov	r3, fp
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	db55      	blt.n	8001a5a <__divdi3+0x1ba>
 80019ae:	0034      	movs	r4, r6
 80019b0:	409c      	lsls	r4, r3
 80019b2:	0023      	movs	r3, r4
 80019b4:	4664      	mov	r4, ip
 80019b6:	40a6      	lsls	r6, r4
 80019b8:	0032      	movs	r2, r6
 80019ba:	1a80      	subs	r0, r0, r2
 80019bc:	4199      	sbcs	r1, r3
 80019be:	e003      	b.n	80019c8 <__divdi3+0x128>
 80019c0:	42b0      	cmp	r0, r6
 80019c2:	d995      	bls.n	80018f0 <__divdi3+0x50>
 80019c4:	2000      	movs	r0, #0
 80019c6:	2100      	movs	r1, #0
 80019c8:	4643      	mov	r3, r8
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d004      	beq.n	80019d8 <__divdi3+0x138>
 80019ce:	0003      	movs	r3, r0
 80019d0:	000c      	movs	r4, r1
 80019d2:	2100      	movs	r1, #0
 80019d4:	4258      	negs	r0, r3
 80019d6:	41a1      	sbcs	r1, r4
 80019d8:	b003      	add	sp, #12
 80019da:	bcf0      	pop	{r4, r5, r6, r7}
 80019dc:	46bb      	mov	fp, r7
 80019de:	46b2      	mov	sl, r6
 80019e0:	46a9      	mov	r9, r5
 80019e2:	46a0      	mov	r8, r4
 80019e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019e6:	4662      	mov	r2, ip
 80019e8:	4648      	mov	r0, r9
 80019ea:	2320      	movs	r3, #32
 80019ec:	4651      	mov	r1, sl
 80019ee:	4090      	lsls	r0, r2
 80019f0:	1a9b      	subs	r3, r3, r2
 80019f2:	40d9      	lsrs	r1, r3
 80019f4:	0003      	movs	r3, r0
 80019f6:	9100      	str	r1, [sp, #0]
 80019f8:	9900      	ldr	r1, [sp, #0]
 80019fa:	4660      	mov	r0, ip
 80019fc:	430b      	orrs	r3, r1
 80019fe:	4651      	mov	r1, sl
 8001a00:	4081      	lsls	r1, r0
 8001a02:	000a      	movs	r2, r1
 8001a04:	42bb      	cmp	r3, r7
 8001a06:	d800      	bhi.n	8001a0a <__divdi3+0x16a>
 8001a08:	e78c      	b.n	8001924 <__divdi3+0x84>
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	2000      	movs	r0, #0
 8001a0e:	9000      	str	r0, [sp, #0]
 8001a10:	9101      	str	r1, [sp, #4]
 8001a12:	4661      	mov	r1, ip
 8001a14:	2900      	cmp	r1, #0
 8001a16:	d19f      	bne.n	8001958 <__divdi3+0xb8>
 8001a18:	9800      	ldr	r0, [sp, #0]
 8001a1a:	9901      	ldr	r1, [sp, #4]
 8001a1c:	e7d4      	b.n	80019c8 <__divdi3+0x128>
 8001a1e:	42b1      	cmp	r1, r6
 8001a20:	d8f3      	bhi.n	8001a0a <__divdi3+0x16a>
 8001a22:	e782      	b.n	800192a <__divdi3+0x8a>
 8001a24:	4661      	mov	r1, ip
 8001a26:	2620      	movs	r6, #32
 8001a28:	2701      	movs	r7, #1
 8001a2a:	1a76      	subs	r6, r6, r1
 8001a2c:	2000      	movs	r0, #0
 8001a2e:	2100      	movs	r1, #0
 8001a30:	40f7      	lsrs	r7, r6
 8001a32:	9000      	str	r0, [sp, #0]
 8001a34:	9101      	str	r1, [sp, #4]
 8001a36:	9701      	str	r7, [sp, #4]
 8001a38:	e787      	b.n	800194a <__divdi3+0xaa>
 8001a3a:	4662      	mov	r2, ip
 8001a3c:	2320      	movs	r3, #32
 8001a3e:	1a9b      	subs	r3, r3, r2
 8001a40:	002a      	movs	r2, r5
 8001a42:	409a      	lsls	r2, r3
 8001a44:	0026      	movs	r6, r4
 8001a46:	0013      	movs	r3, r2
 8001a48:	4662      	mov	r2, ip
 8001a4a:	40d6      	lsrs	r6, r2
 8001a4c:	002c      	movs	r4, r5
 8001a4e:	431e      	orrs	r6, r3
 8001a50:	4663      	mov	r3, ip
 8001a52:	40dc      	lsrs	r4, r3
 8001a54:	465b      	mov	r3, fp
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	daa9      	bge.n	80019ae <__divdi3+0x10e>
 8001a5a:	4662      	mov	r2, ip
 8001a5c:	2320      	movs	r3, #32
 8001a5e:	0035      	movs	r5, r6
 8001a60:	4094      	lsls	r4, r2
 8001a62:	1a9b      	subs	r3, r3, r2
 8001a64:	40dd      	lsrs	r5, r3
 8001a66:	0023      	movs	r3, r4
 8001a68:	432b      	orrs	r3, r5
 8001a6a:	e7a3      	b.n	80019b4 <__divdi3+0x114>

08001a6c <__eqsf2>:
 8001a6c:	b570      	push	{r4, r5, r6, lr}
 8001a6e:	0042      	lsls	r2, r0, #1
 8001a70:	0245      	lsls	r5, r0, #9
 8001a72:	024e      	lsls	r6, r1, #9
 8001a74:	004c      	lsls	r4, r1, #1
 8001a76:	0fc3      	lsrs	r3, r0, #31
 8001a78:	0a6d      	lsrs	r5, r5, #9
 8001a7a:	2001      	movs	r0, #1
 8001a7c:	0e12      	lsrs	r2, r2, #24
 8001a7e:	0a76      	lsrs	r6, r6, #9
 8001a80:	0e24      	lsrs	r4, r4, #24
 8001a82:	0fc9      	lsrs	r1, r1, #31
 8001a84:	2aff      	cmp	r2, #255	; 0xff
 8001a86:	d006      	beq.n	8001a96 <__eqsf2+0x2a>
 8001a88:	2cff      	cmp	r4, #255	; 0xff
 8001a8a:	d003      	beq.n	8001a94 <__eqsf2+0x28>
 8001a8c:	42a2      	cmp	r2, r4
 8001a8e:	d101      	bne.n	8001a94 <__eqsf2+0x28>
 8001a90:	42b5      	cmp	r5, r6
 8001a92:	d006      	beq.n	8001aa2 <__eqsf2+0x36>
 8001a94:	bd70      	pop	{r4, r5, r6, pc}
 8001a96:	2d00      	cmp	r5, #0
 8001a98:	d1fc      	bne.n	8001a94 <__eqsf2+0x28>
 8001a9a:	2cff      	cmp	r4, #255	; 0xff
 8001a9c:	d1fa      	bne.n	8001a94 <__eqsf2+0x28>
 8001a9e:	2e00      	cmp	r6, #0
 8001aa0:	d1f8      	bne.n	8001a94 <__eqsf2+0x28>
 8001aa2:	428b      	cmp	r3, r1
 8001aa4:	d006      	beq.n	8001ab4 <__eqsf2+0x48>
 8001aa6:	2001      	movs	r0, #1
 8001aa8:	2a00      	cmp	r2, #0
 8001aaa:	d1f3      	bne.n	8001a94 <__eqsf2+0x28>
 8001aac:	0028      	movs	r0, r5
 8001aae:	1e43      	subs	r3, r0, #1
 8001ab0:	4198      	sbcs	r0, r3
 8001ab2:	e7ef      	b.n	8001a94 <__eqsf2+0x28>
 8001ab4:	2000      	movs	r0, #0
 8001ab6:	e7ed      	b.n	8001a94 <__eqsf2+0x28>

08001ab8 <__gesf2>:
 8001ab8:	b570      	push	{r4, r5, r6, lr}
 8001aba:	0042      	lsls	r2, r0, #1
 8001abc:	0245      	lsls	r5, r0, #9
 8001abe:	024e      	lsls	r6, r1, #9
 8001ac0:	004c      	lsls	r4, r1, #1
 8001ac2:	0fc3      	lsrs	r3, r0, #31
 8001ac4:	0a6d      	lsrs	r5, r5, #9
 8001ac6:	0e12      	lsrs	r2, r2, #24
 8001ac8:	0a76      	lsrs	r6, r6, #9
 8001aca:	0e24      	lsrs	r4, r4, #24
 8001acc:	0fc8      	lsrs	r0, r1, #31
 8001ace:	2aff      	cmp	r2, #255	; 0xff
 8001ad0:	d01b      	beq.n	8001b0a <__gesf2+0x52>
 8001ad2:	2cff      	cmp	r4, #255	; 0xff
 8001ad4:	d00e      	beq.n	8001af4 <__gesf2+0x3c>
 8001ad6:	2a00      	cmp	r2, #0
 8001ad8:	d11b      	bne.n	8001b12 <__gesf2+0x5a>
 8001ada:	2c00      	cmp	r4, #0
 8001adc:	d101      	bne.n	8001ae2 <__gesf2+0x2a>
 8001ade:	2e00      	cmp	r6, #0
 8001ae0:	d01c      	beq.n	8001b1c <__gesf2+0x64>
 8001ae2:	2d00      	cmp	r5, #0
 8001ae4:	d00c      	beq.n	8001b00 <__gesf2+0x48>
 8001ae6:	4283      	cmp	r3, r0
 8001ae8:	d01c      	beq.n	8001b24 <__gesf2+0x6c>
 8001aea:	2102      	movs	r1, #2
 8001aec:	1e58      	subs	r0, r3, #1
 8001aee:	4008      	ands	r0, r1
 8001af0:	3801      	subs	r0, #1
 8001af2:	bd70      	pop	{r4, r5, r6, pc}
 8001af4:	2e00      	cmp	r6, #0
 8001af6:	d122      	bne.n	8001b3e <__gesf2+0x86>
 8001af8:	2a00      	cmp	r2, #0
 8001afa:	d1f4      	bne.n	8001ae6 <__gesf2+0x2e>
 8001afc:	2d00      	cmp	r5, #0
 8001afe:	d1f2      	bne.n	8001ae6 <__gesf2+0x2e>
 8001b00:	2800      	cmp	r0, #0
 8001b02:	d1f6      	bne.n	8001af2 <__gesf2+0x3a>
 8001b04:	2001      	movs	r0, #1
 8001b06:	4240      	negs	r0, r0
 8001b08:	e7f3      	b.n	8001af2 <__gesf2+0x3a>
 8001b0a:	2d00      	cmp	r5, #0
 8001b0c:	d117      	bne.n	8001b3e <__gesf2+0x86>
 8001b0e:	2cff      	cmp	r4, #255	; 0xff
 8001b10:	d0f0      	beq.n	8001af4 <__gesf2+0x3c>
 8001b12:	2c00      	cmp	r4, #0
 8001b14:	d1e7      	bne.n	8001ae6 <__gesf2+0x2e>
 8001b16:	2e00      	cmp	r6, #0
 8001b18:	d1e5      	bne.n	8001ae6 <__gesf2+0x2e>
 8001b1a:	e7e6      	b.n	8001aea <__gesf2+0x32>
 8001b1c:	2000      	movs	r0, #0
 8001b1e:	2d00      	cmp	r5, #0
 8001b20:	d0e7      	beq.n	8001af2 <__gesf2+0x3a>
 8001b22:	e7e2      	b.n	8001aea <__gesf2+0x32>
 8001b24:	42a2      	cmp	r2, r4
 8001b26:	dc05      	bgt.n	8001b34 <__gesf2+0x7c>
 8001b28:	dbea      	blt.n	8001b00 <__gesf2+0x48>
 8001b2a:	42b5      	cmp	r5, r6
 8001b2c:	d802      	bhi.n	8001b34 <__gesf2+0x7c>
 8001b2e:	d3e7      	bcc.n	8001b00 <__gesf2+0x48>
 8001b30:	2000      	movs	r0, #0
 8001b32:	e7de      	b.n	8001af2 <__gesf2+0x3a>
 8001b34:	4243      	negs	r3, r0
 8001b36:	4158      	adcs	r0, r3
 8001b38:	0040      	lsls	r0, r0, #1
 8001b3a:	3801      	subs	r0, #1
 8001b3c:	e7d9      	b.n	8001af2 <__gesf2+0x3a>
 8001b3e:	2002      	movs	r0, #2
 8001b40:	4240      	negs	r0, r0
 8001b42:	e7d6      	b.n	8001af2 <__gesf2+0x3a>

08001b44 <__lesf2>:
 8001b44:	b570      	push	{r4, r5, r6, lr}
 8001b46:	0042      	lsls	r2, r0, #1
 8001b48:	0245      	lsls	r5, r0, #9
 8001b4a:	024e      	lsls	r6, r1, #9
 8001b4c:	004c      	lsls	r4, r1, #1
 8001b4e:	0fc3      	lsrs	r3, r0, #31
 8001b50:	0a6d      	lsrs	r5, r5, #9
 8001b52:	0e12      	lsrs	r2, r2, #24
 8001b54:	0a76      	lsrs	r6, r6, #9
 8001b56:	0e24      	lsrs	r4, r4, #24
 8001b58:	0fc8      	lsrs	r0, r1, #31
 8001b5a:	2aff      	cmp	r2, #255	; 0xff
 8001b5c:	d00b      	beq.n	8001b76 <__lesf2+0x32>
 8001b5e:	2cff      	cmp	r4, #255	; 0xff
 8001b60:	d00d      	beq.n	8001b7e <__lesf2+0x3a>
 8001b62:	2a00      	cmp	r2, #0
 8001b64:	d11f      	bne.n	8001ba6 <__lesf2+0x62>
 8001b66:	2c00      	cmp	r4, #0
 8001b68:	d116      	bne.n	8001b98 <__lesf2+0x54>
 8001b6a:	2e00      	cmp	r6, #0
 8001b6c:	d114      	bne.n	8001b98 <__lesf2+0x54>
 8001b6e:	2000      	movs	r0, #0
 8001b70:	2d00      	cmp	r5, #0
 8001b72:	d010      	beq.n	8001b96 <__lesf2+0x52>
 8001b74:	e009      	b.n	8001b8a <__lesf2+0x46>
 8001b76:	2d00      	cmp	r5, #0
 8001b78:	d10c      	bne.n	8001b94 <__lesf2+0x50>
 8001b7a:	2cff      	cmp	r4, #255	; 0xff
 8001b7c:	d113      	bne.n	8001ba6 <__lesf2+0x62>
 8001b7e:	2e00      	cmp	r6, #0
 8001b80:	d108      	bne.n	8001b94 <__lesf2+0x50>
 8001b82:	2a00      	cmp	r2, #0
 8001b84:	d008      	beq.n	8001b98 <__lesf2+0x54>
 8001b86:	4283      	cmp	r3, r0
 8001b88:	d012      	beq.n	8001bb0 <__lesf2+0x6c>
 8001b8a:	2102      	movs	r1, #2
 8001b8c:	1e58      	subs	r0, r3, #1
 8001b8e:	4008      	ands	r0, r1
 8001b90:	3801      	subs	r0, #1
 8001b92:	e000      	b.n	8001b96 <__lesf2+0x52>
 8001b94:	2002      	movs	r0, #2
 8001b96:	bd70      	pop	{r4, r5, r6, pc}
 8001b98:	2d00      	cmp	r5, #0
 8001b9a:	d1f4      	bne.n	8001b86 <__lesf2+0x42>
 8001b9c:	2800      	cmp	r0, #0
 8001b9e:	d1fa      	bne.n	8001b96 <__lesf2+0x52>
 8001ba0:	2001      	movs	r0, #1
 8001ba2:	4240      	negs	r0, r0
 8001ba4:	e7f7      	b.n	8001b96 <__lesf2+0x52>
 8001ba6:	2c00      	cmp	r4, #0
 8001ba8:	d1ed      	bne.n	8001b86 <__lesf2+0x42>
 8001baa:	2e00      	cmp	r6, #0
 8001bac:	d1eb      	bne.n	8001b86 <__lesf2+0x42>
 8001bae:	e7ec      	b.n	8001b8a <__lesf2+0x46>
 8001bb0:	42a2      	cmp	r2, r4
 8001bb2:	dc05      	bgt.n	8001bc0 <__lesf2+0x7c>
 8001bb4:	dbf2      	blt.n	8001b9c <__lesf2+0x58>
 8001bb6:	42b5      	cmp	r5, r6
 8001bb8:	d802      	bhi.n	8001bc0 <__lesf2+0x7c>
 8001bba:	d3ef      	bcc.n	8001b9c <__lesf2+0x58>
 8001bbc:	2000      	movs	r0, #0
 8001bbe:	e7ea      	b.n	8001b96 <__lesf2+0x52>
 8001bc0:	4243      	negs	r3, r0
 8001bc2:	4158      	adcs	r0, r3
 8001bc4:	0040      	lsls	r0, r0, #1
 8001bc6:	3801      	subs	r0, #1
 8001bc8:	e7e5      	b.n	8001b96 <__lesf2+0x52>
 8001bca:	46c0      	nop			; (mov r8, r8)

08001bcc <__eqdf2>:
 8001bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bce:	464e      	mov	r6, r9
 8001bd0:	4645      	mov	r5, r8
 8001bd2:	46de      	mov	lr, fp
 8001bd4:	4657      	mov	r7, sl
 8001bd6:	4690      	mov	r8, r2
 8001bd8:	b5e0      	push	{r5, r6, r7, lr}
 8001bda:	0017      	movs	r7, r2
 8001bdc:	031a      	lsls	r2, r3, #12
 8001bde:	0b12      	lsrs	r2, r2, #12
 8001be0:	0005      	movs	r5, r0
 8001be2:	4684      	mov	ip, r0
 8001be4:	4819      	ldr	r0, [pc, #100]	; (8001c4c <__eqdf2+0x80>)
 8001be6:	030e      	lsls	r6, r1, #12
 8001be8:	004c      	lsls	r4, r1, #1
 8001bea:	4691      	mov	r9, r2
 8001bec:	005a      	lsls	r2, r3, #1
 8001bee:	0fdb      	lsrs	r3, r3, #31
 8001bf0:	469b      	mov	fp, r3
 8001bf2:	0b36      	lsrs	r6, r6, #12
 8001bf4:	0d64      	lsrs	r4, r4, #21
 8001bf6:	0fc9      	lsrs	r1, r1, #31
 8001bf8:	0d52      	lsrs	r2, r2, #21
 8001bfa:	4284      	cmp	r4, r0
 8001bfc:	d019      	beq.n	8001c32 <__eqdf2+0x66>
 8001bfe:	4282      	cmp	r2, r0
 8001c00:	d010      	beq.n	8001c24 <__eqdf2+0x58>
 8001c02:	2001      	movs	r0, #1
 8001c04:	4294      	cmp	r4, r2
 8001c06:	d10e      	bne.n	8001c26 <__eqdf2+0x5a>
 8001c08:	454e      	cmp	r6, r9
 8001c0a:	d10c      	bne.n	8001c26 <__eqdf2+0x5a>
 8001c0c:	2001      	movs	r0, #1
 8001c0e:	45c4      	cmp	ip, r8
 8001c10:	d109      	bne.n	8001c26 <__eqdf2+0x5a>
 8001c12:	4559      	cmp	r1, fp
 8001c14:	d017      	beq.n	8001c46 <__eqdf2+0x7a>
 8001c16:	2c00      	cmp	r4, #0
 8001c18:	d105      	bne.n	8001c26 <__eqdf2+0x5a>
 8001c1a:	0030      	movs	r0, r6
 8001c1c:	4328      	orrs	r0, r5
 8001c1e:	1e43      	subs	r3, r0, #1
 8001c20:	4198      	sbcs	r0, r3
 8001c22:	e000      	b.n	8001c26 <__eqdf2+0x5a>
 8001c24:	2001      	movs	r0, #1
 8001c26:	bcf0      	pop	{r4, r5, r6, r7}
 8001c28:	46bb      	mov	fp, r7
 8001c2a:	46b2      	mov	sl, r6
 8001c2c:	46a9      	mov	r9, r5
 8001c2e:	46a0      	mov	r8, r4
 8001c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c32:	0033      	movs	r3, r6
 8001c34:	2001      	movs	r0, #1
 8001c36:	432b      	orrs	r3, r5
 8001c38:	d1f5      	bne.n	8001c26 <__eqdf2+0x5a>
 8001c3a:	42a2      	cmp	r2, r4
 8001c3c:	d1f3      	bne.n	8001c26 <__eqdf2+0x5a>
 8001c3e:	464b      	mov	r3, r9
 8001c40:	433b      	orrs	r3, r7
 8001c42:	d1f0      	bne.n	8001c26 <__eqdf2+0x5a>
 8001c44:	e7e2      	b.n	8001c0c <__eqdf2+0x40>
 8001c46:	2000      	movs	r0, #0
 8001c48:	e7ed      	b.n	8001c26 <__eqdf2+0x5a>
 8001c4a:	46c0      	nop			; (mov r8, r8)
 8001c4c:	000007ff 	.word	0x000007ff

08001c50 <__gedf2>:
 8001c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c52:	4647      	mov	r7, r8
 8001c54:	46ce      	mov	lr, r9
 8001c56:	0004      	movs	r4, r0
 8001c58:	0018      	movs	r0, r3
 8001c5a:	0016      	movs	r6, r2
 8001c5c:	031b      	lsls	r3, r3, #12
 8001c5e:	0b1b      	lsrs	r3, r3, #12
 8001c60:	4d2d      	ldr	r5, [pc, #180]	; (8001d18 <__gedf2+0xc8>)
 8001c62:	004a      	lsls	r2, r1, #1
 8001c64:	4699      	mov	r9, r3
 8001c66:	b580      	push	{r7, lr}
 8001c68:	0043      	lsls	r3, r0, #1
 8001c6a:	030f      	lsls	r7, r1, #12
 8001c6c:	46a4      	mov	ip, r4
 8001c6e:	46b0      	mov	r8, r6
 8001c70:	0b3f      	lsrs	r7, r7, #12
 8001c72:	0d52      	lsrs	r2, r2, #21
 8001c74:	0fc9      	lsrs	r1, r1, #31
 8001c76:	0d5b      	lsrs	r3, r3, #21
 8001c78:	0fc0      	lsrs	r0, r0, #31
 8001c7a:	42aa      	cmp	r2, r5
 8001c7c:	d021      	beq.n	8001cc2 <__gedf2+0x72>
 8001c7e:	42ab      	cmp	r3, r5
 8001c80:	d013      	beq.n	8001caa <__gedf2+0x5a>
 8001c82:	2a00      	cmp	r2, #0
 8001c84:	d122      	bne.n	8001ccc <__gedf2+0x7c>
 8001c86:	433c      	orrs	r4, r7
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d102      	bne.n	8001c92 <__gedf2+0x42>
 8001c8c:	464d      	mov	r5, r9
 8001c8e:	432e      	orrs	r6, r5
 8001c90:	d022      	beq.n	8001cd8 <__gedf2+0x88>
 8001c92:	2c00      	cmp	r4, #0
 8001c94:	d010      	beq.n	8001cb8 <__gedf2+0x68>
 8001c96:	4281      	cmp	r1, r0
 8001c98:	d022      	beq.n	8001ce0 <__gedf2+0x90>
 8001c9a:	2002      	movs	r0, #2
 8001c9c:	3901      	subs	r1, #1
 8001c9e:	4008      	ands	r0, r1
 8001ca0:	3801      	subs	r0, #1
 8001ca2:	bcc0      	pop	{r6, r7}
 8001ca4:	46b9      	mov	r9, r7
 8001ca6:	46b0      	mov	r8, r6
 8001ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001caa:	464d      	mov	r5, r9
 8001cac:	432e      	orrs	r6, r5
 8001cae:	d129      	bne.n	8001d04 <__gedf2+0xb4>
 8001cb0:	2a00      	cmp	r2, #0
 8001cb2:	d1f0      	bne.n	8001c96 <__gedf2+0x46>
 8001cb4:	433c      	orrs	r4, r7
 8001cb6:	d1ee      	bne.n	8001c96 <__gedf2+0x46>
 8001cb8:	2800      	cmp	r0, #0
 8001cba:	d1f2      	bne.n	8001ca2 <__gedf2+0x52>
 8001cbc:	2001      	movs	r0, #1
 8001cbe:	4240      	negs	r0, r0
 8001cc0:	e7ef      	b.n	8001ca2 <__gedf2+0x52>
 8001cc2:	003d      	movs	r5, r7
 8001cc4:	4325      	orrs	r5, r4
 8001cc6:	d11d      	bne.n	8001d04 <__gedf2+0xb4>
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d0ee      	beq.n	8001caa <__gedf2+0x5a>
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d1e2      	bne.n	8001c96 <__gedf2+0x46>
 8001cd0:	464c      	mov	r4, r9
 8001cd2:	4326      	orrs	r6, r4
 8001cd4:	d1df      	bne.n	8001c96 <__gedf2+0x46>
 8001cd6:	e7e0      	b.n	8001c9a <__gedf2+0x4a>
 8001cd8:	2000      	movs	r0, #0
 8001cda:	2c00      	cmp	r4, #0
 8001cdc:	d0e1      	beq.n	8001ca2 <__gedf2+0x52>
 8001cde:	e7dc      	b.n	8001c9a <__gedf2+0x4a>
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	dc0a      	bgt.n	8001cfa <__gedf2+0xaa>
 8001ce4:	dbe8      	blt.n	8001cb8 <__gedf2+0x68>
 8001ce6:	454f      	cmp	r7, r9
 8001ce8:	d8d7      	bhi.n	8001c9a <__gedf2+0x4a>
 8001cea:	d00e      	beq.n	8001d0a <__gedf2+0xba>
 8001cec:	2000      	movs	r0, #0
 8001cee:	454f      	cmp	r7, r9
 8001cf0:	d2d7      	bcs.n	8001ca2 <__gedf2+0x52>
 8001cf2:	2900      	cmp	r1, #0
 8001cf4:	d0e2      	beq.n	8001cbc <__gedf2+0x6c>
 8001cf6:	0008      	movs	r0, r1
 8001cf8:	e7d3      	b.n	8001ca2 <__gedf2+0x52>
 8001cfa:	4243      	negs	r3, r0
 8001cfc:	4158      	adcs	r0, r3
 8001cfe:	0040      	lsls	r0, r0, #1
 8001d00:	3801      	subs	r0, #1
 8001d02:	e7ce      	b.n	8001ca2 <__gedf2+0x52>
 8001d04:	2002      	movs	r0, #2
 8001d06:	4240      	negs	r0, r0
 8001d08:	e7cb      	b.n	8001ca2 <__gedf2+0x52>
 8001d0a:	45c4      	cmp	ip, r8
 8001d0c:	d8c5      	bhi.n	8001c9a <__gedf2+0x4a>
 8001d0e:	2000      	movs	r0, #0
 8001d10:	45c4      	cmp	ip, r8
 8001d12:	d2c6      	bcs.n	8001ca2 <__gedf2+0x52>
 8001d14:	e7ed      	b.n	8001cf2 <__gedf2+0xa2>
 8001d16:	46c0      	nop			; (mov r8, r8)
 8001d18:	000007ff 	.word	0x000007ff

08001d1c <__ledf2>:
 8001d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d1e:	4647      	mov	r7, r8
 8001d20:	46ce      	mov	lr, r9
 8001d22:	0004      	movs	r4, r0
 8001d24:	0018      	movs	r0, r3
 8001d26:	0016      	movs	r6, r2
 8001d28:	031b      	lsls	r3, r3, #12
 8001d2a:	0b1b      	lsrs	r3, r3, #12
 8001d2c:	4d2c      	ldr	r5, [pc, #176]	; (8001de0 <__ledf2+0xc4>)
 8001d2e:	004a      	lsls	r2, r1, #1
 8001d30:	4699      	mov	r9, r3
 8001d32:	b580      	push	{r7, lr}
 8001d34:	0043      	lsls	r3, r0, #1
 8001d36:	030f      	lsls	r7, r1, #12
 8001d38:	46a4      	mov	ip, r4
 8001d3a:	46b0      	mov	r8, r6
 8001d3c:	0b3f      	lsrs	r7, r7, #12
 8001d3e:	0d52      	lsrs	r2, r2, #21
 8001d40:	0fc9      	lsrs	r1, r1, #31
 8001d42:	0d5b      	lsrs	r3, r3, #21
 8001d44:	0fc0      	lsrs	r0, r0, #31
 8001d46:	42aa      	cmp	r2, r5
 8001d48:	d00d      	beq.n	8001d66 <__ledf2+0x4a>
 8001d4a:	42ab      	cmp	r3, r5
 8001d4c:	d010      	beq.n	8001d70 <__ledf2+0x54>
 8001d4e:	2a00      	cmp	r2, #0
 8001d50:	d127      	bne.n	8001da2 <__ledf2+0x86>
 8001d52:	433c      	orrs	r4, r7
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d111      	bne.n	8001d7c <__ledf2+0x60>
 8001d58:	464d      	mov	r5, r9
 8001d5a:	432e      	orrs	r6, r5
 8001d5c:	d10e      	bne.n	8001d7c <__ledf2+0x60>
 8001d5e:	2000      	movs	r0, #0
 8001d60:	2c00      	cmp	r4, #0
 8001d62:	d015      	beq.n	8001d90 <__ledf2+0x74>
 8001d64:	e00e      	b.n	8001d84 <__ledf2+0x68>
 8001d66:	003d      	movs	r5, r7
 8001d68:	4325      	orrs	r5, r4
 8001d6a:	d110      	bne.n	8001d8e <__ledf2+0x72>
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d118      	bne.n	8001da2 <__ledf2+0x86>
 8001d70:	464d      	mov	r5, r9
 8001d72:	432e      	orrs	r6, r5
 8001d74:	d10b      	bne.n	8001d8e <__ledf2+0x72>
 8001d76:	2a00      	cmp	r2, #0
 8001d78:	d102      	bne.n	8001d80 <__ledf2+0x64>
 8001d7a:	433c      	orrs	r4, r7
 8001d7c:	2c00      	cmp	r4, #0
 8001d7e:	d00b      	beq.n	8001d98 <__ledf2+0x7c>
 8001d80:	4281      	cmp	r1, r0
 8001d82:	d014      	beq.n	8001dae <__ledf2+0x92>
 8001d84:	2002      	movs	r0, #2
 8001d86:	3901      	subs	r1, #1
 8001d88:	4008      	ands	r0, r1
 8001d8a:	3801      	subs	r0, #1
 8001d8c:	e000      	b.n	8001d90 <__ledf2+0x74>
 8001d8e:	2002      	movs	r0, #2
 8001d90:	bcc0      	pop	{r6, r7}
 8001d92:	46b9      	mov	r9, r7
 8001d94:	46b0      	mov	r8, r6
 8001d96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d98:	2800      	cmp	r0, #0
 8001d9a:	d1f9      	bne.n	8001d90 <__ledf2+0x74>
 8001d9c:	2001      	movs	r0, #1
 8001d9e:	4240      	negs	r0, r0
 8001da0:	e7f6      	b.n	8001d90 <__ledf2+0x74>
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d1ec      	bne.n	8001d80 <__ledf2+0x64>
 8001da6:	464c      	mov	r4, r9
 8001da8:	4326      	orrs	r6, r4
 8001daa:	d1e9      	bne.n	8001d80 <__ledf2+0x64>
 8001dac:	e7ea      	b.n	8001d84 <__ledf2+0x68>
 8001dae:	429a      	cmp	r2, r3
 8001db0:	dd04      	ble.n	8001dbc <__ledf2+0xa0>
 8001db2:	4243      	negs	r3, r0
 8001db4:	4158      	adcs	r0, r3
 8001db6:	0040      	lsls	r0, r0, #1
 8001db8:	3801      	subs	r0, #1
 8001dba:	e7e9      	b.n	8001d90 <__ledf2+0x74>
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	dbeb      	blt.n	8001d98 <__ledf2+0x7c>
 8001dc0:	454f      	cmp	r7, r9
 8001dc2:	d8df      	bhi.n	8001d84 <__ledf2+0x68>
 8001dc4:	d006      	beq.n	8001dd4 <__ledf2+0xb8>
 8001dc6:	2000      	movs	r0, #0
 8001dc8:	454f      	cmp	r7, r9
 8001dca:	d2e1      	bcs.n	8001d90 <__ledf2+0x74>
 8001dcc:	2900      	cmp	r1, #0
 8001dce:	d0e5      	beq.n	8001d9c <__ledf2+0x80>
 8001dd0:	0008      	movs	r0, r1
 8001dd2:	e7dd      	b.n	8001d90 <__ledf2+0x74>
 8001dd4:	45c4      	cmp	ip, r8
 8001dd6:	d8d5      	bhi.n	8001d84 <__ledf2+0x68>
 8001dd8:	2000      	movs	r0, #0
 8001dda:	45c4      	cmp	ip, r8
 8001ddc:	d2d8      	bcs.n	8001d90 <__ledf2+0x74>
 8001dde:	e7f5      	b.n	8001dcc <__ledf2+0xb0>
 8001de0:	000007ff 	.word	0x000007ff

08001de4 <__clzdi2>:
 8001de4:	b510      	push	{r4, lr}
 8001de6:	2900      	cmp	r1, #0
 8001de8:	d103      	bne.n	8001df2 <__clzdi2+0xe>
 8001dea:	f7ff fd0d 	bl	8001808 <__clzsi2>
 8001dee:	3020      	adds	r0, #32
 8001df0:	e002      	b.n	8001df8 <__clzdi2+0x14>
 8001df2:	0008      	movs	r0, r1
 8001df4:	f7ff fd08 	bl	8001808 <__clzsi2>
 8001df8:	bd10      	pop	{r4, pc}
 8001dfa:	46c0      	nop			; (mov r8, r8)

08001dfc <hx711_delay_us>:
#define hx711_delay(x)    HAL_Delay(x)
#endif

//#############################################################################################
void hx711_delay_us(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
  uint32_t delay = _HX711_DELAY_US_LOOP;
 8001e02:	2304      	movs	r3, #4
 8001e04:	607b      	str	r3, [r7, #4]
  while (delay > 0)
 8001e06:	e006      	b.n	8001e16 <hx711_delay_us+0x1a>
  {
    delay--;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	607b      	str	r3, [r7, #4]
    __NOP();__NOP(); __NOP(); __NOP();
 8001e0e:	46c0      	nop			; (mov r8, r8)
 8001e10:	46c0      	nop			; (mov r8, r8)
 8001e12:	46c0      	nop			; (mov r8, r8)
 8001e14:	46c0      	nop			; (mov r8, r8)
  while (delay > 0)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d1f5      	bne.n	8001e08 <hx711_delay_us+0xc>
  }
}
 8001e1c:	46c0      	nop			; (mov r8, r8)
 8001e1e:	46c0      	nop			; (mov r8, r8)
 8001e20:	46bd      	mov	sp, r7
 8001e22:	b002      	add	sp, #8
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <hx711_lock>:
//#############################################################################################
void hx711_lock(hx711_t *hx711)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b082      	sub	sp, #8
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
  while (hx711->lock)
 8001e2e:	e002      	b.n	8001e36 <hx711_lock+0x10>
    hx711_delay(1);
 8001e30:	2001      	movs	r0, #1
 8001e32:	f000 fd4f 	bl	80028d4 <HAL_Delay>
  while (hx711->lock)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	7d1b      	ldrb	r3, [r3, #20]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1f8      	bne.n	8001e30 <hx711_lock+0xa>
  hx711->lock = 1;      
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2201      	movs	r2, #1
 8001e42:	751a      	strb	r2, [r3, #20]
}
 8001e44:	46c0      	nop			; (mov r8, r8)
 8001e46:	46bd      	mov	sp, r7
 8001e48:	b002      	add	sp, #8
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <hx711_unlock>:
//#############################################################################################
void hx711_unlock(hx711_t *hx711)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  hx711->lock = 0;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	751a      	strb	r2, [r3, #20]
}
 8001e5a:	46c0      	nop			; (mov r8, r8)
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	b002      	add	sp, #8
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <hx711_init>:
//#############################################################################################
void hx711_init(hx711_t *hx711, GPIO_TypeDef *clk_gpio, uint16_t clk_pin, GPIO_TypeDef *dat_gpio, uint16_t dat_pin)
{
 8001e62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e64:	b08b      	sub	sp, #44	; 0x2c
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	60f8      	str	r0, [r7, #12]
 8001e6a:	60b9      	str	r1, [r7, #8]
 8001e6c:	603b      	str	r3, [r7, #0]
 8001e6e:	1dbb      	adds	r3, r7, #6
 8001e70:	801a      	strh	r2, [r3, #0]
  hx711_lock(hx711);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	0018      	movs	r0, r3
 8001e76:	f7ff ffd6 	bl	8001e26 <hx711_lock>
  hx711->clk_gpio = clk_gpio;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	68ba      	ldr	r2, [r7, #8]
 8001e7e:	601a      	str	r2, [r3, #0]
  hx711->clk_pin = clk_pin;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	1dba      	adds	r2, r7, #6
 8001e84:	8812      	ldrh	r2, [r2, #0]
 8001e86:	811a      	strh	r2, [r3, #8]
  hx711->dat_gpio = dat_gpio;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	605a      	str	r2, [r3, #4]
  hx711->dat_pin = dat_pin;
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	2530      	movs	r5, #48	; 0x30
 8001e92:	2608      	movs	r6, #8
 8001e94:	19ab      	adds	r3, r5, r6
 8001e96:	2108      	movs	r1, #8
 8001e98:	468c      	mov	ip, r1
 8001e9a:	44bc      	add	ip, r7
 8001e9c:	4463      	add	r3, ip
 8001e9e:	881b      	ldrh	r3, [r3, #0]
 8001ea0:	8153      	strh	r3, [r2, #10]
  
  GPIO_InitTypeDef  gpio = {0};
 8001ea2:	2414      	movs	r4, #20
 8001ea4:	193b      	adds	r3, r7, r4
 8001ea6:	0018      	movs	r0, r3
 8001ea8:	2314      	movs	r3, #20
 8001eaa:	001a      	movs	r2, r3
 8001eac:	2100      	movs	r1, #0
 8001eae:	f002 fc6f 	bl	8004790 <memset>
  gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8001eb2:	0021      	movs	r1, r4
 8001eb4:	187b      	adds	r3, r7, r1
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	605a      	str	r2, [r3, #4]
  gpio.Pull = GPIO_NOPULL;
 8001eba:	187b      	adds	r3, r7, r1
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	609a      	str	r2, [r3, #8]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ec0:	187b      	adds	r3, r7, r1
 8001ec2:	2203      	movs	r2, #3
 8001ec4:	60da      	str	r2, [r3, #12]
  gpio.Pin = clk_pin;
 8001ec6:	1dbb      	adds	r3, r7, #6
 8001ec8:	881a      	ldrh	r2, [r3, #0]
 8001eca:	187b      	adds	r3, r7, r1
 8001ecc:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(clk_gpio, &gpio);
 8001ece:	000c      	movs	r4, r1
 8001ed0:	187a      	adds	r2, r7, r1
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	0011      	movs	r1, r2
 8001ed6:	0018      	movs	r0, r3
 8001ed8:	f000 fe7c 	bl	8002bd4 <HAL_GPIO_Init>
  gpio.Mode = GPIO_MODE_INPUT;
 8001edc:	0021      	movs	r1, r4
 8001ede:	187b      	adds	r3, r7, r1
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	605a      	str	r2, [r3, #4]
  gpio.Pull = GPIO_PULLUP;
 8001ee4:	187b      	adds	r3, r7, r1
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	609a      	str	r2, [r3, #8]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8001eea:	187b      	adds	r3, r7, r1
 8001eec:	2203      	movs	r2, #3
 8001eee:	60da      	str	r2, [r3, #12]
  gpio.Pin = dat_pin;
 8001ef0:	19ab      	adds	r3, r5, r6
 8001ef2:	2208      	movs	r2, #8
 8001ef4:	4694      	mov	ip, r2
 8001ef6:	44bc      	add	ip, r7
 8001ef8:	4463      	add	r3, ip
 8001efa:	881a      	ldrh	r2, [r3, #0]
 8001efc:	187b      	adds	r3, r7, r1
 8001efe:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(dat_gpio, &gpio);
 8001f00:	187a      	adds	r2, r7, r1
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	0011      	movs	r1, r2
 8001f06:	0018      	movs	r0, r3
 8001f08:	f000 fe64 	bl	8002bd4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6818      	ldr	r0, [r3, #0]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	891b      	ldrh	r3, [r3, #8]
 8001f14:	2201      	movs	r2, #1
 8001f16:	0019      	movs	r1, r3
 8001f18:	f000 ffe9 	bl	8002eee <HAL_GPIO_WritePin>
  hx711_delay(10);
 8001f1c:	200a      	movs	r0, #10
 8001f1e:	f000 fcd9 	bl	80028d4 <HAL_Delay>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	6818      	ldr	r0, [r3, #0]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	891b      	ldrh	r3, [r3, #8]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	0019      	movs	r1, r3
 8001f2e:	f000 ffde 	bl	8002eee <HAL_GPIO_WritePin>
  hx711_delay(10);  
 8001f32:	200a      	movs	r0, #10
 8001f34:	f000 fcce 	bl	80028d4 <HAL_Delay>
  hx711_value(hx711);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	0018      	movs	r0, r3
 8001f3c:	f000 f80c 	bl	8001f58 <hx711_value>
  hx711_value(hx711);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	0018      	movs	r0, r3
 8001f44:	f000 f808 	bl	8001f58 <hx711_value>
  hx711_unlock(hx711); 
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	0018      	movs	r0, r3
 8001f4c:	f7ff ff7e 	bl	8001e4c <hx711_unlock>
}
 8001f50:	46c0      	nop			; (mov r8, r8)
 8001f52:	46bd      	mov	sp, r7
 8001f54:	b00b      	add	sp, #44	; 0x2c
 8001f56:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f58 <hx711_value>:
//#############################################################################################
int32_t hx711_value(hx711_t *hx711)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t data = 0;
 8001f60:	2300      	movs	r3, #0
 8001f62:	617b      	str	r3, [r7, #20]
  uint32_t  startTime = HAL_GetTick();
 8001f64:	f000 fcac 	bl	80028c0 <HAL_GetTick>
 8001f68:	0003      	movs	r3, r0
 8001f6a:	60fb      	str	r3, [r7, #12]
  while(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 8001f6c:	e00b      	b.n	8001f86 <hx711_value+0x2e>
  {
    hx711_delay(1);
 8001f6e:	2001      	movs	r0, #1
 8001f70:	f000 fcb0 	bl	80028d4 <HAL_Delay>
    if(HAL_GetTick() - startTime > 150)
 8001f74:	f000 fca4 	bl	80028c0 <HAL_GetTick>
 8001f78:	0002      	movs	r2, r0
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b96      	cmp	r3, #150	; 0x96
 8001f80:	d901      	bls.n	8001f86 <hx711_value+0x2e>
      return 0;
 8001f82:	2300      	movs	r3, #0
 8001f84:	e05d      	b.n	8002042 <hx711_value+0xea>
  while(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685a      	ldr	r2, [r3, #4]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	895b      	ldrh	r3, [r3, #10]
 8001f8e:	0019      	movs	r1, r3
 8001f90:	0010      	movs	r0, r2
 8001f92:	f000 ff8f 	bl	8002eb4 <HAL_GPIO_ReadPin>
 8001f96:	0003      	movs	r3, r0
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d0e8      	beq.n	8001f6e <hx711_value+0x16>
  }
  for(int8_t i=0; i<24 ; i++)
 8001f9c:	2313      	movs	r3, #19
 8001f9e:	18fb      	adds	r3, r7, r3
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	701a      	strb	r2, [r3, #0]
 8001fa4:	e02d      	b.n	8002002 <hx711_value+0xaa>
  {
    HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);   
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6818      	ldr	r0, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	891b      	ldrh	r3, [r3, #8]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	0019      	movs	r1, r3
 8001fb2:	f000 ff9c 	bl	8002eee <HAL_GPIO_WritePin>
    hx711_delay_us();
 8001fb6:	f7ff ff21 	bl	8001dfc <hx711_delay_us>
    HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6818      	ldr	r0, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	891b      	ldrh	r3, [r3, #8]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	0019      	movs	r1, r3
 8001fc6:	f000 ff92 	bl	8002eee <HAL_GPIO_WritePin>
    hx711_delay_us();
 8001fca:	f7ff ff17 	bl	8001dfc <hx711_delay_us>
    data = data << 1;    
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	617b      	str	r3, [r7, #20]
    if(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685a      	ldr	r2, [r3, #4]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	895b      	ldrh	r3, [r3, #10]
 8001fdc:	0019      	movs	r1, r3
 8001fde:	0010      	movs	r0, r2
 8001fe0:	f000 ff68 	bl	8002eb4 <HAL_GPIO_ReadPin>
 8001fe4:	0003      	movs	r3, r0
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d102      	bne.n	8001ff0 <hx711_value+0x98>
      data ++;
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	3301      	adds	r3, #1
 8001fee:	617b      	str	r3, [r7, #20]
  for(int8_t i=0; i<24 ; i++)
 8001ff0:	2113      	movs	r1, #19
 8001ff2:	187b      	adds	r3, r7, r1
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	b25b      	sxtb	r3, r3
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	b2da      	uxtb	r2, r3
 8001ffe:	187b      	adds	r3, r7, r1
 8002000:	701a      	strb	r2, [r3, #0]
 8002002:	2313      	movs	r3, #19
 8002004:	18fb      	adds	r3, r7, r3
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	b25b      	sxtb	r3, r3
 800200a:	2b17      	cmp	r3, #23
 800200c:	ddcb      	ble.n	8001fa6 <hx711_value+0x4e>
  }
  data = data ^ 0x800000; 
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	2280      	movs	r2, #128	; 0x80
 8002012:	0412      	lsls	r2, r2, #16
 8002014:	4053      	eors	r3, r2
 8002016:	617b      	str	r3, [r7, #20]
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);   
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6818      	ldr	r0, [r3, #0]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	891b      	ldrh	r3, [r3, #8]
 8002020:	2201      	movs	r2, #1
 8002022:	0019      	movs	r1, r3
 8002024:	f000 ff63 	bl	8002eee <HAL_GPIO_WritePin>
  hx711_delay_us();
 8002028:	f7ff fee8 	bl	8001dfc <hx711_delay_us>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6818      	ldr	r0, [r3, #0]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	891b      	ldrh	r3, [r3, #8]
 8002034:	2200      	movs	r2, #0
 8002036:	0019      	movs	r1, r3
 8002038:	f000 ff59 	bl	8002eee <HAL_GPIO_WritePin>
  hx711_delay_us();
 800203c:	f7ff fede 	bl	8001dfc <hx711_delay_us>
  return data;    
 8002040:	697b      	ldr	r3, [r7, #20]
}
 8002042:	0018      	movs	r0, r3
 8002044:	46bd      	mov	sp, r7
 8002046:	b006      	add	sp, #24
 8002048:	bd80      	pop	{r7, pc}

0800204a <hx711_tare>:
  hx711_unlock(hx711);
  return answer;
}
//#############################################################################################
void hx711_tare(hx711_t *hx711, uint16_t sample)
{
 800204a:	b5b0      	push	{r4, r5, r7, lr}
 800204c:	b088      	sub	sp, #32
 800204e:	af00      	add	r7, sp, #0
 8002050:	60f8      	str	r0, [r7, #12]
 8002052:	000a      	movs	r2, r1
 8002054:	230a      	movs	r3, #10
 8002056:	18fb      	adds	r3, r7, r3
 8002058:	801a      	strh	r2, [r3, #0]
  hx711_lock(hx711);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	0018      	movs	r0, r3
 800205e:	f7ff fee2 	bl	8001e26 <hx711_lock>
  int64_t  ave = 0;
 8002062:	2200      	movs	r2, #0
 8002064:	2300      	movs	r3, #0
 8002066:	61ba      	str	r2, [r7, #24]
 8002068:	61fb      	str	r3, [r7, #28]
  for(uint16_t i=0 ; i<sample ; i++)
 800206a:	230e      	movs	r3, #14
 800206c:	2208      	movs	r2, #8
 800206e:	189b      	adds	r3, r3, r2
 8002070:	19db      	adds	r3, r3, r7
 8002072:	2200      	movs	r2, #0
 8002074:	801a      	strh	r2, [r3, #0]
 8002076:	e019      	b.n	80020ac <hx711_tare+0x62>
  {
    ave += hx711_value(hx711);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	0018      	movs	r0, r3
 800207c:	f7ff ff6c 	bl	8001f58 <hx711_value>
 8002080:	0003      	movs	r3, r0
 8002082:	001c      	movs	r4, r3
 8002084:	17db      	asrs	r3, r3, #31
 8002086:	001d      	movs	r5, r3
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	1912      	adds	r2, r2, r4
 800208e:	416b      	adcs	r3, r5
 8002090:	61ba      	str	r2, [r7, #24]
 8002092:	61fb      	str	r3, [r7, #28]
    hx711_delay(5);
 8002094:	2005      	movs	r0, #5
 8002096:	f000 fc1d 	bl	80028d4 <HAL_Delay>
  for(uint16_t i=0 ; i<sample ; i++)
 800209a:	210e      	movs	r1, #14
 800209c:	2008      	movs	r0, #8
 800209e:	180b      	adds	r3, r1, r0
 80020a0:	19db      	adds	r3, r3, r7
 80020a2:	881a      	ldrh	r2, [r3, #0]
 80020a4:	180b      	adds	r3, r1, r0
 80020a6:	19db      	adds	r3, r3, r7
 80020a8:	3201      	adds	r2, #1
 80020aa:	801a      	strh	r2, [r3, #0]
 80020ac:	230e      	movs	r3, #14
 80020ae:	2208      	movs	r2, #8
 80020b0:	189b      	adds	r3, r3, r2
 80020b2:	19da      	adds	r2, r3, r7
 80020b4:	210a      	movs	r1, #10
 80020b6:	187b      	adds	r3, r7, r1
 80020b8:	8812      	ldrh	r2, [r2, #0]
 80020ba:	881b      	ldrh	r3, [r3, #0]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d3db      	bcc.n	8002078 <hx711_tare+0x2e>
  }
  hx711->offset = (int32_t)(ave / sample);
 80020c0:	187b      	adds	r3, r7, r1
 80020c2:	881b      	ldrh	r3, [r3, #0]
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	603b      	str	r3, [r7, #0]
 80020c8:	2300      	movs	r3, #0
 80020ca:	607b      	str	r3, [r7, #4]
 80020cc:	683a      	ldr	r2, [r7, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	69b8      	ldr	r0, [r7, #24]
 80020d2:	69f9      	ldr	r1, [r7, #28]
 80020d4:	f7fe f8b6 	bl	8000244 <__aeabi_ldivmod>
 80020d8:	0002      	movs	r2, r0
 80020da:	000b      	movs	r3, r1
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	60da      	str	r2, [r3, #12]
  hx711_unlock(hx711);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	0018      	movs	r0, r3
 80020e4:	f7ff feb2 	bl	8001e4c <hx711_unlock>
}
 80020e8:	46c0      	nop			; (mov r8, r8)
 80020ea:	46bd      	mov	sp, r7
 80020ec:	b008      	add	sp, #32
 80020ee:	bdb0      	pop	{r4, r5, r7, pc}

080020f0 <hx711_weight>:
  hx711->coef = (load_raw - noload_raw) / scale;  
  hx711_unlock(hx711);
}
//#############################################################################################
float hx711_weight(hx711_t *hx711, uint16_t sample)
{
 80020f0:	b5b0      	push	{r4, r5, r7, lr}
 80020f2:	b08a      	sub	sp, #40	; 0x28
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	000a      	movs	r2, r1
 80020fa:	230a      	movs	r3, #10
 80020fc:	18fb      	adds	r3, r7, r3
 80020fe:	801a      	strh	r2, [r3, #0]
  hx711_lock(hx711);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	0018      	movs	r0, r3
 8002104:	f7ff fe8f 	bl	8001e26 <hx711_lock>
  int64_t  ave = 0;
 8002108:	2200      	movs	r2, #0
 800210a:	2300      	movs	r3, #0
 800210c:	623a      	str	r2, [r7, #32]
 800210e:	627b      	str	r3, [r7, #36]	; 0x24
  for(uint16_t i=0 ; i<sample ; i++)
 8002110:	2316      	movs	r3, #22
 8002112:	2208      	movs	r2, #8
 8002114:	189b      	adds	r3, r3, r2
 8002116:	19db      	adds	r3, r3, r7
 8002118:	2200      	movs	r2, #0
 800211a:	801a      	strh	r2, [r3, #0]
 800211c:	e019      	b.n	8002152 <hx711_weight+0x62>
  {
    ave += hx711_value(hx711);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	0018      	movs	r0, r3
 8002122:	f7ff ff19 	bl	8001f58 <hx711_value>
 8002126:	0003      	movs	r3, r0
 8002128:	001c      	movs	r4, r3
 800212a:	17db      	asrs	r3, r3, #31
 800212c:	001d      	movs	r5, r3
 800212e:	6a3a      	ldr	r2, [r7, #32]
 8002130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002132:	1912      	adds	r2, r2, r4
 8002134:	416b      	adcs	r3, r5
 8002136:	623a      	str	r2, [r7, #32]
 8002138:	627b      	str	r3, [r7, #36]	; 0x24
    hx711_delay(5);
 800213a:	2005      	movs	r0, #5
 800213c:	f000 fbca 	bl	80028d4 <HAL_Delay>
  for(uint16_t i=0 ; i<sample ; i++)
 8002140:	2116      	movs	r1, #22
 8002142:	2008      	movs	r0, #8
 8002144:	180b      	adds	r3, r1, r0
 8002146:	19db      	adds	r3, r3, r7
 8002148:	881a      	ldrh	r2, [r3, #0]
 800214a:	180b      	adds	r3, r1, r0
 800214c:	19db      	adds	r3, r3, r7
 800214e:	3201      	adds	r2, #1
 8002150:	801a      	strh	r2, [r3, #0]
 8002152:	2316      	movs	r3, #22
 8002154:	2208      	movs	r2, #8
 8002156:	189b      	adds	r3, r3, r2
 8002158:	19da      	adds	r2, r3, r7
 800215a:	210a      	movs	r1, #10
 800215c:	187b      	adds	r3, r7, r1
 800215e:	8812      	ldrh	r2, [r2, #0]
 8002160:	881b      	ldrh	r3, [r3, #0]
 8002162:	429a      	cmp	r2, r3
 8002164:	d3db      	bcc.n	800211e <hx711_weight+0x2e>
  }
  int32_t data = (int32_t)(ave / sample);
 8002166:	187b      	adds	r3, r7, r1
 8002168:	881b      	ldrh	r3, [r3, #0]
 800216a:	b29b      	uxth	r3, r3
 800216c:	603b      	str	r3, [r7, #0]
 800216e:	2300      	movs	r3, #0
 8002170:	607b      	str	r3, [r7, #4]
 8002172:	683a      	ldr	r2, [r7, #0]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a38      	ldr	r0, [r7, #32]
 8002178:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800217a:	f7fe f863 	bl	8000244 <__aeabi_ldivmod>
 800217e:	0002      	movs	r2, r0
 8002180:	000b      	movs	r3, r1
 8002182:	0013      	movs	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
  float answer =  (data - hx711->offset) / hx711->coef;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	0018      	movs	r0, r3
 8002190:	f7fe fbb6 	bl	8000900 <__aeabi_i2f>
 8002194:	1c02      	adds	r2, r0, #0
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	1c19      	adds	r1, r3, #0
 800219c:	1c10      	adds	r0, r2, #0
 800219e:	f7fe f8c9 	bl	8000334 <__aeabi_fdiv>
 80021a2:	1c03      	adds	r3, r0, #0
 80021a4:	617b      	str	r3, [r7, #20]
  hx711_unlock(hx711);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	0018      	movs	r0, r3
 80021aa:	f7ff fe4f 	bl	8001e4c <hx711_unlock>
  return answer;
 80021ae:	697b      	ldr	r3, [r7, #20]
}
 80021b0:	1c18      	adds	r0, r3, #0
 80021b2:	46bd      	mov	sp, r7
 80021b4:	b00a      	add	sp, #40	; 0x28
 80021b6:	bdb0      	pop	{r4, r5, r7, pc}

080021b8 <hx711_coef_set>:
//#############################################################################################
void hx711_coef_set(hx711_t *hx711, float coef)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  hx711->coef = coef;  
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	683a      	ldr	r2, [r7, #0]
 80021c6:	611a      	str	r2, [r3, #16]
}
 80021c8:	46c0      	nop			; (mov r8, r8)
 80021ca:	46bd      	mov	sp, r7
 80021cc:	b002      	add	sp, #8
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021d2:	b0ab      	sub	sp, #172	; 0xac
 80021d4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021d6:	f000 fb19 	bl	800280c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021da:	f000 f8d9 	bl	8002390 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021de:	f000 f951 	bl	8002484 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80021e2:	f000 f91f 	bl	8002424 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  float coef;
  coef = 390;
 80021e6:	4b62      	ldr	r3, [pc, #392]	; (8002370 <main+0x1a0>)
 80021e8:	249c      	movs	r4, #156	; 0x9c
 80021ea:	193a      	adds	r2, r7, r4
 80021ec:	6013      	str	r3, [r2, #0]
  float val_offset;
  val_offset = 0;
 80021ee:	2300      	movs	r3, #0
 80021f0:	2298      	movs	r2, #152	; 0x98
 80021f2:	18b9      	adds	r1, r7, r2
 80021f4:	600b      	str	r3, [r1, #0]
  hx711_init(&loadcell, GPIOB, GPIO_PIN_6, GPIOB, GPIO_PIN_7);
 80021f6:	4a5f      	ldr	r2, [pc, #380]	; (8002374 <main+0x1a4>)
 80021f8:	495e      	ldr	r1, [pc, #376]	; (8002374 <main+0x1a4>)
 80021fa:	485f      	ldr	r0, [pc, #380]	; (8002378 <main+0x1a8>)
 80021fc:	2380      	movs	r3, #128	; 0x80
 80021fe:	9300      	str	r3, [sp, #0]
 8002200:	0013      	movs	r3, r2
 8002202:	2240      	movs	r2, #64	; 0x40
 8002204:	f7ff fe2d 	bl	8001e62 <hx711_init>
  hx711_coef_set(&loadcell, coef); // read afer calibration
 8002208:	193b      	adds	r3, r7, r4
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	4b5a      	ldr	r3, [pc, #360]	; (8002378 <main+0x1a8>)
 800220e:	1c11      	adds	r1, r2, #0
 8002210:	0018      	movs	r0, r3
 8002212:	f7ff ffd1 	bl	80021b8 <hx711_coef_set>
  hx711_tare(&loadcell, 10);
 8002216:	4b58      	ldr	r3, [pc, #352]	; (8002378 <main+0x1a8>)
 8002218:	210a      	movs	r1, #10
 800221a:	0018      	movs	r0, r3
 800221c:	f7ff ff15 	bl	800204a <hx711_tare>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t str_weight[50];
  uint8_t str[100];
  HAL_Delay(500);
 8002220:	23fa      	movs	r3, #250	; 0xfa
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	0018      	movs	r0, r3
 8002226:	f000 fb55 	bl	80028d4 <HAL_Delay>
  sprintf(str, "!%d.%03d;%d.%03d\n",(uint32_t)coef,(uint16_t)((coef - (uint32_t)coef)*1000.),(uint32_t)val_offset,(uint16_t)((val_offset - (uint32_t)val_offset)*1000.));
 800222a:	193b      	adds	r3, r7, r4
 800222c:	6818      	ldr	r0, [r3, #0]
 800222e:	f7fe f82d 	bl	800028c <__aeabi_f2uiz>
 8002232:	0005      	movs	r5, r0
 8002234:	193b      	adds	r3, r7, r4
 8002236:	6818      	ldr	r0, [r3, #0]
 8002238:	f7fe f828 	bl	800028c <__aeabi_f2uiz>
 800223c:	0003      	movs	r3, r0
 800223e:	0018      	movs	r0, r3
 8002240:	f7fe fbac 	bl	800099c <__aeabi_ui2f>
 8002244:	1c03      	adds	r3, r0, #0
 8002246:	1c19      	adds	r1, r3, #0
 8002248:	193b      	adds	r3, r7, r4
 800224a:	6818      	ldr	r0, [r3, #0]
 800224c:	f7fe f98a 	bl	8000564 <__aeabi_fsub>
 8002250:	1c03      	adds	r3, r0, #0
 8002252:	1c18      	adds	r0, r3, #0
 8002254:	f7ff fa18 	bl	8001688 <__aeabi_f2d>
 8002258:	2200      	movs	r2, #0
 800225a:	4b48      	ldr	r3, [pc, #288]	; (800237c <main+0x1ac>)
 800225c:	f7fe fbe0 	bl	8000a20 <__aeabi_dmul>
 8002260:	0002      	movs	r2, r0
 8002262:	000b      	movs	r3, r1
 8002264:	0010      	movs	r0, r2
 8002266:	0019      	movs	r1, r3
 8002268:	f7fe f828 	bl	80002bc <__aeabi_d2uiz>
 800226c:	0003      	movs	r3, r0
 800226e:	b29b      	uxth	r3, r3
 8002270:	001e      	movs	r6, r3
 8002272:	2298      	movs	r2, #152	; 0x98
 8002274:	18bb      	adds	r3, r7, r2
 8002276:	6818      	ldr	r0, [r3, #0]
 8002278:	f7fe f808 	bl	800028c <__aeabi_f2uiz>
 800227c:	0004      	movs	r4, r0
 800227e:	2298      	movs	r2, #152	; 0x98
 8002280:	18bb      	adds	r3, r7, r2
 8002282:	6818      	ldr	r0, [r3, #0]
 8002284:	f7fe f802 	bl	800028c <__aeabi_f2uiz>
 8002288:	0003      	movs	r3, r0
 800228a:	0018      	movs	r0, r3
 800228c:	f7fe fb86 	bl	800099c <__aeabi_ui2f>
 8002290:	1c03      	adds	r3, r0, #0
 8002292:	1c19      	adds	r1, r3, #0
 8002294:	2298      	movs	r2, #152	; 0x98
 8002296:	18bb      	adds	r3, r7, r2
 8002298:	6818      	ldr	r0, [r3, #0]
 800229a:	f7fe f963 	bl	8000564 <__aeabi_fsub>
 800229e:	1c03      	adds	r3, r0, #0
 80022a0:	1c18      	adds	r0, r3, #0
 80022a2:	f7ff f9f1 	bl	8001688 <__aeabi_f2d>
 80022a6:	2200      	movs	r2, #0
 80022a8:	4b34      	ldr	r3, [pc, #208]	; (800237c <main+0x1ac>)
 80022aa:	f7fe fbb9 	bl	8000a20 <__aeabi_dmul>
 80022ae:	0002      	movs	r2, r0
 80022b0:	000b      	movs	r3, r1
 80022b2:	0010      	movs	r0, r2
 80022b4:	0019      	movs	r1, r3
 80022b6:	f7fe f801 	bl	80002bc <__aeabi_d2uiz>
 80022ba:	0003      	movs	r3, r0
 80022bc:	b29b      	uxth	r3, r3
 80022be:	4930      	ldr	r1, [pc, #192]	; (8002380 <main+0x1b0>)
 80022c0:	0038      	movs	r0, r7
 80022c2:	9301      	str	r3, [sp, #4]
 80022c4:	9400      	str	r4, [sp, #0]
 80022c6:	0033      	movs	r3, r6
 80022c8:	002a      	movs	r2, r5
 80022ca:	f002 fa69 	bl	80047a0 <siprintf>
  HAL_UART_Transmit(&huart2, str, strlen((char *)str), 500);
 80022ce:	003b      	movs	r3, r7
 80022d0:	0018      	movs	r0, r3
 80022d2:	f7fd ff19 	bl	8000108 <strlen>
 80022d6:	0003      	movs	r3, r0
 80022d8:	b29a      	uxth	r2, r3
 80022da:	23fa      	movs	r3, #250	; 0xfa
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	0039      	movs	r1, r7
 80022e0:	4828      	ldr	r0, [pc, #160]	; (8002384 <main+0x1b4>)
 80022e2:	f001 fae1 	bl	80038a8 <HAL_UART_Transmit>
//	    }
//	  HAL_UART_Transmit(&huart2, TX_data, strlen((char *)TX_data), 0xFFFF);
//	  HAL_Delay(1000);
//	HAL_Delay(500);
//	  HAL_Delay(50);
	weight = hx711_weight(&loadcell, 1);
 80022e6:	4b24      	ldr	r3, [pc, #144]	; (8002378 <main+0x1a8>)
 80022e8:	2101      	movs	r1, #1
 80022ea:	0018      	movs	r0, r3
 80022ec:	f7ff ff00 	bl	80020f0 <hx711_weight>
 80022f0:	1c02      	adds	r2, r0, #0
 80022f2:	4b25      	ldr	r3, [pc, #148]	; (8002388 <main+0x1b8>)
 80022f4:	601a      	str	r2, [r3, #0]
//	weight = weight - (float)2179;
	weight = weight;
 80022f6:	4b24      	ldr	r3, [pc, #144]	; (8002388 <main+0x1b8>)
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	4b23      	ldr	r3, [pc, #140]	; (8002388 <main+0x1b8>)
 80022fc:	601a      	str	r2, [r3, #0]
	sprintf(str_weight, "weight=%d.%03d\n",(uint32_t)weight,(uint16_t)((weight - (uint32_t)weight)*1000.));
 80022fe:	4b22      	ldr	r3, [pc, #136]	; (8002388 <main+0x1b8>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	1c18      	adds	r0, r3, #0
 8002304:	f7fd ffc2 	bl	800028c <__aeabi_f2uiz>
 8002308:	0005      	movs	r5, r0
 800230a:	4b1f      	ldr	r3, [pc, #124]	; (8002388 <main+0x1b8>)
 800230c:	681c      	ldr	r4, [r3, #0]
 800230e:	4b1e      	ldr	r3, [pc, #120]	; (8002388 <main+0x1b8>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	1c18      	adds	r0, r3, #0
 8002314:	f7fd ffba 	bl	800028c <__aeabi_f2uiz>
 8002318:	0003      	movs	r3, r0
 800231a:	0018      	movs	r0, r3
 800231c:	f7fe fb3e 	bl	800099c <__aeabi_ui2f>
 8002320:	1c03      	adds	r3, r0, #0
 8002322:	1c19      	adds	r1, r3, #0
 8002324:	1c20      	adds	r0, r4, #0
 8002326:	f7fe f91d 	bl	8000564 <__aeabi_fsub>
 800232a:	1c03      	adds	r3, r0, #0
 800232c:	1c18      	adds	r0, r3, #0
 800232e:	f7ff f9ab 	bl	8001688 <__aeabi_f2d>
 8002332:	2200      	movs	r2, #0
 8002334:	4b11      	ldr	r3, [pc, #68]	; (800237c <main+0x1ac>)
 8002336:	f7fe fb73 	bl	8000a20 <__aeabi_dmul>
 800233a:	0002      	movs	r2, r0
 800233c:	000b      	movs	r3, r1
 800233e:	0010      	movs	r0, r2
 8002340:	0019      	movs	r1, r3
 8002342:	f7fd ffbb 	bl	80002bc <__aeabi_d2uiz>
 8002346:	0003      	movs	r3, r0
 8002348:	b29b      	uxth	r3, r3
 800234a:	4910      	ldr	r1, [pc, #64]	; (800238c <main+0x1bc>)
 800234c:	2464      	movs	r4, #100	; 0x64
 800234e:	1938      	adds	r0, r7, r4
 8002350:	002a      	movs	r2, r5
 8002352:	f002 fa25 	bl	80047a0 <siprintf>
//	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
	  HAL_UART_Transmit(&huart2, str_weight, strlen((char *)str_weight), 100);
 8002356:	193b      	adds	r3, r7, r4
 8002358:	0018      	movs	r0, r3
 800235a:	f7fd fed5 	bl	8000108 <strlen>
 800235e:	0003      	movs	r3, r0
 8002360:	b29a      	uxth	r2, r3
 8002362:	1939      	adds	r1, r7, r4
 8002364:	4807      	ldr	r0, [pc, #28]	; (8002384 <main+0x1b4>)
 8002366:	2364      	movs	r3, #100	; 0x64
 8002368:	f001 fa9e 	bl	80038a8 <HAL_UART_Transmit>
	weight = hx711_weight(&loadcell, 1);
 800236c:	e7bb      	b.n	80022e6 <main+0x116>
 800236e:	46c0      	nop			; (mov r8, r8)
 8002370:	43c30000 	.word	0x43c30000
 8002374:	48000400 	.word	0x48000400
 8002378:	20000110 	.word	0x20000110
 800237c:	408f4000 	.word	0x408f4000
 8002380:	0800508c 	.word	0x0800508c
 8002384:	2000008c 	.word	0x2000008c
 8002388:	20000128 	.word	0x20000128
 800238c:	080050a0 	.word	0x080050a0

08002390 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002390:	b590      	push	{r4, r7, lr}
 8002392:	b091      	sub	sp, #68	; 0x44
 8002394:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002396:	2410      	movs	r4, #16
 8002398:	193b      	adds	r3, r7, r4
 800239a:	0018      	movs	r0, r3
 800239c:	2330      	movs	r3, #48	; 0x30
 800239e:	001a      	movs	r2, r3
 80023a0:	2100      	movs	r1, #0
 80023a2:	f002 f9f5 	bl	8004790 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023a6:	003b      	movs	r3, r7
 80023a8:	0018      	movs	r0, r3
 80023aa:	2310      	movs	r3, #16
 80023ac:	001a      	movs	r2, r3
 80023ae:	2100      	movs	r1, #0
 80023b0:	f002 f9ee 	bl	8004790 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80023b4:	0021      	movs	r1, r4
 80023b6:	187b      	adds	r3, r7, r1
 80023b8:	2202      	movs	r2, #2
 80023ba:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023bc:	187b      	adds	r3, r7, r1
 80023be:	2201      	movs	r2, #1
 80023c0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80023c2:	187b      	adds	r3, r7, r1
 80023c4:	2210      	movs	r2, #16
 80023c6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023c8:	187b      	adds	r3, r7, r1
 80023ca:	2202      	movs	r2, #2
 80023cc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80023ce:	187b      	adds	r3, r7, r1
 80023d0:	2200      	movs	r2, #0
 80023d2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80023d4:	187b      	adds	r3, r7, r1
 80023d6:	22a0      	movs	r2, #160	; 0xa0
 80023d8:	0392      	lsls	r2, r2, #14
 80023da:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 80023dc:	187b      	adds	r3, r7, r1
 80023de:	2201      	movs	r2, #1
 80023e0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023e2:	187b      	adds	r3, r7, r1
 80023e4:	0018      	movs	r0, r3
 80023e6:	f000 fd9f 	bl	8002f28 <HAL_RCC_OscConfig>
 80023ea:	1e03      	subs	r3, r0, #0
 80023ec:	d001      	beq.n	80023f2 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80023ee:	f000 f905 	bl	80025fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023f2:	003b      	movs	r3, r7
 80023f4:	2207      	movs	r2, #7
 80023f6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023f8:	003b      	movs	r3, r7
 80023fa:	2202      	movs	r2, #2
 80023fc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023fe:	003b      	movs	r3, r7
 8002400:	2200      	movs	r2, #0
 8002402:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002404:	003b      	movs	r3, r7
 8002406:	2200      	movs	r2, #0
 8002408:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800240a:	003b      	movs	r3, r7
 800240c:	2101      	movs	r1, #1
 800240e:	0018      	movs	r0, r3
 8002410:	f001 f8a4 	bl	800355c <HAL_RCC_ClockConfig>
 8002414:	1e03      	subs	r3, r0, #0
 8002416:	d001      	beq.n	800241c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002418:	f000 f8f0 	bl	80025fc <Error_Handler>
  }
}
 800241c:	46c0      	nop			; (mov r8, r8)
 800241e:	46bd      	mov	sp, r7
 8002420:	b011      	add	sp, #68	; 0x44
 8002422:	bd90      	pop	{r4, r7, pc}

08002424 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002428:	4b14      	ldr	r3, [pc, #80]	; (800247c <MX_USART2_UART_Init+0x58>)
 800242a:	4a15      	ldr	r2, [pc, #84]	; (8002480 <MX_USART2_UART_Init+0x5c>)
 800242c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800242e:	4b13      	ldr	r3, [pc, #76]	; (800247c <MX_USART2_UART_Init+0x58>)
 8002430:	22e1      	movs	r2, #225	; 0xe1
 8002432:	0252      	lsls	r2, r2, #9
 8002434:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002436:	4b11      	ldr	r3, [pc, #68]	; (800247c <MX_USART2_UART_Init+0x58>)
 8002438:	2200      	movs	r2, #0
 800243a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800243c:	4b0f      	ldr	r3, [pc, #60]	; (800247c <MX_USART2_UART_Init+0x58>)
 800243e:	2200      	movs	r2, #0
 8002440:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002442:	4b0e      	ldr	r3, [pc, #56]	; (800247c <MX_USART2_UART_Init+0x58>)
 8002444:	2200      	movs	r2, #0
 8002446:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002448:	4b0c      	ldr	r3, [pc, #48]	; (800247c <MX_USART2_UART_Init+0x58>)
 800244a:	220c      	movs	r2, #12
 800244c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800244e:	4b0b      	ldr	r3, [pc, #44]	; (800247c <MX_USART2_UART_Init+0x58>)
 8002450:	2200      	movs	r2, #0
 8002452:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002454:	4b09      	ldr	r3, [pc, #36]	; (800247c <MX_USART2_UART_Init+0x58>)
 8002456:	2200      	movs	r2, #0
 8002458:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800245a:	4b08      	ldr	r3, [pc, #32]	; (800247c <MX_USART2_UART_Init+0x58>)
 800245c:	2200      	movs	r2, #0
 800245e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002460:	4b06      	ldr	r3, [pc, #24]	; (800247c <MX_USART2_UART_Init+0x58>)
 8002462:	2200      	movs	r2, #0
 8002464:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002466:	4b05      	ldr	r3, [pc, #20]	; (800247c <MX_USART2_UART_Init+0x58>)
 8002468:	0018      	movs	r0, r3
 800246a:	f001 f9c9 	bl	8003800 <HAL_UART_Init>
 800246e:	1e03      	subs	r3, r0, #0
 8002470:	d001      	beq.n	8002476 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002472:	f000 f8c3 	bl	80025fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */

}
 8002476:	46c0      	nop			; (mov r8, r8)
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	2000008c 	.word	0x2000008c
 8002480:	40004400 	.word	0x40004400

08002484 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002484:	b590      	push	{r4, r7, lr}
 8002486:	b08b      	sub	sp, #44	; 0x2c
 8002488:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800248a:	2414      	movs	r4, #20
 800248c:	193b      	adds	r3, r7, r4
 800248e:	0018      	movs	r0, r3
 8002490:	2314      	movs	r3, #20
 8002492:	001a      	movs	r2, r3
 8002494:	2100      	movs	r1, #0
 8002496:	f002 f97b 	bl	8004790 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800249a:	4b55      	ldr	r3, [pc, #340]	; (80025f0 <MX_GPIO_Init+0x16c>)
 800249c:	695a      	ldr	r2, [r3, #20]
 800249e:	4b54      	ldr	r3, [pc, #336]	; (80025f0 <MX_GPIO_Init+0x16c>)
 80024a0:	2180      	movs	r1, #128	; 0x80
 80024a2:	0309      	lsls	r1, r1, #12
 80024a4:	430a      	orrs	r2, r1
 80024a6:	615a      	str	r2, [r3, #20]
 80024a8:	4b51      	ldr	r3, [pc, #324]	; (80025f0 <MX_GPIO_Init+0x16c>)
 80024aa:	695a      	ldr	r2, [r3, #20]
 80024ac:	2380      	movs	r3, #128	; 0x80
 80024ae:	031b      	lsls	r3, r3, #12
 80024b0:	4013      	ands	r3, r2
 80024b2:	613b      	str	r3, [r7, #16]
 80024b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80024b6:	4b4e      	ldr	r3, [pc, #312]	; (80025f0 <MX_GPIO_Init+0x16c>)
 80024b8:	695a      	ldr	r2, [r3, #20]
 80024ba:	4b4d      	ldr	r3, [pc, #308]	; (80025f0 <MX_GPIO_Init+0x16c>)
 80024bc:	2180      	movs	r1, #128	; 0x80
 80024be:	03c9      	lsls	r1, r1, #15
 80024c0:	430a      	orrs	r2, r1
 80024c2:	615a      	str	r2, [r3, #20]
 80024c4:	4b4a      	ldr	r3, [pc, #296]	; (80025f0 <MX_GPIO_Init+0x16c>)
 80024c6:	695a      	ldr	r2, [r3, #20]
 80024c8:	2380      	movs	r3, #128	; 0x80
 80024ca:	03db      	lsls	r3, r3, #15
 80024cc:	4013      	ands	r3, r2
 80024ce:	60fb      	str	r3, [r7, #12]
 80024d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024d2:	4b47      	ldr	r3, [pc, #284]	; (80025f0 <MX_GPIO_Init+0x16c>)
 80024d4:	695a      	ldr	r2, [r3, #20]
 80024d6:	4b46      	ldr	r3, [pc, #280]	; (80025f0 <MX_GPIO_Init+0x16c>)
 80024d8:	2180      	movs	r1, #128	; 0x80
 80024da:	0289      	lsls	r1, r1, #10
 80024dc:	430a      	orrs	r2, r1
 80024de:	615a      	str	r2, [r3, #20]
 80024e0:	4b43      	ldr	r3, [pc, #268]	; (80025f0 <MX_GPIO_Init+0x16c>)
 80024e2:	695a      	ldr	r2, [r3, #20]
 80024e4:	2380      	movs	r3, #128	; 0x80
 80024e6:	029b      	lsls	r3, r3, #10
 80024e8:	4013      	ands	r3, r2
 80024ea:	60bb      	str	r3, [r7, #8]
 80024ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ee:	4b40      	ldr	r3, [pc, #256]	; (80025f0 <MX_GPIO_Init+0x16c>)
 80024f0:	695a      	ldr	r2, [r3, #20]
 80024f2:	4b3f      	ldr	r3, [pc, #252]	; (80025f0 <MX_GPIO_Init+0x16c>)
 80024f4:	2180      	movs	r1, #128	; 0x80
 80024f6:	02c9      	lsls	r1, r1, #11
 80024f8:	430a      	orrs	r2, r1
 80024fa:	615a      	str	r2, [r3, #20]
 80024fc:	4b3c      	ldr	r3, [pc, #240]	; (80025f0 <MX_GPIO_Init+0x16c>)
 80024fe:	695a      	ldr	r2, [r3, #20]
 8002500:	2380      	movs	r3, #128	; 0x80
 8002502:	02db      	lsls	r3, r3, #11
 8002504:	4013      	ands	r3, r2
 8002506:	607b      	str	r3, [r7, #4]
 8002508:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 800250a:	2380      	movs	r3, #128	; 0x80
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	4839      	ldr	r0, [pc, #228]	; (80025f4 <MX_GPIO_Init+0x170>)
 8002510:	2200      	movs	r2, #0
 8002512:	0019      	movs	r1, r3
 8002514:	f000 fceb 	bl	8002eee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8002518:	2380      	movs	r3, #128	; 0x80
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	4835      	ldr	r0, [pc, #212]	; (80025f4 <MX_GPIO_Init+0x170>)
 800251e:	2201      	movs	r2, #1
 8002520:	0019      	movs	r1, r3
 8002522:	f000 fce4 	bl	8002eee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8002526:	2380      	movs	r3, #128	; 0x80
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	4833      	ldr	r0, [pc, #204]	; (80025f8 <MX_GPIO_Init+0x174>)
 800252c:	2200      	movs	r2, #0
 800252e:	0019      	movs	r1, r3
 8002530:	f000 fcdd 	bl	8002eee <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002534:	193b      	adds	r3, r7, r4
 8002536:	2201      	movs	r2, #1
 8002538:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800253a:	193b      	adds	r3, r7, r4
 800253c:	2290      	movs	r2, #144	; 0x90
 800253e:	0352      	lsls	r2, r2, #13
 8002540:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002542:	193b      	adds	r3, r7, r4
 8002544:	2200      	movs	r2, #0
 8002546:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002548:	193a      	adds	r2, r7, r4
 800254a:	2390      	movs	r3, #144	; 0x90
 800254c:	05db      	lsls	r3, r3, #23
 800254e:	0011      	movs	r1, r2
 8002550:	0018      	movs	r0, r3
 8002552:	f000 fb3f 	bl	8002bd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002556:	193b      	adds	r3, r7, r4
 8002558:	2230      	movs	r2, #48	; 0x30
 800255a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800255c:	193b      	adds	r3, r7, r4
 800255e:	2200      	movs	r2, #0
 8002560:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002562:	193b      	adds	r3, r7, r4
 8002564:	2200      	movs	r2, #0
 8002566:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002568:	193a      	adds	r2, r7, r4
 800256a:	2390      	movs	r3, #144	; 0x90
 800256c:	05db      	lsls	r3, r3, #23
 800256e:	0011      	movs	r1, r2
 8002570:	0018      	movs	r0, r3
 8002572:	f000 fb2f 	bl	8002bd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 8002576:	0021      	movs	r1, r4
 8002578:	187b      	adds	r3, r7, r1
 800257a:	22c0      	movs	r2, #192	; 0xc0
 800257c:	0092      	lsls	r2, r2, #2
 800257e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002580:	000c      	movs	r4, r1
 8002582:	193b      	adds	r3, r7, r4
 8002584:	2201      	movs	r2, #1
 8002586:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002588:	193b      	adds	r3, r7, r4
 800258a:	2200      	movs	r2, #0
 800258c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800258e:	193b      	adds	r3, r7, r4
 8002590:	2200      	movs	r2, #0
 8002592:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002594:	193b      	adds	r3, r7, r4
 8002596:	4a17      	ldr	r2, [pc, #92]	; (80025f4 <MX_GPIO_Init+0x170>)
 8002598:	0019      	movs	r1, r3
 800259a:	0010      	movs	r0, r2
 800259c:	f000 fb1a 	bl	8002bd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80025a0:	193b      	adds	r3, r7, r4
 80025a2:	22c0      	movs	r2, #192	; 0xc0
 80025a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025a6:	193b      	adds	r3, r7, r4
 80025a8:	2200      	movs	r2, #0
 80025aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ac:	193b      	adds	r3, r7, r4
 80025ae:	2200      	movs	r2, #0
 80025b0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025b2:	193b      	adds	r3, r7, r4
 80025b4:	4a10      	ldr	r2, [pc, #64]	; (80025f8 <MX_GPIO_Init+0x174>)
 80025b6:	0019      	movs	r1, r3
 80025b8:	0010      	movs	r0, r2
 80025ba:	f000 fb0b 	bl	8002bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80025be:	0021      	movs	r1, r4
 80025c0:	187b      	adds	r3, r7, r1
 80025c2:	2280      	movs	r2, #128	; 0x80
 80025c4:	0092      	lsls	r2, r2, #2
 80025c6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025c8:	187b      	adds	r3, r7, r1
 80025ca:	2201      	movs	r2, #1
 80025cc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ce:	187b      	adds	r3, r7, r1
 80025d0:	2200      	movs	r2, #0
 80025d2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d4:	187b      	adds	r3, r7, r1
 80025d6:	2200      	movs	r2, #0
 80025d8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025da:	187b      	adds	r3, r7, r1
 80025dc:	4a06      	ldr	r2, [pc, #24]	; (80025f8 <MX_GPIO_Init+0x174>)
 80025de:	0019      	movs	r1, r3
 80025e0:	0010      	movs	r0, r2
 80025e2:	f000 faf7 	bl	8002bd4 <HAL_GPIO_Init>

}
 80025e6:	46c0      	nop			; (mov r8, r8)
 80025e8:	46bd      	mov	sp, r7
 80025ea:	b00b      	add	sp, #44	; 0x2c
 80025ec:	bd90      	pop	{r4, r7, pc}
 80025ee:	46c0      	nop			; (mov r8, r8)
 80025f0:	40021000 	.word	0x40021000
 80025f4:	48000800 	.word	0x48000800
 80025f8:	48000400 	.word	0x48000400

080025fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002600:	b672      	cpsid	i
}
 8002602:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002604:	e7fe      	b.n	8002604 <Error_Handler+0x8>
	...

08002608 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800260e:	4b0f      	ldr	r3, [pc, #60]	; (800264c <HAL_MspInit+0x44>)
 8002610:	699a      	ldr	r2, [r3, #24]
 8002612:	4b0e      	ldr	r3, [pc, #56]	; (800264c <HAL_MspInit+0x44>)
 8002614:	2101      	movs	r1, #1
 8002616:	430a      	orrs	r2, r1
 8002618:	619a      	str	r2, [r3, #24]
 800261a:	4b0c      	ldr	r3, [pc, #48]	; (800264c <HAL_MspInit+0x44>)
 800261c:	699b      	ldr	r3, [r3, #24]
 800261e:	2201      	movs	r2, #1
 8002620:	4013      	ands	r3, r2
 8002622:	607b      	str	r3, [r7, #4]
 8002624:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002626:	4b09      	ldr	r3, [pc, #36]	; (800264c <HAL_MspInit+0x44>)
 8002628:	69da      	ldr	r2, [r3, #28]
 800262a:	4b08      	ldr	r3, [pc, #32]	; (800264c <HAL_MspInit+0x44>)
 800262c:	2180      	movs	r1, #128	; 0x80
 800262e:	0549      	lsls	r1, r1, #21
 8002630:	430a      	orrs	r2, r1
 8002632:	61da      	str	r2, [r3, #28]
 8002634:	4b05      	ldr	r3, [pc, #20]	; (800264c <HAL_MspInit+0x44>)
 8002636:	69da      	ldr	r2, [r3, #28]
 8002638:	2380      	movs	r3, #128	; 0x80
 800263a:	055b      	lsls	r3, r3, #21
 800263c:	4013      	ands	r3, r2
 800263e:	603b      	str	r3, [r7, #0]
 8002640:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002642:	46c0      	nop			; (mov r8, r8)
 8002644:	46bd      	mov	sp, r7
 8002646:	b002      	add	sp, #8
 8002648:	bd80      	pop	{r7, pc}
 800264a:	46c0      	nop			; (mov r8, r8)
 800264c:	40021000 	.word	0x40021000

08002650 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002650:	b590      	push	{r4, r7, lr}
 8002652:	b08b      	sub	sp, #44	; 0x2c
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002658:	2414      	movs	r4, #20
 800265a:	193b      	adds	r3, r7, r4
 800265c:	0018      	movs	r0, r3
 800265e:	2314      	movs	r3, #20
 8002660:	001a      	movs	r2, r3
 8002662:	2100      	movs	r1, #0
 8002664:	f002 f894 	bl	8004790 <memset>
  if(huart->Instance==USART2)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a20      	ldr	r2, [pc, #128]	; (80026f0 <HAL_UART_MspInit+0xa0>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d13a      	bne.n	80026e8 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002672:	4b20      	ldr	r3, [pc, #128]	; (80026f4 <HAL_UART_MspInit+0xa4>)
 8002674:	69da      	ldr	r2, [r3, #28]
 8002676:	4b1f      	ldr	r3, [pc, #124]	; (80026f4 <HAL_UART_MspInit+0xa4>)
 8002678:	2180      	movs	r1, #128	; 0x80
 800267a:	0289      	lsls	r1, r1, #10
 800267c:	430a      	orrs	r2, r1
 800267e:	61da      	str	r2, [r3, #28]
 8002680:	4b1c      	ldr	r3, [pc, #112]	; (80026f4 <HAL_UART_MspInit+0xa4>)
 8002682:	69da      	ldr	r2, [r3, #28]
 8002684:	2380      	movs	r3, #128	; 0x80
 8002686:	029b      	lsls	r3, r3, #10
 8002688:	4013      	ands	r3, r2
 800268a:	613b      	str	r3, [r7, #16]
 800268c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800268e:	4b19      	ldr	r3, [pc, #100]	; (80026f4 <HAL_UART_MspInit+0xa4>)
 8002690:	695a      	ldr	r2, [r3, #20]
 8002692:	4b18      	ldr	r3, [pc, #96]	; (80026f4 <HAL_UART_MspInit+0xa4>)
 8002694:	2180      	movs	r1, #128	; 0x80
 8002696:	0289      	lsls	r1, r1, #10
 8002698:	430a      	orrs	r2, r1
 800269a:	615a      	str	r2, [r3, #20]
 800269c:	4b15      	ldr	r3, [pc, #84]	; (80026f4 <HAL_UART_MspInit+0xa4>)
 800269e:	695a      	ldr	r2, [r3, #20]
 80026a0:	2380      	movs	r3, #128	; 0x80
 80026a2:	029b      	lsls	r3, r3, #10
 80026a4:	4013      	ands	r3, r2
 80026a6:	60fb      	str	r3, [r7, #12]
 80026a8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80026aa:	0021      	movs	r1, r4
 80026ac:	187b      	adds	r3, r7, r1
 80026ae:	220c      	movs	r2, #12
 80026b0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b2:	187b      	adds	r3, r7, r1
 80026b4:	2202      	movs	r2, #2
 80026b6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b8:	187b      	adds	r3, r7, r1
 80026ba:	2200      	movs	r2, #0
 80026bc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026be:	187b      	adds	r3, r7, r1
 80026c0:	2203      	movs	r2, #3
 80026c2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80026c4:	187b      	adds	r3, r7, r1
 80026c6:	2201      	movs	r2, #1
 80026c8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ca:	187a      	adds	r2, r7, r1
 80026cc:	2390      	movs	r3, #144	; 0x90
 80026ce:	05db      	lsls	r3, r3, #23
 80026d0:	0011      	movs	r1, r2
 80026d2:	0018      	movs	r0, r3
 80026d4:	f000 fa7e 	bl	8002bd4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80026d8:	2200      	movs	r2, #0
 80026da:	2100      	movs	r1, #0
 80026dc:	201c      	movs	r0, #28
 80026de:	f000 f9c9 	bl	8002a74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80026e2:	201c      	movs	r0, #28
 80026e4:	f000 f9db 	bl	8002a9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80026e8:	46c0      	nop			; (mov r8, r8)
 80026ea:	46bd      	mov	sp, r7
 80026ec:	b00b      	add	sp, #44	; 0x2c
 80026ee:	bd90      	pop	{r4, r7, pc}
 80026f0:	40004400 	.word	0x40004400
 80026f4:	40021000 	.word	0x40021000

080026f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026fc:	e7fe      	b.n	80026fc <NMI_Handler+0x4>

080026fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002702:	e7fe      	b.n	8002702 <HardFault_Handler+0x4>

08002704 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002708:	46c0      	nop			; (mov r8, r8)
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002712:	46c0      	nop			; (mov r8, r8)
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800271c:	f000 f8be 	bl	800289c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002720:	46c0      	nop			; (mov r8, r8)
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
	...

08002728 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800272c:	4b03      	ldr	r3, [pc, #12]	; (800273c <USART2_IRQHandler+0x14>)
 800272e:	0018      	movs	r0, r3
 8002730:	f001 f964 	bl	80039fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002734:	46c0      	nop			; (mov r8, r8)
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	46c0      	nop			; (mov r8, r8)
 800273c:	2000008c 	.word	0x2000008c

08002740 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002748:	4a14      	ldr	r2, [pc, #80]	; (800279c <_sbrk+0x5c>)
 800274a:	4b15      	ldr	r3, [pc, #84]	; (80027a0 <_sbrk+0x60>)
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002754:	4b13      	ldr	r3, [pc, #76]	; (80027a4 <_sbrk+0x64>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d102      	bne.n	8002762 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800275c:	4b11      	ldr	r3, [pc, #68]	; (80027a4 <_sbrk+0x64>)
 800275e:	4a12      	ldr	r2, [pc, #72]	; (80027a8 <_sbrk+0x68>)
 8002760:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002762:	4b10      	ldr	r3, [pc, #64]	; (80027a4 <_sbrk+0x64>)
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	18d3      	adds	r3, r2, r3
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	429a      	cmp	r2, r3
 800276e:	d207      	bcs.n	8002780 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002770:	f001 ffe4 	bl	800473c <__errno>
 8002774:	0003      	movs	r3, r0
 8002776:	220c      	movs	r2, #12
 8002778:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800277a:	2301      	movs	r3, #1
 800277c:	425b      	negs	r3, r3
 800277e:	e009      	b.n	8002794 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002780:	4b08      	ldr	r3, [pc, #32]	; (80027a4 <_sbrk+0x64>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002786:	4b07      	ldr	r3, [pc, #28]	; (80027a4 <_sbrk+0x64>)
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	18d2      	adds	r2, r2, r3
 800278e:	4b05      	ldr	r3, [pc, #20]	; (80027a4 <_sbrk+0x64>)
 8002790:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002792:	68fb      	ldr	r3, [r7, #12]
}
 8002794:	0018      	movs	r0, r3
 8002796:	46bd      	mov	sp, r7
 8002798:	b006      	add	sp, #24
 800279a:	bd80      	pop	{r7, pc}
 800279c:	20002000 	.word	0x20002000
 80027a0:	00000400 	.word	0x00000400
 80027a4:	2000012c 	.word	0x2000012c
 80027a8:	20000148 	.word	0x20000148

080027ac <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80027b0:	46c0      	nop			; (mov r8, r8)
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
	...

080027b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80027b8:	480d      	ldr	r0, [pc, #52]	; (80027f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80027ba:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027bc:	480d      	ldr	r0, [pc, #52]	; (80027f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80027be:	490e      	ldr	r1, [pc, #56]	; (80027f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80027c0:	4a0e      	ldr	r2, [pc, #56]	; (80027fc <LoopForever+0xe>)
  movs r3, #0
 80027c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027c4:	e002      	b.n	80027cc <LoopCopyDataInit>

080027c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027ca:	3304      	adds	r3, #4

080027cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027d0:	d3f9      	bcc.n	80027c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027d2:	4a0b      	ldr	r2, [pc, #44]	; (8002800 <LoopForever+0x12>)
  ldr r4, =_ebss
 80027d4:	4c0b      	ldr	r4, [pc, #44]	; (8002804 <LoopForever+0x16>)
  movs r3, #0
 80027d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027d8:	e001      	b.n	80027de <LoopFillZerobss>

080027da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027dc:	3204      	adds	r2, #4

080027de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027e0:	d3fb      	bcc.n	80027da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80027e2:	f7ff ffe3 	bl	80027ac <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80027e6:	f001 ffaf 	bl	8004748 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80027ea:	f7ff fcf1 	bl	80021d0 <main>

080027ee <LoopForever>:

LoopForever:
    b LoopForever
 80027ee:	e7fe      	b.n	80027ee <LoopForever>
  ldr   r0, =_estack
 80027f0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80027f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027f8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80027fc:	080051ec 	.word	0x080051ec
  ldr r2, =_sbss
 8002800:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002804:	20000144 	.word	0x20000144

08002808 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002808:	e7fe      	b.n	8002808 <ADC1_COMP_IRQHandler>
	...

0800280c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002810:	4b07      	ldr	r3, [pc, #28]	; (8002830 <HAL_Init+0x24>)
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	4b06      	ldr	r3, [pc, #24]	; (8002830 <HAL_Init+0x24>)
 8002816:	2110      	movs	r1, #16
 8002818:	430a      	orrs	r2, r1
 800281a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800281c:	2000      	movs	r0, #0
 800281e:	f000 f809 	bl	8002834 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002822:	f7ff fef1 	bl	8002608 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002826:	2300      	movs	r3, #0
}
 8002828:	0018      	movs	r0, r3
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	46c0      	nop			; (mov r8, r8)
 8002830:	40022000 	.word	0x40022000

08002834 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002834:	b590      	push	{r4, r7, lr}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800283c:	4b14      	ldr	r3, [pc, #80]	; (8002890 <HAL_InitTick+0x5c>)
 800283e:	681c      	ldr	r4, [r3, #0]
 8002840:	4b14      	ldr	r3, [pc, #80]	; (8002894 <HAL_InitTick+0x60>)
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	0019      	movs	r1, r3
 8002846:	23fa      	movs	r3, #250	; 0xfa
 8002848:	0098      	lsls	r0, r3, #2
 800284a:	f7fd fc6f 	bl	800012c <__udivsi3>
 800284e:	0003      	movs	r3, r0
 8002850:	0019      	movs	r1, r3
 8002852:	0020      	movs	r0, r4
 8002854:	f7fd fc6a 	bl	800012c <__udivsi3>
 8002858:	0003      	movs	r3, r0
 800285a:	0018      	movs	r0, r3
 800285c:	f000 f92f 	bl	8002abe <HAL_SYSTICK_Config>
 8002860:	1e03      	subs	r3, r0, #0
 8002862:	d001      	beq.n	8002868 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e00f      	b.n	8002888 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2b03      	cmp	r3, #3
 800286c:	d80b      	bhi.n	8002886 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800286e:	6879      	ldr	r1, [r7, #4]
 8002870:	2301      	movs	r3, #1
 8002872:	425b      	negs	r3, r3
 8002874:	2200      	movs	r2, #0
 8002876:	0018      	movs	r0, r3
 8002878:	f000 f8fc 	bl	8002a74 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800287c:	4b06      	ldr	r3, [pc, #24]	; (8002898 <HAL_InitTick+0x64>)
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002882:	2300      	movs	r3, #0
 8002884:	e000      	b.n	8002888 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
}
 8002888:	0018      	movs	r0, r3
 800288a:	46bd      	mov	sp, r7
 800288c:	b003      	add	sp, #12
 800288e:	bd90      	pop	{r4, r7, pc}
 8002890:	20000000 	.word	0x20000000
 8002894:	20000008 	.word	0x20000008
 8002898:	20000004 	.word	0x20000004

0800289c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028a0:	4b05      	ldr	r3, [pc, #20]	; (80028b8 <HAL_IncTick+0x1c>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	001a      	movs	r2, r3
 80028a6:	4b05      	ldr	r3, [pc, #20]	; (80028bc <HAL_IncTick+0x20>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	18d2      	adds	r2, r2, r3
 80028ac:	4b03      	ldr	r3, [pc, #12]	; (80028bc <HAL_IncTick+0x20>)
 80028ae:	601a      	str	r2, [r3, #0]
}
 80028b0:	46c0      	nop			; (mov r8, r8)
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	46c0      	nop			; (mov r8, r8)
 80028b8:	20000008 	.word	0x20000008
 80028bc:	20000130 	.word	0x20000130

080028c0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
  return uwTick;
 80028c4:	4b02      	ldr	r3, [pc, #8]	; (80028d0 <HAL_GetTick+0x10>)
 80028c6:	681b      	ldr	r3, [r3, #0]
}
 80028c8:	0018      	movs	r0, r3
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	46c0      	nop			; (mov r8, r8)
 80028d0:	20000130 	.word	0x20000130

080028d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028dc:	f7ff fff0 	bl	80028c0 <HAL_GetTick>
 80028e0:	0003      	movs	r3, r0
 80028e2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	3301      	adds	r3, #1
 80028ec:	d005      	beq.n	80028fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028ee:	4b0a      	ldr	r3, [pc, #40]	; (8002918 <HAL_Delay+0x44>)
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	001a      	movs	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	189b      	adds	r3, r3, r2
 80028f8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80028fa:	46c0      	nop			; (mov r8, r8)
 80028fc:	f7ff ffe0 	bl	80028c0 <HAL_GetTick>
 8002900:	0002      	movs	r2, r0
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	429a      	cmp	r2, r3
 800290a:	d8f7      	bhi.n	80028fc <HAL_Delay+0x28>
  {
  }
}
 800290c:	46c0      	nop			; (mov r8, r8)
 800290e:	46c0      	nop			; (mov r8, r8)
 8002910:	46bd      	mov	sp, r7
 8002912:	b004      	add	sp, #16
 8002914:	bd80      	pop	{r7, pc}
 8002916:	46c0      	nop			; (mov r8, r8)
 8002918:	20000008 	.word	0x20000008

0800291c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	0002      	movs	r2, r0
 8002924:	1dfb      	adds	r3, r7, #7
 8002926:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002928:	1dfb      	adds	r3, r7, #7
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	2b7f      	cmp	r3, #127	; 0x7f
 800292e:	d809      	bhi.n	8002944 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002930:	1dfb      	adds	r3, r7, #7
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	001a      	movs	r2, r3
 8002936:	231f      	movs	r3, #31
 8002938:	401a      	ands	r2, r3
 800293a:	4b04      	ldr	r3, [pc, #16]	; (800294c <__NVIC_EnableIRQ+0x30>)
 800293c:	2101      	movs	r1, #1
 800293e:	4091      	lsls	r1, r2
 8002940:	000a      	movs	r2, r1
 8002942:	601a      	str	r2, [r3, #0]
  }
}
 8002944:	46c0      	nop			; (mov r8, r8)
 8002946:	46bd      	mov	sp, r7
 8002948:	b002      	add	sp, #8
 800294a:	bd80      	pop	{r7, pc}
 800294c:	e000e100 	.word	0xe000e100

08002950 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002950:	b590      	push	{r4, r7, lr}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	0002      	movs	r2, r0
 8002958:	6039      	str	r1, [r7, #0]
 800295a:	1dfb      	adds	r3, r7, #7
 800295c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800295e:	1dfb      	adds	r3, r7, #7
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	2b7f      	cmp	r3, #127	; 0x7f
 8002964:	d828      	bhi.n	80029b8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002966:	4a2f      	ldr	r2, [pc, #188]	; (8002a24 <__NVIC_SetPriority+0xd4>)
 8002968:	1dfb      	adds	r3, r7, #7
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	b25b      	sxtb	r3, r3
 800296e:	089b      	lsrs	r3, r3, #2
 8002970:	33c0      	adds	r3, #192	; 0xc0
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	589b      	ldr	r3, [r3, r2]
 8002976:	1dfa      	adds	r2, r7, #7
 8002978:	7812      	ldrb	r2, [r2, #0]
 800297a:	0011      	movs	r1, r2
 800297c:	2203      	movs	r2, #3
 800297e:	400a      	ands	r2, r1
 8002980:	00d2      	lsls	r2, r2, #3
 8002982:	21ff      	movs	r1, #255	; 0xff
 8002984:	4091      	lsls	r1, r2
 8002986:	000a      	movs	r2, r1
 8002988:	43d2      	mvns	r2, r2
 800298a:	401a      	ands	r2, r3
 800298c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	019b      	lsls	r3, r3, #6
 8002992:	22ff      	movs	r2, #255	; 0xff
 8002994:	401a      	ands	r2, r3
 8002996:	1dfb      	adds	r3, r7, #7
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	0018      	movs	r0, r3
 800299c:	2303      	movs	r3, #3
 800299e:	4003      	ands	r3, r0
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80029a4:	481f      	ldr	r0, [pc, #124]	; (8002a24 <__NVIC_SetPriority+0xd4>)
 80029a6:	1dfb      	adds	r3, r7, #7
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	b25b      	sxtb	r3, r3
 80029ac:	089b      	lsrs	r3, r3, #2
 80029ae:	430a      	orrs	r2, r1
 80029b0:	33c0      	adds	r3, #192	; 0xc0
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80029b6:	e031      	b.n	8002a1c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80029b8:	4a1b      	ldr	r2, [pc, #108]	; (8002a28 <__NVIC_SetPriority+0xd8>)
 80029ba:	1dfb      	adds	r3, r7, #7
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	0019      	movs	r1, r3
 80029c0:	230f      	movs	r3, #15
 80029c2:	400b      	ands	r3, r1
 80029c4:	3b08      	subs	r3, #8
 80029c6:	089b      	lsrs	r3, r3, #2
 80029c8:	3306      	adds	r3, #6
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	18d3      	adds	r3, r2, r3
 80029ce:	3304      	adds	r3, #4
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	1dfa      	adds	r2, r7, #7
 80029d4:	7812      	ldrb	r2, [r2, #0]
 80029d6:	0011      	movs	r1, r2
 80029d8:	2203      	movs	r2, #3
 80029da:	400a      	ands	r2, r1
 80029dc:	00d2      	lsls	r2, r2, #3
 80029de:	21ff      	movs	r1, #255	; 0xff
 80029e0:	4091      	lsls	r1, r2
 80029e2:	000a      	movs	r2, r1
 80029e4:	43d2      	mvns	r2, r2
 80029e6:	401a      	ands	r2, r3
 80029e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	019b      	lsls	r3, r3, #6
 80029ee:	22ff      	movs	r2, #255	; 0xff
 80029f0:	401a      	ands	r2, r3
 80029f2:	1dfb      	adds	r3, r7, #7
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	0018      	movs	r0, r3
 80029f8:	2303      	movs	r3, #3
 80029fa:	4003      	ands	r3, r0
 80029fc:	00db      	lsls	r3, r3, #3
 80029fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a00:	4809      	ldr	r0, [pc, #36]	; (8002a28 <__NVIC_SetPriority+0xd8>)
 8002a02:	1dfb      	adds	r3, r7, #7
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	001c      	movs	r4, r3
 8002a08:	230f      	movs	r3, #15
 8002a0a:	4023      	ands	r3, r4
 8002a0c:	3b08      	subs	r3, #8
 8002a0e:	089b      	lsrs	r3, r3, #2
 8002a10:	430a      	orrs	r2, r1
 8002a12:	3306      	adds	r3, #6
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	18c3      	adds	r3, r0, r3
 8002a18:	3304      	adds	r3, #4
 8002a1a:	601a      	str	r2, [r3, #0]
}
 8002a1c:	46c0      	nop			; (mov r8, r8)
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	b003      	add	sp, #12
 8002a22:	bd90      	pop	{r4, r7, pc}
 8002a24:	e000e100 	.word	0xe000e100
 8002a28:	e000ed00 	.word	0xe000ed00

08002a2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	1e5a      	subs	r2, r3, #1
 8002a38:	2380      	movs	r3, #128	; 0x80
 8002a3a:	045b      	lsls	r3, r3, #17
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d301      	bcc.n	8002a44 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a40:	2301      	movs	r3, #1
 8002a42:	e010      	b.n	8002a66 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a44:	4b0a      	ldr	r3, [pc, #40]	; (8002a70 <SysTick_Config+0x44>)
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	3a01      	subs	r2, #1
 8002a4a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	425b      	negs	r3, r3
 8002a50:	2103      	movs	r1, #3
 8002a52:	0018      	movs	r0, r3
 8002a54:	f7ff ff7c 	bl	8002950 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a58:	4b05      	ldr	r3, [pc, #20]	; (8002a70 <SysTick_Config+0x44>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a5e:	4b04      	ldr	r3, [pc, #16]	; (8002a70 <SysTick_Config+0x44>)
 8002a60:	2207      	movs	r2, #7
 8002a62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	0018      	movs	r0, r3
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	b002      	add	sp, #8
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	46c0      	nop			; (mov r8, r8)
 8002a70:	e000e010 	.word	0xe000e010

08002a74 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60b9      	str	r1, [r7, #8]
 8002a7c:	607a      	str	r2, [r7, #4]
 8002a7e:	210f      	movs	r1, #15
 8002a80:	187b      	adds	r3, r7, r1
 8002a82:	1c02      	adds	r2, r0, #0
 8002a84:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002a86:	68ba      	ldr	r2, [r7, #8]
 8002a88:	187b      	adds	r3, r7, r1
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	b25b      	sxtb	r3, r3
 8002a8e:	0011      	movs	r1, r2
 8002a90:	0018      	movs	r0, r3
 8002a92:	f7ff ff5d 	bl	8002950 <__NVIC_SetPriority>
}
 8002a96:	46c0      	nop			; (mov r8, r8)
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	b004      	add	sp, #16
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b082      	sub	sp, #8
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	0002      	movs	r2, r0
 8002aa6:	1dfb      	adds	r3, r7, #7
 8002aa8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002aaa:	1dfb      	adds	r3, r7, #7
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	b25b      	sxtb	r3, r3
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	f7ff ff33 	bl	800291c <__NVIC_EnableIRQ>
}
 8002ab6:	46c0      	nop			; (mov r8, r8)
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	b002      	add	sp, #8
 8002abc:	bd80      	pop	{r7, pc}

08002abe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b082      	sub	sp, #8
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	0018      	movs	r0, r3
 8002aca:	f7ff ffaf 	bl	8002a2c <SysTick_Config>
 8002ace:	0003      	movs	r3, r0
}
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	b002      	add	sp, #8
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2221      	movs	r2, #33	; 0x21
 8002ae4:	5c9b      	ldrb	r3, [r3, r2]
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d008      	beq.n	8002afe <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2204      	movs	r2, #4
 8002af0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2220      	movs	r2, #32
 8002af6:	2100      	movs	r1, #0
 8002af8:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e020      	b.n	8002b40 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	210e      	movs	r1, #14
 8002b0a:	438a      	bics	r2, r1
 8002b0c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2101      	movs	r1, #1
 8002b1a:	438a      	bics	r2, r1
 8002b1c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b26:	2101      	movs	r1, #1
 8002b28:	4091      	lsls	r1, r2
 8002b2a:	000a      	movs	r2, r1
 8002b2c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2221      	movs	r2, #33	; 0x21
 8002b32:	2101      	movs	r1, #1
 8002b34:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2220      	movs	r2, #32
 8002b3a:	2100      	movs	r1, #0
 8002b3c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	0018      	movs	r0, r3
 8002b42:	46bd      	mov	sp, r7
 8002b44:	b002      	add	sp, #8
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b50:	210f      	movs	r1, #15
 8002b52:	187b      	adds	r3, r7, r1
 8002b54:	2200      	movs	r2, #0
 8002b56:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2221      	movs	r2, #33	; 0x21
 8002b5c:	5c9b      	ldrb	r3, [r3, r2]
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d006      	beq.n	8002b72 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2204      	movs	r2, #4
 8002b68:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002b6a:	187b      	adds	r3, r7, r1
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	701a      	strb	r2, [r3, #0]
 8002b70:	e028      	b.n	8002bc4 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	210e      	movs	r1, #14
 8002b7e:	438a      	bics	r2, r1
 8002b80:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	438a      	bics	r2, r1
 8002b90:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b9a:	2101      	movs	r1, #1
 8002b9c:	4091      	lsls	r1, r2
 8002b9e:	000a      	movs	r2, r1
 8002ba0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2221      	movs	r2, #33	; 0x21
 8002ba6:	2101      	movs	r1, #1
 8002ba8:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2220      	movs	r2, #32
 8002bae:	2100      	movs	r1, #0
 8002bb0:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d004      	beq.n	8002bc4 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	0010      	movs	r0, r2
 8002bc2:	4798      	blx	r3
    } 
  }
  return status;
 8002bc4:	230f      	movs	r3, #15
 8002bc6:	18fb      	adds	r3, r7, r3
 8002bc8:	781b      	ldrb	r3, [r3, #0]
}
 8002bca:	0018      	movs	r0, r3
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	b004      	add	sp, #16
 8002bd0:	bd80      	pop	{r7, pc}
	...

08002bd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b086      	sub	sp, #24
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bde:	2300      	movs	r3, #0
 8002be0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002be2:	e14f      	b.n	8002e84 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2101      	movs	r1, #1
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	4091      	lsls	r1, r2
 8002bee:	000a      	movs	r2, r1
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d100      	bne.n	8002bfc <HAL_GPIO_Init+0x28>
 8002bfa:	e140      	b.n	8002e7e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	2203      	movs	r2, #3
 8002c02:	4013      	ands	r3, r2
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d005      	beq.n	8002c14 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	2203      	movs	r2, #3
 8002c0e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d130      	bne.n	8002c76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	2203      	movs	r2, #3
 8002c20:	409a      	lsls	r2, r3
 8002c22:	0013      	movs	r3, r2
 8002c24:	43da      	mvns	r2, r3
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	68da      	ldr	r2, [r3, #12]
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	409a      	lsls	r2, r3
 8002c36:	0013      	movs	r3, r2
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	693a      	ldr	r2, [r7, #16]
 8002c42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	409a      	lsls	r2, r3
 8002c50:	0013      	movs	r3, r2
 8002c52:	43da      	mvns	r2, r3
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	4013      	ands	r3, r2
 8002c58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	091b      	lsrs	r3, r3, #4
 8002c60:	2201      	movs	r2, #1
 8002c62:	401a      	ands	r2, r3
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	409a      	lsls	r2, r3
 8002c68:	0013      	movs	r3, r2
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	2203      	movs	r2, #3
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	2b03      	cmp	r3, #3
 8002c80:	d017      	beq.n	8002cb2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	2203      	movs	r2, #3
 8002c8e:	409a      	lsls	r2, r3
 8002c90:	0013      	movs	r3, r2
 8002c92:	43da      	mvns	r2, r3
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	4013      	ands	r3, r2
 8002c98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	689a      	ldr	r2, [r3, #8]
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	409a      	lsls	r2, r3
 8002ca4:	0013      	movs	r3, r2
 8002ca6:	693a      	ldr	r2, [r7, #16]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	2203      	movs	r2, #3
 8002cb8:	4013      	ands	r3, r2
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d123      	bne.n	8002d06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	08da      	lsrs	r2, r3, #3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	3208      	adds	r2, #8
 8002cc6:	0092      	lsls	r2, r2, #2
 8002cc8:	58d3      	ldr	r3, [r2, r3]
 8002cca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	2207      	movs	r2, #7
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	220f      	movs	r2, #15
 8002cd6:	409a      	lsls	r2, r3
 8002cd8:	0013      	movs	r3, r2
 8002cda:	43da      	mvns	r2, r3
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	4013      	ands	r3, r2
 8002ce0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	691a      	ldr	r2, [r3, #16]
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	2107      	movs	r1, #7
 8002cea:	400b      	ands	r3, r1
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	409a      	lsls	r2, r3
 8002cf0:	0013      	movs	r3, r2
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	08da      	lsrs	r2, r3, #3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	3208      	adds	r2, #8
 8002d00:	0092      	lsls	r2, r2, #2
 8002d02:	6939      	ldr	r1, [r7, #16]
 8002d04:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	2203      	movs	r2, #3
 8002d12:	409a      	lsls	r2, r3
 8002d14:	0013      	movs	r3, r2
 8002d16:	43da      	mvns	r2, r3
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	2203      	movs	r2, #3
 8002d24:	401a      	ands	r2, r3
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	409a      	lsls	r2, r3
 8002d2c:	0013      	movs	r3, r2
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	693a      	ldr	r2, [r7, #16]
 8002d38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	685a      	ldr	r2, [r3, #4]
 8002d3e:	23c0      	movs	r3, #192	; 0xc0
 8002d40:	029b      	lsls	r3, r3, #10
 8002d42:	4013      	ands	r3, r2
 8002d44:	d100      	bne.n	8002d48 <HAL_GPIO_Init+0x174>
 8002d46:	e09a      	b.n	8002e7e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d48:	4b54      	ldr	r3, [pc, #336]	; (8002e9c <HAL_GPIO_Init+0x2c8>)
 8002d4a:	699a      	ldr	r2, [r3, #24]
 8002d4c:	4b53      	ldr	r3, [pc, #332]	; (8002e9c <HAL_GPIO_Init+0x2c8>)
 8002d4e:	2101      	movs	r1, #1
 8002d50:	430a      	orrs	r2, r1
 8002d52:	619a      	str	r2, [r3, #24]
 8002d54:	4b51      	ldr	r3, [pc, #324]	; (8002e9c <HAL_GPIO_Init+0x2c8>)
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	60bb      	str	r3, [r7, #8]
 8002d5e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002d60:	4a4f      	ldr	r2, [pc, #316]	; (8002ea0 <HAL_GPIO_Init+0x2cc>)
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	089b      	lsrs	r3, r3, #2
 8002d66:	3302      	adds	r3, #2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	589b      	ldr	r3, [r3, r2]
 8002d6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	2203      	movs	r2, #3
 8002d72:	4013      	ands	r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	220f      	movs	r2, #15
 8002d78:	409a      	lsls	r2, r3
 8002d7a:	0013      	movs	r3, r2
 8002d7c:	43da      	mvns	r2, r3
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	4013      	ands	r3, r2
 8002d82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	2390      	movs	r3, #144	; 0x90
 8002d88:	05db      	lsls	r3, r3, #23
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d013      	beq.n	8002db6 <HAL_GPIO_Init+0x1e2>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a44      	ldr	r2, [pc, #272]	; (8002ea4 <HAL_GPIO_Init+0x2d0>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d00d      	beq.n	8002db2 <HAL_GPIO_Init+0x1de>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a43      	ldr	r2, [pc, #268]	; (8002ea8 <HAL_GPIO_Init+0x2d4>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d007      	beq.n	8002dae <HAL_GPIO_Init+0x1da>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a42      	ldr	r2, [pc, #264]	; (8002eac <HAL_GPIO_Init+0x2d8>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d101      	bne.n	8002daa <HAL_GPIO_Init+0x1d6>
 8002da6:	2303      	movs	r3, #3
 8002da8:	e006      	b.n	8002db8 <HAL_GPIO_Init+0x1e4>
 8002daa:	2305      	movs	r3, #5
 8002dac:	e004      	b.n	8002db8 <HAL_GPIO_Init+0x1e4>
 8002dae:	2302      	movs	r3, #2
 8002db0:	e002      	b.n	8002db8 <HAL_GPIO_Init+0x1e4>
 8002db2:	2301      	movs	r3, #1
 8002db4:	e000      	b.n	8002db8 <HAL_GPIO_Init+0x1e4>
 8002db6:	2300      	movs	r3, #0
 8002db8:	697a      	ldr	r2, [r7, #20]
 8002dba:	2103      	movs	r1, #3
 8002dbc:	400a      	ands	r2, r1
 8002dbe:	0092      	lsls	r2, r2, #2
 8002dc0:	4093      	lsls	r3, r2
 8002dc2:	693a      	ldr	r2, [r7, #16]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002dc8:	4935      	ldr	r1, [pc, #212]	; (8002ea0 <HAL_GPIO_Init+0x2cc>)
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	089b      	lsrs	r3, r3, #2
 8002dce:	3302      	adds	r3, #2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dd6:	4b36      	ldr	r3, [pc, #216]	; (8002eb0 <HAL_GPIO_Init+0x2dc>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	43da      	mvns	r2, r3
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	4013      	ands	r3, r2
 8002de4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685a      	ldr	r2, [r3, #4]
 8002dea:	2380      	movs	r3, #128	; 0x80
 8002dec:	025b      	lsls	r3, r3, #9
 8002dee:	4013      	ands	r3, r2
 8002df0:	d003      	beq.n	8002dfa <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002df2:	693a      	ldr	r2, [r7, #16]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002dfa:	4b2d      	ldr	r3, [pc, #180]	; (8002eb0 <HAL_GPIO_Init+0x2dc>)
 8002dfc:	693a      	ldr	r2, [r7, #16]
 8002dfe:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002e00:	4b2b      	ldr	r3, [pc, #172]	; (8002eb0 <HAL_GPIO_Init+0x2dc>)
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	43da      	mvns	r2, r3
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	685a      	ldr	r2, [r3, #4]
 8002e14:	2380      	movs	r3, #128	; 0x80
 8002e16:	029b      	lsls	r3, r3, #10
 8002e18:	4013      	ands	r3, r2
 8002e1a:	d003      	beq.n	8002e24 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002e24:	4b22      	ldr	r3, [pc, #136]	; (8002eb0 <HAL_GPIO_Init+0x2dc>)
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e2a:	4b21      	ldr	r3, [pc, #132]	; (8002eb0 <HAL_GPIO_Init+0x2dc>)
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	43da      	mvns	r2, r3
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	4013      	ands	r3, r2
 8002e38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	685a      	ldr	r2, [r3, #4]
 8002e3e:	2380      	movs	r3, #128	; 0x80
 8002e40:	035b      	lsls	r3, r3, #13
 8002e42:	4013      	ands	r3, r2
 8002e44:	d003      	beq.n	8002e4e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002e46:	693a      	ldr	r2, [r7, #16]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002e4e:	4b18      	ldr	r3, [pc, #96]	; (8002eb0 <HAL_GPIO_Init+0x2dc>)
 8002e50:	693a      	ldr	r2, [r7, #16]
 8002e52:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002e54:	4b16      	ldr	r3, [pc, #88]	; (8002eb0 <HAL_GPIO_Init+0x2dc>)
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	43da      	mvns	r2, r3
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	4013      	ands	r3, r2
 8002e62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685a      	ldr	r2, [r3, #4]
 8002e68:	2380      	movs	r3, #128	; 0x80
 8002e6a:	039b      	lsls	r3, r3, #14
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	d003      	beq.n	8002e78 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002e70:	693a      	ldr	r2, [r7, #16]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002e78:	4b0d      	ldr	r3, [pc, #52]	; (8002eb0 <HAL_GPIO_Init+0x2dc>)
 8002e7a:	693a      	ldr	r2, [r7, #16]
 8002e7c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	3301      	adds	r3, #1
 8002e82:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	40da      	lsrs	r2, r3
 8002e8c:	1e13      	subs	r3, r2, #0
 8002e8e:	d000      	beq.n	8002e92 <HAL_GPIO_Init+0x2be>
 8002e90:	e6a8      	b.n	8002be4 <HAL_GPIO_Init+0x10>
  } 
}
 8002e92:	46c0      	nop			; (mov r8, r8)
 8002e94:	46c0      	nop			; (mov r8, r8)
 8002e96:	46bd      	mov	sp, r7
 8002e98:	b006      	add	sp, #24
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	40010000 	.word	0x40010000
 8002ea4:	48000400 	.word	0x48000400
 8002ea8:	48000800 	.word	0x48000800
 8002eac:	48000c00 	.word	0x48000c00
 8002eb0:	40010400 	.word	0x40010400

08002eb4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	000a      	movs	r2, r1
 8002ebe:	1cbb      	adds	r3, r7, #2
 8002ec0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	1cba      	adds	r2, r7, #2
 8002ec8:	8812      	ldrh	r2, [r2, #0]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	d004      	beq.n	8002ed8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002ece:	230f      	movs	r3, #15
 8002ed0:	18fb      	adds	r3, r7, r3
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	701a      	strb	r2, [r3, #0]
 8002ed6:	e003      	b.n	8002ee0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ed8:	230f      	movs	r3, #15
 8002eda:	18fb      	adds	r3, r7, r3
 8002edc:	2200      	movs	r2, #0
 8002ede:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002ee0:	230f      	movs	r3, #15
 8002ee2:	18fb      	adds	r3, r7, r3
 8002ee4:	781b      	ldrb	r3, [r3, #0]
  }
 8002ee6:	0018      	movs	r0, r3
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	b004      	add	sp, #16
 8002eec:	bd80      	pop	{r7, pc}

08002eee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b082      	sub	sp, #8
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
 8002ef6:	0008      	movs	r0, r1
 8002ef8:	0011      	movs	r1, r2
 8002efa:	1cbb      	adds	r3, r7, #2
 8002efc:	1c02      	adds	r2, r0, #0
 8002efe:	801a      	strh	r2, [r3, #0]
 8002f00:	1c7b      	adds	r3, r7, #1
 8002f02:	1c0a      	adds	r2, r1, #0
 8002f04:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f06:	1c7b      	adds	r3, r7, #1
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d004      	beq.n	8002f18 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f0e:	1cbb      	adds	r3, r7, #2
 8002f10:	881a      	ldrh	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f16:	e003      	b.n	8002f20 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f18:	1cbb      	adds	r3, r7, #2
 8002f1a:	881a      	ldrh	r2, [r3, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f20:	46c0      	nop			; (mov r8, r8)
 8002f22:	46bd      	mov	sp, r7
 8002f24:	b002      	add	sp, #8
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b088      	sub	sp, #32
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e301      	b.n	800353e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	4013      	ands	r3, r2
 8002f42:	d100      	bne.n	8002f46 <HAL_RCC_OscConfig+0x1e>
 8002f44:	e08d      	b.n	8003062 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002f46:	4bc3      	ldr	r3, [pc, #780]	; (8003254 <HAL_RCC_OscConfig+0x32c>)
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	220c      	movs	r2, #12
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	2b04      	cmp	r3, #4
 8002f50:	d00e      	beq.n	8002f70 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f52:	4bc0      	ldr	r3, [pc, #768]	; (8003254 <HAL_RCC_OscConfig+0x32c>)
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	220c      	movs	r2, #12
 8002f58:	4013      	ands	r3, r2
 8002f5a:	2b08      	cmp	r3, #8
 8002f5c:	d116      	bne.n	8002f8c <HAL_RCC_OscConfig+0x64>
 8002f5e:	4bbd      	ldr	r3, [pc, #756]	; (8003254 <HAL_RCC_OscConfig+0x32c>)
 8002f60:	685a      	ldr	r2, [r3, #4]
 8002f62:	2380      	movs	r3, #128	; 0x80
 8002f64:	025b      	lsls	r3, r3, #9
 8002f66:	401a      	ands	r2, r3
 8002f68:	2380      	movs	r3, #128	; 0x80
 8002f6a:	025b      	lsls	r3, r3, #9
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d10d      	bne.n	8002f8c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f70:	4bb8      	ldr	r3, [pc, #736]	; (8003254 <HAL_RCC_OscConfig+0x32c>)
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	2380      	movs	r3, #128	; 0x80
 8002f76:	029b      	lsls	r3, r3, #10
 8002f78:	4013      	ands	r3, r2
 8002f7a:	d100      	bne.n	8002f7e <HAL_RCC_OscConfig+0x56>
 8002f7c:	e070      	b.n	8003060 <HAL_RCC_OscConfig+0x138>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d000      	beq.n	8002f88 <HAL_RCC_OscConfig+0x60>
 8002f86:	e06b      	b.n	8003060 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e2d8      	b.n	800353e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d107      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x7c>
 8002f94:	4baf      	ldr	r3, [pc, #700]	; (8003254 <HAL_RCC_OscConfig+0x32c>)
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	4bae      	ldr	r3, [pc, #696]	; (8003254 <HAL_RCC_OscConfig+0x32c>)
 8002f9a:	2180      	movs	r1, #128	; 0x80
 8002f9c:	0249      	lsls	r1, r1, #9
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	601a      	str	r2, [r3, #0]
 8002fa2:	e02f      	b.n	8003004 <HAL_RCC_OscConfig+0xdc>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d10c      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x9e>
 8002fac:	4ba9      	ldr	r3, [pc, #676]	; (8003254 <HAL_RCC_OscConfig+0x32c>)
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	4ba8      	ldr	r3, [pc, #672]	; (8003254 <HAL_RCC_OscConfig+0x32c>)
 8002fb2:	49a9      	ldr	r1, [pc, #676]	; (8003258 <HAL_RCC_OscConfig+0x330>)
 8002fb4:	400a      	ands	r2, r1
 8002fb6:	601a      	str	r2, [r3, #0]
 8002fb8:	4ba6      	ldr	r3, [pc, #664]	; (8003254 <HAL_RCC_OscConfig+0x32c>)
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	4ba5      	ldr	r3, [pc, #660]	; (8003254 <HAL_RCC_OscConfig+0x32c>)
 8002fbe:	49a7      	ldr	r1, [pc, #668]	; (800325c <HAL_RCC_OscConfig+0x334>)
 8002fc0:	400a      	ands	r2, r1
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	e01e      	b.n	8003004 <HAL_RCC_OscConfig+0xdc>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	2b05      	cmp	r3, #5
 8002fcc:	d10e      	bne.n	8002fec <HAL_RCC_OscConfig+0xc4>
 8002fce:	4ba1      	ldr	r3, [pc, #644]	; (8003254 <HAL_RCC_OscConfig+0x32c>)
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	4ba0      	ldr	r3, [pc, #640]	; (8003254 <HAL_RCC_OscConfig+0x32c>)
 8002fd4:	2180      	movs	r1, #128	; 0x80
 8002fd6:	02c9      	lsls	r1, r1, #11
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	4b9d      	ldr	r3, [pc, #628]	; (8003254 <HAL_RCC_OscConfig+0x32c>)
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	4b9c      	ldr	r3, [pc, #624]	; (8003254 <HAL_RCC_OscConfig+0x32c>)
 8002fe2:	2180      	movs	r1, #128	; 0x80
 8002fe4:	0249      	lsls	r1, r1, #9
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	601a      	str	r2, [r3, #0]
 8002fea:	e00b      	b.n	8003004 <HAL_RCC_OscConfig+0xdc>
 8002fec:	4b99      	ldr	r3, [pc, #612]	; (8003254 <HAL_RCC_OscConfig+0x32c>)
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	4b98      	ldr	r3, [pc, #608]	; (8003254 <HAL_RCC_OscConfig+0x32c>)
 8002ff2:	4999      	ldr	r1, [pc, #612]	; (8003258 <HAL_RCC_OscConfig+0x330>)
 8002ff4:	400a      	ands	r2, r1
 8002ff6:	601a      	str	r2, [r3, #0]
 8002ff8:	4b96      	ldr	r3, [pc, #600]	; (8003254 <HAL_RCC_OscConfig+0x32c>)
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	4b95      	ldr	r3, [pc, #596]	; (8003254 <HAL_RCC_OscConfig+0x32c>)
 8002ffe:	4997      	ldr	r1, [pc, #604]	; (800325c <HAL_RCC_OscConfig+0x334>)
 8003000:	400a      	ands	r2, r1
 8003002:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d014      	beq.n	8003036 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800300c:	f7ff fc58 	bl	80028c0 <HAL_GetTick>
 8003010:	0003      	movs	r3, r0
 8003012:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003014:	e008      	b.n	8003028 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003016:	f7ff fc53 	bl	80028c0 <HAL_GetTick>
 800301a:	0002      	movs	r2, r0
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	2b64      	cmp	r3, #100	; 0x64
 8003022:	d901      	bls.n	8003028 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e28a      	b.n	800353e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003028:	4b8a      	ldr	r3, [pc, #552]	; (8003254 <HAL_RCC_OscConfig+0x32c>)
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	2380      	movs	r3, #128	; 0x80
 800302e:	029b      	lsls	r3, r3, #10
 8003030:	4013      	ands	r3, r2
 8003032:	d0f0      	beq.n	8003016 <HAL_RCC_OscConfig+0xee>
 8003034:	e015      	b.n	8003062 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003036:	f7ff fc43 	bl	80028c0 <HAL_GetTick>
 800303a:	0003      	movs	r3, r0
 800303c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800303e:	e008      	b.n	8003052 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003040:	f7ff fc3e 	bl	80028c0 <HAL_GetTick>
 8003044:	0002      	movs	r2, r0
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b64      	cmp	r3, #100	; 0x64
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e275      	b.n	800353e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003052:	4b80      	ldr	r3, [pc, #512]	; (8003254 <HAL_RCC_OscConfig+0x32c>)
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	2380      	movs	r3, #128	; 0x80
 8003058:	029b      	lsls	r3, r3, #10
 800305a:	4013      	ands	r3, r2
 800305c:	d1f0      	bne.n	8003040 <HAL_RCC_OscConfig+0x118>
 800305e:	e000      	b.n	8003062 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003060:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2202      	movs	r2, #2
 8003068:	4013      	ands	r3, r2
 800306a:	d100      	bne.n	800306e <HAL_RCC_OscConfig+0x146>
 800306c:	e069      	b.n	8003142 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800306e:	4b79      	ldr	r3, [pc, #484]	; (8003254 <HAL_RCC_OscConfig+0x32c>)
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	220c      	movs	r2, #12
 8003074:	4013      	ands	r3, r2
 8003076:	d00b      	beq.n	8003090 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003078:	4b76      	ldr	r3, [pc, #472]	; (8003254 <HAL_RCC_OscConfig+0x32c>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	220c      	movs	r2, #12
 800307e:	4013      	ands	r3, r2
 8003080:	2b08      	cmp	r3, #8
 8003082:	d11c      	bne.n	80030be <HAL_RCC_OscConfig+0x196>
 8003084:	4b73      	ldr	r3, [pc, #460]	; (8003254 <HAL_RCC_OscConfig+0x32c>)
 8003086:	685a      	ldr	r2, [r3, #4]
 8003088:	2380      	movs	r3, #128	; 0x80
 800308a:	025b      	lsls	r3, r3, #9
 800308c:	4013      	ands	r3, r2
 800308e:	d116      	bne.n	80030be <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003090:	4b70      	ldr	r3, [pc, #448]	; (8003254 <HAL_RCC_OscConfig+0x32c>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2202      	movs	r2, #2
 8003096:	4013      	ands	r3, r2
 8003098:	d005      	beq.n	80030a6 <HAL_RCC_OscConfig+0x17e>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d001      	beq.n	80030a6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e24b      	b.n	800353e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030a6:	4b6b      	ldr	r3, [pc, #428]	; (8003254 <HAL_RCC_OscConfig+0x32c>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	22f8      	movs	r2, #248	; 0xf8
 80030ac:	4393      	bics	r3, r2
 80030ae:	0019      	movs	r1, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	00da      	lsls	r2, r3, #3
 80030b6:	4b67      	ldr	r3, [pc, #412]	; (8003254 <HAL_RCC_OscConfig+0x32c>)
 80030b8:	430a      	orrs	r2, r1
 80030ba:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030bc:	e041      	b.n	8003142 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d024      	beq.n	8003110 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030c6:	4b63      	ldr	r3, [pc, #396]	; (8003254 <HAL_RCC_OscConfig+0x32c>)
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	4b62      	ldr	r3, [pc, #392]	; (8003254 <HAL_RCC_OscConfig+0x32c>)
 80030cc:	2101      	movs	r1, #1
 80030ce:	430a      	orrs	r2, r1
 80030d0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d2:	f7ff fbf5 	bl	80028c0 <HAL_GetTick>
 80030d6:	0003      	movs	r3, r0
 80030d8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030da:	e008      	b.n	80030ee <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030dc:	f7ff fbf0 	bl	80028c0 <HAL_GetTick>
 80030e0:	0002      	movs	r2, r0
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e227      	b.n	800353e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030ee:	4b59      	ldr	r3, [pc, #356]	; (8003254 <HAL_RCC_OscConfig+0x32c>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2202      	movs	r2, #2
 80030f4:	4013      	ands	r3, r2
 80030f6:	d0f1      	beq.n	80030dc <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030f8:	4b56      	ldr	r3, [pc, #344]	; (8003254 <HAL_RCC_OscConfig+0x32c>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	22f8      	movs	r2, #248	; 0xf8
 80030fe:	4393      	bics	r3, r2
 8003100:	0019      	movs	r1, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	00da      	lsls	r2, r3, #3
 8003108:	4b52      	ldr	r3, [pc, #328]	; (8003254 <HAL_RCC_OscConfig+0x32c>)
 800310a:	430a      	orrs	r2, r1
 800310c:	601a      	str	r2, [r3, #0]
 800310e:	e018      	b.n	8003142 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003110:	4b50      	ldr	r3, [pc, #320]	; (8003254 <HAL_RCC_OscConfig+0x32c>)
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	4b4f      	ldr	r3, [pc, #316]	; (8003254 <HAL_RCC_OscConfig+0x32c>)
 8003116:	2101      	movs	r1, #1
 8003118:	438a      	bics	r2, r1
 800311a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800311c:	f7ff fbd0 	bl	80028c0 <HAL_GetTick>
 8003120:	0003      	movs	r3, r0
 8003122:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003124:	e008      	b.n	8003138 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003126:	f7ff fbcb 	bl	80028c0 <HAL_GetTick>
 800312a:	0002      	movs	r2, r0
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	2b02      	cmp	r3, #2
 8003132:	d901      	bls.n	8003138 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	e202      	b.n	800353e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003138:	4b46      	ldr	r3, [pc, #280]	; (8003254 <HAL_RCC_OscConfig+0x32c>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2202      	movs	r2, #2
 800313e:	4013      	ands	r3, r2
 8003140:	d1f1      	bne.n	8003126 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2208      	movs	r2, #8
 8003148:	4013      	ands	r3, r2
 800314a:	d036      	beq.n	80031ba <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	69db      	ldr	r3, [r3, #28]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d019      	beq.n	8003188 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003154:	4b3f      	ldr	r3, [pc, #252]	; (8003254 <HAL_RCC_OscConfig+0x32c>)
 8003156:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003158:	4b3e      	ldr	r3, [pc, #248]	; (8003254 <HAL_RCC_OscConfig+0x32c>)
 800315a:	2101      	movs	r1, #1
 800315c:	430a      	orrs	r2, r1
 800315e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003160:	f7ff fbae 	bl	80028c0 <HAL_GetTick>
 8003164:	0003      	movs	r3, r0
 8003166:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003168:	e008      	b.n	800317c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800316a:	f7ff fba9 	bl	80028c0 <HAL_GetTick>
 800316e:	0002      	movs	r2, r0
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	2b02      	cmp	r3, #2
 8003176:	d901      	bls.n	800317c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e1e0      	b.n	800353e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800317c:	4b35      	ldr	r3, [pc, #212]	; (8003254 <HAL_RCC_OscConfig+0x32c>)
 800317e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003180:	2202      	movs	r2, #2
 8003182:	4013      	ands	r3, r2
 8003184:	d0f1      	beq.n	800316a <HAL_RCC_OscConfig+0x242>
 8003186:	e018      	b.n	80031ba <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003188:	4b32      	ldr	r3, [pc, #200]	; (8003254 <HAL_RCC_OscConfig+0x32c>)
 800318a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800318c:	4b31      	ldr	r3, [pc, #196]	; (8003254 <HAL_RCC_OscConfig+0x32c>)
 800318e:	2101      	movs	r1, #1
 8003190:	438a      	bics	r2, r1
 8003192:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003194:	f7ff fb94 	bl	80028c0 <HAL_GetTick>
 8003198:	0003      	movs	r3, r0
 800319a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800319c:	e008      	b.n	80031b0 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800319e:	f7ff fb8f 	bl	80028c0 <HAL_GetTick>
 80031a2:	0002      	movs	r2, r0
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d901      	bls.n	80031b0 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e1c6      	b.n	800353e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031b0:	4b28      	ldr	r3, [pc, #160]	; (8003254 <HAL_RCC_OscConfig+0x32c>)
 80031b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b4:	2202      	movs	r2, #2
 80031b6:	4013      	ands	r3, r2
 80031b8:	d1f1      	bne.n	800319e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2204      	movs	r2, #4
 80031c0:	4013      	ands	r3, r2
 80031c2:	d100      	bne.n	80031c6 <HAL_RCC_OscConfig+0x29e>
 80031c4:	e0b4      	b.n	8003330 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031c6:	201f      	movs	r0, #31
 80031c8:	183b      	adds	r3, r7, r0
 80031ca:	2200      	movs	r2, #0
 80031cc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031ce:	4b21      	ldr	r3, [pc, #132]	; (8003254 <HAL_RCC_OscConfig+0x32c>)
 80031d0:	69da      	ldr	r2, [r3, #28]
 80031d2:	2380      	movs	r3, #128	; 0x80
 80031d4:	055b      	lsls	r3, r3, #21
 80031d6:	4013      	ands	r3, r2
 80031d8:	d110      	bne.n	80031fc <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031da:	4b1e      	ldr	r3, [pc, #120]	; (8003254 <HAL_RCC_OscConfig+0x32c>)
 80031dc:	69da      	ldr	r2, [r3, #28]
 80031de:	4b1d      	ldr	r3, [pc, #116]	; (8003254 <HAL_RCC_OscConfig+0x32c>)
 80031e0:	2180      	movs	r1, #128	; 0x80
 80031e2:	0549      	lsls	r1, r1, #21
 80031e4:	430a      	orrs	r2, r1
 80031e6:	61da      	str	r2, [r3, #28]
 80031e8:	4b1a      	ldr	r3, [pc, #104]	; (8003254 <HAL_RCC_OscConfig+0x32c>)
 80031ea:	69da      	ldr	r2, [r3, #28]
 80031ec:	2380      	movs	r3, #128	; 0x80
 80031ee:	055b      	lsls	r3, r3, #21
 80031f0:	4013      	ands	r3, r2
 80031f2:	60fb      	str	r3, [r7, #12]
 80031f4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80031f6:	183b      	adds	r3, r7, r0
 80031f8:	2201      	movs	r2, #1
 80031fa:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031fc:	4b18      	ldr	r3, [pc, #96]	; (8003260 <HAL_RCC_OscConfig+0x338>)
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	2380      	movs	r3, #128	; 0x80
 8003202:	005b      	lsls	r3, r3, #1
 8003204:	4013      	ands	r3, r2
 8003206:	d11a      	bne.n	800323e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003208:	4b15      	ldr	r3, [pc, #84]	; (8003260 <HAL_RCC_OscConfig+0x338>)
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	4b14      	ldr	r3, [pc, #80]	; (8003260 <HAL_RCC_OscConfig+0x338>)
 800320e:	2180      	movs	r1, #128	; 0x80
 8003210:	0049      	lsls	r1, r1, #1
 8003212:	430a      	orrs	r2, r1
 8003214:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003216:	f7ff fb53 	bl	80028c0 <HAL_GetTick>
 800321a:	0003      	movs	r3, r0
 800321c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800321e:	e008      	b.n	8003232 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003220:	f7ff fb4e 	bl	80028c0 <HAL_GetTick>
 8003224:	0002      	movs	r2, r0
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b64      	cmp	r3, #100	; 0x64
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e185      	b.n	800353e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003232:	4b0b      	ldr	r3, [pc, #44]	; (8003260 <HAL_RCC_OscConfig+0x338>)
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	2380      	movs	r3, #128	; 0x80
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	4013      	ands	r3, r2
 800323c:	d0f0      	beq.n	8003220 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	2b01      	cmp	r3, #1
 8003244:	d10e      	bne.n	8003264 <HAL_RCC_OscConfig+0x33c>
 8003246:	4b03      	ldr	r3, [pc, #12]	; (8003254 <HAL_RCC_OscConfig+0x32c>)
 8003248:	6a1a      	ldr	r2, [r3, #32]
 800324a:	4b02      	ldr	r3, [pc, #8]	; (8003254 <HAL_RCC_OscConfig+0x32c>)
 800324c:	2101      	movs	r1, #1
 800324e:	430a      	orrs	r2, r1
 8003250:	621a      	str	r2, [r3, #32]
 8003252:	e035      	b.n	80032c0 <HAL_RCC_OscConfig+0x398>
 8003254:	40021000 	.word	0x40021000
 8003258:	fffeffff 	.word	0xfffeffff
 800325c:	fffbffff 	.word	0xfffbffff
 8003260:	40007000 	.word	0x40007000
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d10c      	bne.n	8003286 <HAL_RCC_OscConfig+0x35e>
 800326c:	4bb6      	ldr	r3, [pc, #728]	; (8003548 <HAL_RCC_OscConfig+0x620>)
 800326e:	6a1a      	ldr	r2, [r3, #32]
 8003270:	4bb5      	ldr	r3, [pc, #724]	; (8003548 <HAL_RCC_OscConfig+0x620>)
 8003272:	2101      	movs	r1, #1
 8003274:	438a      	bics	r2, r1
 8003276:	621a      	str	r2, [r3, #32]
 8003278:	4bb3      	ldr	r3, [pc, #716]	; (8003548 <HAL_RCC_OscConfig+0x620>)
 800327a:	6a1a      	ldr	r2, [r3, #32]
 800327c:	4bb2      	ldr	r3, [pc, #712]	; (8003548 <HAL_RCC_OscConfig+0x620>)
 800327e:	2104      	movs	r1, #4
 8003280:	438a      	bics	r2, r1
 8003282:	621a      	str	r2, [r3, #32]
 8003284:	e01c      	b.n	80032c0 <HAL_RCC_OscConfig+0x398>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	2b05      	cmp	r3, #5
 800328c:	d10c      	bne.n	80032a8 <HAL_RCC_OscConfig+0x380>
 800328e:	4bae      	ldr	r3, [pc, #696]	; (8003548 <HAL_RCC_OscConfig+0x620>)
 8003290:	6a1a      	ldr	r2, [r3, #32]
 8003292:	4bad      	ldr	r3, [pc, #692]	; (8003548 <HAL_RCC_OscConfig+0x620>)
 8003294:	2104      	movs	r1, #4
 8003296:	430a      	orrs	r2, r1
 8003298:	621a      	str	r2, [r3, #32]
 800329a:	4bab      	ldr	r3, [pc, #684]	; (8003548 <HAL_RCC_OscConfig+0x620>)
 800329c:	6a1a      	ldr	r2, [r3, #32]
 800329e:	4baa      	ldr	r3, [pc, #680]	; (8003548 <HAL_RCC_OscConfig+0x620>)
 80032a0:	2101      	movs	r1, #1
 80032a2:	430a      	orrs	r2, r1
 80032a4:	621a      	str	r2, [r3, #32]
 80032a6:	e00b      	b.n	80032c0 <HAL_RCC_OscConfig+0x398>
 80032a8:	4ba7      	ldr	r3, [pc, #668]	; (8003548 <HAL_RCC_OscConfig+0x620>)
 80032aa:	6a1a      	ldr	r2, [r3, #32]
 80032ac:	4ba6      	ldr	r3, [pc, #664]	; (8003548 <HAL_RCC_OscConfig+0x620>)
 80032ae:	2101      	movs	r1, #1
 80032b0:	438a      	bics	r2, r1
 80032b2:	621a      	str	r2, [r3, #32]
 80032b4:	4ba4      	ldr	r3, [pc, #656]	; (8003548 <HAL_RCC_OscConfig+0x620>)
 80032b6:	6a1a      	ldr	r2, [r3, #32]
 80032b8:	4ba3      	ldr	r3, [pc, #652]	; (8003548 <HAL_RCC_OscConfig+0x620>)
 80032ba:	2104      	movs	r1, #4
 80032bc:	438a      	bics	r2, r1
 80032be:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d014      	beq.n	80032f2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032c8:	f7ff fafa 	bl	80028c0 <HAL_GetTick>
 80032cc:	0003      	movs	r3, r0
 80032ce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032d0:	e009      	b.n	80032e6 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032d2:	f7ff faf5 	bl	80028c0 <HAL_GetTick>
 80032d6:	0002      	movs	r2, r0
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	4a9b      	ldr	r2, [pc, #620]	; (800354c <HAL_RCC_OscConfig+0x624>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e12b      	b.n	800353e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032e6:	4b98      	ldr	r3, [pc, #608]	; (8003548 <HAL_RCC_OscConfig+0x620>)
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	2202      	movs	r2, #2
 80032ec:	4013      	ands	r3, r2
 80032ee:	d0f0      	beq.n	80032d2 <HAL_RCC_OscConfig+0x3aa>
 80032f0:	e013      	b.n	800331a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032f2:	f7ff fae5 	bl	80028c0 <HAL_GetTick>
 80032f6:	0003      	movs	r3, r0
 80032f8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032fa:	e009      	b.n	8003310 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032fc:	f7ff fae0 	bl	80028c0 <HAL_GetTick>
 8003300:	0002      	movs	r2, r0
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	4a91      	ldr	r2, [pc, #580]	; (800354c <HAL_RCC_OscConfig+0x624>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d901      	bls.n	8003310 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e116      	b.n	800353e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003310:	4b8d      	ldr	r3, [pc, #564]	; (8003548 <HAL_RCC_OscConfig+0x620>)
 8003312:	6a1b      	ldr	r3, [r3, #32]
 8003314:	2202      	movs	r2, #2
 8003316:	4013      	ands	r3, r2
 8003318:	d1f0      	bne.n	80032fc <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800331a:	231f      	movs	r3, #31
 800331c:	18fb      	adds	r3, r7, r3
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d105      	bne.n	8003330 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003324:	4b88      	ldr	r3, [pc, #544]	; (8003548 <HAL_RCC_OscConfig+0x620>)
 8003326:	69da      	ldr	r2, [r3, #28]
 8003328:	4b87      	ldr	r3, [pc, #540]	; (8003548 <HAL_RCC_OscConfig+0x620>)
 800332a:	4989      	ldr	r1, [pc, #548]	; (8003550 <HAL_RCC_OscConfig+0x628>)
 800332c:	400a      	ands	r2, r1
 800332e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2210      	movs	r2, #16
 8003336:	4013      	ands	r3, r2
 8003338:	d063      	beq.n	8003402 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d12a      	bne.n	8003398 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003342:	4b81      	ldr	r3, [pc, #516]	; (8003548 <HAL_RCC_OscConfig+0x620>)
 8003344:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003346:	4b80      	ldr	r3, [pc, #512]	; (8003548 <HAL_RCC_OscConfig+0x620>)
 8003348:	2104      	movs	r1, #4
 800334a:	430a      	orrs	r2, r1
 800334c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800334e:	4b7e      	ldr	r3, [pc, #504]	; (8003548 <HAL_RCC_OscConfig+0x620>)
 8003350:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003352:	4b7d      	ldr	r3, [pc, #500]	; (8003548 <HAL_RCC_OscConfig+0x620>)
 8003354:	2101      	movs	r1, #1
 8003356:	430a      	orrs	r2, r1
 8003358:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800335a:	f7ff fab1 	bl	80028c0 <HAL_GetTick>
 800335e:	0003      	movs	r3, r0
 8003360:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003362:	e008      	b.n	8003376 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003364:	f7ff faac 	bl	80028c0 <HAL_GetTick>
 8003368:	0002      	movs	r2, r0
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	2b02      	cmp	r3, #2
 8003370:	d901      	bls.n	8003376 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e0e3      	b.n	800353e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003376:	4b74      	ldr	r3, [pc, #464]	; (8003548 <HAL_RCC_OscConfig+0x620>)
 8003378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800337a:	2202      	movs	r2, #2
 800337c:	4013      	ands	r3, r2
 800337e:	d0f1      	beq.n	8003364 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003380:	4b71      	ldr	r3, [pc, #452]	; (8003548 <HAL_RCC_OscConfig+0x620>)
 8003382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003384:	22f8      	movs	r2, #248	; 0xf8
 8003386:	4393      	bics	r3, r2
 8003388:	0019      	movs	r1, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	699b      	ldr	r3, [r3, #24]
 800338e:	00da      	lsls	r2, r3, #3
 8003390:	4b6d      	ldr	r3, [pc, #436]	; (8003548 <HAL_RCC_OscConfig+0x620>)
 8003392:	430a      	orrs	r2, r1
 8003394:	635a      	str	r2, [r3, #52]	; 0x34
 8003396:	e034      	b.n	8003402 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	695b      	ldr	r3, [r3, #20]
 800339c:	3305      	adds	r3, #5
 800339e:	d111      	bne.n	80033c4 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80033a0:	4b69      	ldr	r3, [pc, #420]	; (8003548 <HAL_RCC_OscConfig+0x620>)
 80033a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033a4:	4b68      	ldr	r3, [pc, #416]	; (8003548 <HAL_RCC_OscConfig+0x620>)
 80033a6:	2104      	movs	r1, #4
 80033a8:	438a      	bics	r2, r1
 80033aa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80033ac:	4b66      	ldr	r3, [pc, #408]	; (8003548 <HAL_RCC_OscConfig+0x620>)
 80033ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033b0:	22f8      	movs	r2, #248	; 0xf8
 80033b2:	4393      	bics	r3, r2
 80033b4:	0019      	movs	r1, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	00da      	lsls	r2, r3, #3
 80033bc:	4b62      	ldr	r3, [pc, #392]	; (8003548 <HAL_RCC_OscConfig+0x620>)
 80033be:	430a      	orrs	r2, r1
 80033c0:	635a      	str	r2, [r3, #52]	; 0x34
 80033c2:	e01e      	b.n	8003402 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80033c4:	4b60      	ldr	r3, [pc, #384]	; (8003548 <HAL_RCC_OscConfig+0x620>)
 80033c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033c8:	4b5f      	ldr	r3, [pc, #380]	; (8003548 <HAL_RCC_OscConfig+0x620>)
 80033ca:	2104      	movs	r1, #4
 80033cc:	430a      	orrs	r2, r1
 80033ce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80033d0:	4b5d      	ldr	r3, [pc, #372]	; (8003548 <HAL_RCC_OscConfig+0x620>)
 80033d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033d4:	4b5c      	ldr	r3, [pc, #368]	; (8003548 <HAL_RCC_OscConfig+0x620>)
 80033d6:	2101      	movs	r1, #1
 80033d8:	438a      	bics	r2, r1
 80033da:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033dc:	f7ff fa70 	bl	80028c0 <HAL_GetTick>
 80033e0:	0003      	movs	r3, r0
 80033e2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80033e4:	e008      	b.n	80033f8 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80033e6:	f7ff fa6b 	bl	80028c0 <HAL_GetTick>
 80033ea:	0002      	movs	r2, r0
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d901      	bls.n	80033f8 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e0a2      	b.n	800353e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80033f8:	4b53      	ldr	r3, [pc, #332]	; (8003548 <HAL_RCC_OscConfig+0x620>)
 80033fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033fc:	2202      	movs	r2, #2
 80033fe:	4013      	ands	r3, r2
 8003400:	d1f1      	bne.n	80033e6 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a1b      	ldr	r3, [r3, #32]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d100      	bne.n	800340c <HAL_RCC_OscConfig+0x4e4>
 800340a:	e097      	b.n	800353c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800340c:	4b4e      	ldr	r3, [pc, #312]	; (8003548 <HAL_RCC_OscConfig+0x620>)
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	220c      	movs	r2, #12
 8003412:	4013      	ands	r3, r2
 8003414:	2b08      	cmp	r3, #8
 8003416:	d100      	bne.n	800341a <HAL_RCC_OscConfig+0x4f2>
 8003418:	e06b      	b.n	80034f2 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a1b      	ldr	r3, [r3, #32]
 800341e:	2b02      	cmp	r3, #2
 8003420:	d14c      	bne.n	80034bc <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003422:	4b49      	ldr	r3, [pc, #292]	; (8003548 <HAL_RCC_OscConfig+0x620>)
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	4b48      	ldr	r3, [pc, #288]	; (8003548 <HAL_RCC_OscConfig+0x620>)
 8003428:	494a      	ldr	r1, [pc, #296]	; (8003554 <HAL_RCC_OscConfig+0x62c>)
 800342a:	400a      	ands	r2, r1
 800342c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800342e:	f7ff fa47 	bl	80028c0 <HAL_GetTick>
 8003432:	0003      	movs	r3, r0
 8003434:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003436:	e008      	b.n	800344a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003438:	f7ff fa42 	bl	80028c0 <HAL_GetTick>
 800343c:	0002      	movs	r2, r0
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b02      	cmp	r3, #2
 8003444:	d901      	bls.n	800344a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e079      	b.n	800353e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800344a:	4b3f      	ldr	r3, [pc, #252]	; (8003548 <HAL_RCC_OscConfig+0x620>)
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	2380      	movs	r3, #128	; 0x80
 8003450:	049b      	lsls	r3, r3, #18
 8003452:	4013      	ands	r3, r2
 8003454:	d1f0      	bne.n	8003438 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003456:	4b3c      	ldr	r3, [pc, #240]	; (8003548 <HAL_RCC_OscConfig+0x620>)
 8003458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345a:	220f      	movs	r2, #15
 800345c:	4393      	bics	r3, r2
 800345e:	0019      	movs	r1, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003464:	4b38      	ldr	r3, [pc, #224]	; (8003548 <HAL_RCC_OscConfig+0x620>)
 8003466:	430a      	orrs	r2, r1
 8003468:	62da      	str	r2, [r3, #44]	; 0x2c
 800346a:	4b37      	ldr	r3, [pc, #220]	; (8003548 <HAL_RCC_OscConfig+0x620>)
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	4a3a      	ldr	r2, [pc, #232]	; (8003558 <HAL_RCC_OscConfig+0x630>)
 8003470:	4013      	ands	r3, r2
 8003472:	0019      	movs	r1, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347c:	431a      	orrs	r2, r3
 800347e:	4b32      	ldr	r3, [pc, #200]	; (8003548 <HAL_RCC_OscConfig+0x620>)
 8003480:	430a      	orrs	r2, r1
 8003482:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003484:	4b30      	ldr	r3, [pc, #192]	; (8003548 <HAL_RCC_OscConfig+0x620>)
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	4b2f      	ldr	r3, [pc, #188]	; (8003548 <HAL_RCC_OscConfig+0x620>)
 800348a:	2180      	movs	r1, #128	; 0x80
 800348c:	0449      	lsls	r1, r1, #17
 800348e:	430a      	orrs	r2, r1
 8003490:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003492:	f7ff fa15 	bl	80028c0 <HAL_GetTick>
 8003496:	0003      	movs	r3, r0
 8003498:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800349a:	e008      	b.n	80034ae <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800349c:	f7ff fa10 	bl	80028c0 <HAL_GetTick>
 80034a0:	0002      	movs	r2, r0
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e047      	b.n	800353e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034ae:	4b26      	ldr	r3, [pc, #152]	; (8003548 <HAL_RCC_OscConfig+0x620>)
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	2380      	movs	r3, #128	; 0x80
 80034b4:	049b      	lsls	r3, r3, #18
 80034b6:	4013      	ands	r3, r2
 80034b8:	d0f0      	beq.n	800349c <HAL_RCC_OscConfig+0x574>
 80034ba:	e03f      	b.n	800353c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034bc:	4b22      	ldr	r3, [pc, #136]	; (8003548 <HAL_RCC_OscConfig+0x620>)
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	4b21      	ldr	r3, [pc, #132]	; (8003548 <HAL_RCC_OscConfig+0x620>)
 80034c2:	4924      	ldr	r1, [pc, #144]	; (8003554 <HAL_RCC_OscConfig+0x62c>)
 80034c4:	400a      	ands	r2, r1
 80034c6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c8:	f7ff f9fa 	bl	80028c0 <HAL_GetTick>
 80034cc:	0003      	movs	r3, r0
 80034ce:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034d0:	e008      	b.n	80034e4 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034d2:	f7ff f9f5 	bl	80028c0 <HAL_GetTick>
 80034d6:	0002      	movs	r2, r0
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d901      	bls.n	80034e4 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e02c      	b.n	800353e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034e4:	4b18      	ldr	r3, [pc, #96]	; (8003548 <HAL_RCC_OscConfig+0x620>)
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	2380      	movs	r3, #128	; 0x80
 80034ea:	049b      	lsls	r3, r3, #18
 80034ec:	4013      	ands	r3, r2
 80034ee:	d1f0      	bne.n	80034d2 <HAL_RCC_OscConfig+0x5aa>
 80034f0:	e024      	b.n	800353c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d101      	bne.n	80034fe <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e01f      	b.n	800353e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80034fe:	4b12      	ldr	r3, [pc, #72]	; (8003548 <HAL_RCC_OscConfig+0x620>)
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003504:	4b10      	ldr	r3, [pc, #64]	; (8003548 <HAL_RCC_OscConfig+0x620>)
 8003506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003508:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	2380      	movs	r3, #128	; 0x80
 800350e:	025b      	lsls	r3, r3, #9
 8003510:	401a      	ands	r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003516:	429a      	cmp	r2, r3
 8003518:	d10e      	bne.n	8003538 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	220f      	movs	r2, #15
 800351e:	401a      	ands	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003524:	429a      	cmp	r2, r3
 8003526:	d107      	bne.n	8003538 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003528:	697a      	ldr	r2, [r7, #20]
 800352a:	23f0      	movs	r3, #240	; 0xf0
 800352c:	039b      	lsls	r3, r3, #14
 800352e:	401a      	ands	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003534:	429a      	cmp	r2, r3
 8003536:	d001      	beq.n	800353c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e000      	b.n	800353e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	0018      	movs	r0, r3
 8003540:	46bd      	mov	sp, r7
 8003542:	b008      	add	sp, #32
 8003544:	bd80      	pop	{r7, pc}
 8003546:	46c0      	nop			; (mov r8, r8)
 8003548:	40021000 	.word	0x40021000
 800354c:	00001388 	.word	0x00001388
 8003550:	efffffff 	.word	0xefffffff
 8003554:	feffffff 	.word	0xfeffffff
 8003558:	ffc2ffff 	.word	0xffc2ffff

0800355c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d101      	bne.n	8003570 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e0b3      	b.n	80036d8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003570:	4b5b      	ldr	r3, [pc, #364]	; (80036e0 <HAL_RCC_ClockConfig+0x184>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2201      	movs	r2, #1
 8003576:	4013      	ands	r3, r2
 8003578:	683a      	ldr	r2, [r7, #0]
 800357a:	429a      	cmp	r2, r3
 800357c:	d911      	bls.n	80035a2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800357e:	4b58      	ldr	r3, [pc, #352]	; (80036e0 <HAL_RCC_ClockConfig+0x184>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2201      	movs	r2, #1
 8003584:	4393      	bics	r3, r2
 8003586:	0019      	movs	r1, r3
 8003588:	4b55      	ldr	r3, [pc, #340]	; (80036e0 <HAL_RCC_ClockConfig+0x184>)
 800358a:	683a      	ldr	r2, [r7, #0]
 800358c:	430a      	orrs	r2, r1
 800358e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003590:	4b53      	ldr	r3, [pc, #332]	; (80036e0 <HAL_RCC_ClockConfig+0x184>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2201      	movs	r2, #1
 8003596:	4013      	ands	r3, r2
 8003598:	683a      	ldr	r2, [r7, #0]
 800359a:	429a      	cmp	r2, r3
 800359c:	d001      	beq.n	80035a2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e09a      	b.n	80036d8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2202      	movs	r2, #2
 80035a8:	4013      	ands	r3, r2
 80035aa:	d015      	beq.n	80035d8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2204      	movs	r2, #4
 80035b2:	4013      	ands	r3, r2
 80035b4:	d006      	beq.n	80035c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80035b6:	4b4b      	ldr	r3, [pc, #300]	; (80036e4 <HAL_RCC_ClockConfig+0x188>)
 80035b8:	685a      	ldr	r2, [r3, #4]
 80035ba:	4b4a      	ldr	r3, [pc, #296]	; (80036e4 <HAL_RCC_ClockConfig+0x188>)
 80035bc:	21e0      	movs	r1, #224	; 0xe0
 80035be:	00c9      	lsls	r1, r1, #3
 80035c0:	430a      	orrs	r2, r1
 80035c2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035c4:	4b47      	ldr	r3, [pc, #284]	; (80036e4 <HAL_RCC_ClockConfig+0x188>)
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	22f0      	movs	r2, #240	; 0xf0
 80035ca:	4393      	bics	r3, r2
 80035cc:	0019      	movs	r1, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	689a      	ldr	r2, [r3, #8]
 80035d2:	4b44      	ldr	r3, [pc, #272]	; (80036e4 <HAL_RCC_ClockConfig+0x188>)
 80035d4:	430a      	orrs	r2, r1
 80035d6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2201      	movs	r2, #1
 80035de:	4013      	ands	r3, r2
 80035e0:	d040      	beq.n	8003664 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d107      	bne.n	80035fa <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ea:	4b3e      	ldr	r3, [pc, #248]	; (80036e4 <HAL_RCC_ClockConfig+0x188>)
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	2380      	movs	r3, #128	; 0x80
 80035f0:	029b      	lsls	r3, r3, #10
 80035f2:	4013      	ands	r3, r2
 80035f4:	d114      	bne.n	8003620 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e06e      	b.n	80036d8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d107      	bne.n	8003612 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003602:	4b38      	ldr	r3, [pc, #224]	; (80036e4 <HAL_RCC_ClockConfig+0x188>)
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	2380      	movs	r3, #128	; 0x80
 8003608:	049b      	lsls	r3, r3, #18
 800360a:	4013      	ands	r3, r2
 800360c:	d108      	bne.n	8003620 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e062      	b.n	80036d8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003612:	4b34      	ldr	r3, [pc, #208]	; (80036e4 <HAL_RCC_ClockConfig+0x188>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2202      	movs	r2, #2
 8003618:	4013      	ands	r3, r2
 800361a:	d101      	bne.n	8003620 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e05b      	b.n	80036d8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003620:	4b30      	ldr	r3, [pc, #192]	; (80036e4 <HAL_RCC_ClockConfig+0x188>)
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	2203      	movs	r2, #3
 8003626:	4393      	bics	r3, r2
 8003628:	0019      	movs	r1, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685a      	ldr	r2, [r3, #4]
 800362e:	4b2d      	ldr	r3, [pc, #180]	; (80036e4 <HAL_RCC_ClockConfig+0x188>)
 8003630:	430a      	orrs	r2, r1
 8003632:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003634:	f7ff f944 	bl	80028c0 <HAL_GetTick>
 8003638:	0003      	movs	r3, r0
 800363a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800363c:	e009      	b.n	8003652 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800363e:	f7ff f93f 	bl	80028c0 <HAL_GetTick>
 8003642:	0002      	movs	r2, r0
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	4a27      	ldr	r2, [pc, #156]	; (80036e8 <HAL_RCC_ClockConfig+0x18c>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d901      	bls.n	8003652 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e042      	b.n	80036d8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003652:	4b24      	ldr	r3, [pc, #144]	; (80036e4 <HAL_RCC_ClockConfig+0x188>)
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	220c      	movs	r2, #12
 8003658:	401a      	ands	r2, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	429a      	cmp	r2, r3
 8003662:	d1ec      	bne.n	800363e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003664:	4b1e      	ldr	r3, [pc, #120]	; (80036e0 <HAL_RCC_ClockConfig+0x184>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2201      	movs	r2, #1
 800366a:	4013      	ands	r3, r2
 800366c:	683a      	ldr	r2, [r7, #0]
 800366e:	429a      	cmp	r2, r3
 8003670:	d211      	bcs.n	8003696 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003672:	4b1b      	ldr	r3, [pc, #108]	; (80036e0 <HAL_RCC_ClockConfig+0x184>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2201      	movs	r2, #1
 8003678:	4393      	bics	r3, r2
 800367a:	0019      	movs	r1, r3
 800367c:	4b18      	ldr	r3, [pc, #96]	; (80036e0 <HAL_RCC_ClockConfig+0x184>)
 800367e:	683a      	ldr	r2, [r7, #0]
 8003680:	430a      	orrs	r2, r1
 8003682:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003684:	4b16      	ldr	r3, [pc, #88]	; (80036e0 <HAL_RCC_ClockConfig+0x184>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2201      	movs	r2, #1
 800368a:	4013      	ands	r3, r2
 800368c:	683a      	ldr	r2, [r7, #0]
 800368e:	429a      	cmp	r2, r3
 8003690:	d001      	beq.n	8003696 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e020      	b.n	80036d8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2204      	movs	r2, #4
 800369c:	4013      	ands	r3, r2
 800369e:	d009      	beq.n	80036b4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80036a0:	4b10      	ldr	r3, [pc, #64]	; (80036e4 <HAL_RCC_ClockConfig+0x188>)
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	4a11      	ldr	r2, [pc, #68]	; (80036ec <HAL_RCC_ClockConfig+0x190>)
 80036a6:	4013      	ands	r3, r2
 80036a8:	0019      	movs	r1, r3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	68da      	ldr	r2, [r3, #12]
 80036ae:	4b0d      	ldr	r3, [pc, #52]	; (80036e4 <HAL_RCC_ClockConfig+0x188>)
 80036b0:	430a      	orrs	r2, r1
 80036b2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80036b4:	f000 f820 	bl	80036f8 <HAL_RCC_GetSysClockFreq>
 80036b8:	0001      	movs	r1, r0
 80036ba:	4b0a      	ldr	r3, [pc, #40]	; (80036e4 <HAL_RCC_ClockConfig+0x188>)
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	091b      	lsrs	r3, r3, #4
 80036c0:	220f      	movs	r2, #15
 80036c2:	4013      	ands	r3, r2
 80036c4:	4a0a      	ldr	r2, [pc, #40]	; (80036f0 <HAL_RCC_ClockConfig+0x194>)
 80036c6:	5cd3      	ldrb	r3, [r2, r3]
 80036c8:	000a      	movs	r2, r1
 80036ca:	40da      	lsrs	r2, r3
 80036cc:	4b09      	ldr	r3, [pc, #36]	; (80036f4 <HAL_RCC_ClockConfig+0x198>)
 80036ce:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80036d0:	2000      	movs	r0, #0
 80036d2:	f7ff f8af 	bl	8002834 <HAL_InitTick>
  
  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	0018      	movs	r0, r3
 80036da:	46bd      	mov	sp, r7
 80036dc:	b004      	add	sp, #16
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	40022000 	.word	0x40022000
 80036e4:	40021000 	.word	0x40021000
 80036e8:	00001388 	.word	0x00001388
 80036ec:	fffff8ff 	.word	0xfffff8ff
 80036f0:	08005190 	.word	0x08005190
 80036f4:	20000000 	.word	0x20000000

080036f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036f8:	b590      	push	{r4, r7, lr}
 80036fa:	b08f      	sub	sp, #60	; 0x3c
 80036fc:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80036fe:	2314      	movs	r3, #20
 8003700:	18fb      	adds	r3, r7, r3
 8003702:	4a2b      	ldr	r2, [pc, #172]	; (80037b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003704:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003706:	c313      	stmia	r3!, {r0, r1, r4}
 8003708:	6812      	ldr	r2, [r2, #0]
 800370a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800370c:	1d3b      	adds	r3, r7, #4
 800370e:	4a29      	ldr	r2, [pc, #164]	; (80037b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003710:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003712:	c313      	stmia	r3!, {r0, r1, r4}
 8003714:	6812      	ldr	r2, [r2, #0]
 8003716:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003718:	2300      	movs	r3, #0
 800371a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800371c:	2300      	movs	r3, #0
 800371e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003720:	2300      	movs	r3, #0
 8003722:	637b      	str	r3, [r7, #52]	; 0x34
 8003724:	2300      	movs	r3, #0
 8003726:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003728:	2300      	movs	r3, #0
 800372a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800372c:	4b22      	ldr	r3, [pc, #136]	; (80037b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003734:	220c      	movs	r2, #12
 8003736:	4013      	ands	r3, r2
 8003738:	2b04      	cmp	r3, #4
 800373a:	d002      	beq.n	8003742 <HAL_RCC_GetSysClockFreq+0x4a>
 800373c:	2b08      	cmp	r3, #8
 800373e:	d003      	beq.n	8003748 <HAL_RCC_GetSysClockFreq+0x50>
 8003740:	e02d      	b.n	800379e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003742:	4b1e      	ldr	r3, [pc, #120]	; (80037bc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003744:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003746:	e02d      	b.n	80037a4 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800374a:	0c9b      	lsrs	r3, r3, #18
 800374c:	220f      	movs	r2, #15
 800374e:	4013      	ands	r3, r2
 8003750:	2214      	movs	r2, #20
 8003752:	18ba      	adds	r2, r7, r2
 8003754:	5cd3      	ldrb	r3, [r2, r3]
 8003756:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003758:	4b17      	ldr	r3, [pc, #92]	; (80037b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800375a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375c:	220f      	movs	r2, #15
 800375e:	4013      	ands	r3, r2
 8003760:	1d3a      	adds	r2, r7, #4
 8003762:	5cd3      	ldrb	r3, [r2, r3]
 8003764:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003766:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003768:	2380      	movs	r3, #128	; 0x80
 800376a:	025b      	lsls	r3, r3, #9
 800376c:	4013      	ands	r3, r2
 800376e:	d009      	beq.n	8003784 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003770:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003772:	4812      	ldr	r0, [pc, #72]	; (80037bc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003774:	f7fc fcda 	bl	800012c <__udivsi3>
 8003778:	0003      	movs	r3, r0
 800377a:	001a      	movs	r2, r3
 800377c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377e:	4353      	muls	r3, r2
 8003780:	637b      	str	r3, [r7, #52]	; 0x34
 8003782:	e009      	b.n	8003798 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003784:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003786:	000a      	movs	r2, r1
 8003788:	0152      	lsls	r2, r2, #5
 800378a:	1a52      	subs	r2, r2, r1
 800378c:	0193      	lsls	r3, r2, #6
 800378e:	1a9b      	subs	r3, r3, r2
 8003790:	00db      	lsls	r3, r3, #3
 8003792:	185b      	adds	r3, r3, r1
 8003794:	021b      	lsls	r3, r3, #8
 8003796:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8003798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800379a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800379c:	e002      	b.n	80037a4 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800379e:	4b07      	ldr	r3, [pc, #28]	; (80037bc <HAL_RCC_GetSysClockFreq+0xc4>)
 80037a0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80037a2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80037a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80037a6:	0018      	movs	r0, r3
 80037a8:	46bd      	mov	sp, r7
 80037aa:	b00f      	add	sp, #60	; 0x3c
 80037ac:	bd90      	pop	{r4, r7, pc}
 80037ae:	46c0      	nop			; (mov r8, r8)
 80037b0:	080050b0 	.word	0x080050b0
 80037b4:	080050c0 	.word	0x080050c0
 80037b8:	40021000 	.word	0x40021000
 80037bc:	007a1200 	.word	0x007a1200

080037c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037c4:	4b02      	ldr	r3, [pc, #8]	; (80037d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80037c6:	681b      	ldr	r3, [r3, #0]
}
 80037c8:	0018      	movs	r0, r3
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	46c0      	nop			; (mov r8, r8)
 80037d0:	20000000 	.word	0x20000000

080037d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80037d8:	f7ff fff2 	bl	80037c0 <HAL_RCC_GetHCLKFreq>
 80037dc:	0001      	movs	r1, r0
 80037de:	4b06      	ldr	r3, [pc, #24]	; (80037f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	0a1b      	lsrs	r3, r3, #8
 80037e4:	2207      	movs	r2, #7
 80037e6:	4013      	ands	r3, r2
 80037e8:	4a04      	ldr	r2, [pc, #16]	; (80037fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80037ea:	5cd3      	ldrb	r3, [r2, r3]
 80037ec:	40d9      	lsrs	r1, r3
 80037ee:	000b      	movs	r3, r1
}    
 80037f0:	0018      	movs	r0, r3
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	46c0      	nop			; (mov r8, r8)
 80037f8:	40021000 	.word	0x40021000
 80037fc:	080051a0 	.word	0x080051a0

08003800 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e044      	b.n	800389c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003816:	2b00      	cmp	r3, #0
 8003818:	d107      	bne.n	800382a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2274      	movs	r2, #116	; 0x74
 800381e:	2100      	movs	r1, #0
 8003820:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	0018      	movs	r0, r3
 8003826:	f7fe ff13 	bl	8002650 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2224      	movs	r2, #36	; 0x24
 800382e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2101      	movs	r1, #1
 800383c:	438a      	bics	r2, r1
 800383e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	0018      	movs	r0, r3
 8003844:	f000 fbce 	bl	8003fe4 <UART_SetConfig>
 8003848:	0003      	movs	r3, r0
 800384a:	2b01      	cmp	r3, #1
 800384c:	d101      	bne.n	8003852 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e024      	b.n	800389c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003856:	2b00      	cmp	r3, #0
 8003858:	d003      	beq.n	8003862 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	0018      	movs	r0, r3
 800385e:	f000 fd01 	bl	8004264 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	685a      	ldr	r2, [r3, #4]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	490d      	ldr	r1, [pc, #52]	; (80038a4 <HAL_UART_Init+0xa4>)
 800386e:	400a      	ands	r2, r1
 8003870:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	689a      	ldr	r2, [r3, #8]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	212a      	movs	r1, #42	; 0x2a
 800387e:	438a      	bics	r2, r1
 8003880:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2101      	movs	r1, #1
 800388e:	430a      	orrs	r2, r1
 8003890:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	0018      	movs	r0, r3
 8003896:	f000 fd99 	bl	80043cc <UART_CheckIdleState>
 800389a:	0003      	movs	r3, r0
}
 800389c:	0018      	movs	r0, r3
 800389e:	46bd      	mov	sp, r7
 80038a0:	b002      	add	sp, #8
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	ffffb7ff 	.word	0xffffb7ff

080038a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b08a      	sub	sp, #40	; 0x28
 80038ac:	af02      	add	r7, sp, #8
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	603b      	str	r3, [r7, #0]
 80038b4:	1dbb      	adds	r3, r7, #6
 80038b6:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038bc:	2b20      	cmp	r3, #32
 80038be:	d000      	beq.n	80038c2 <HAL_UART_Transmit+0x1a>
 80038c0:	e096      	b.n	80039f0 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d003      	beq.n	80038d0 <HAL_UART_Transmit+0x28>
 80038c8:	1dbb      	adds	r3, r7, #6
 80038ca:	881b      	ldrh	r3, [r3, #0]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d101      	bne.n	80038d4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e08e      	b.n	80039f2 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	689a      	ldr	r2, [r3, #8]
 80038d8:	2380      	movs	r3, #128	; 0x80
 80038da:	015b      	lsls	r3, r3, #5
 80038dc:	429a      	cmp	r2, r3
 80038de:	d109      	bne.n	80038f4 <HAL_UART_Transmit+0x4c>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d105      	bne.n	80038f4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	2201      	movs	r2, #1
 80038ec:	4013      	ands	r3, r2
 80038ee:	d001      	beq.n	80038f4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e07e      	b.n	80039f2 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2274      	movs	r2, #116	; 0x74
 80038f8:	5c9b      	ldrb	r3, [r3, r2]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d101      	bne.n	8003902 <HAL_UART_Transmit+0x5a>
 80038fe:	2302      	movs	r3, #2
 8003900:	e077      	b.n	80039f2 <HAL_UART_Transmit+0x14a>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2274      	movs	r2, #116	; 0x74
 8003906:	2101      	movs	r1, #1
 8003908:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2280      	movs	r2, #128	; 0x80
 800390e:	2100      	movs	r1, #0
 8003910:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2221      	movs	r2, #33	; 0x21
 8003916:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003918:	f7fe ffd2 	bl	80028c0 <HAL_GetTick>
 800391c:	0003      	movs	r3, r0
 800391e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	1dba      	adds	r2, r7, #6
 8003924:	2150      	movs	r1, #80	; 0x50
 8003926:	8812      	ldrh	r2, [r2, #0]
 8003928:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	1dba      	adds	r2, r7, #6
 800392e:	2152      	movs	r1, #82	; 0x52
 8003930:	8812      	ldrh	r2, [r2, #0]
 8003932:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	689a      	ldr	r2, [r3, #8]
 8003938:	2380      	movs	r3, #128	; 0x80
 800393a:	015b      	lsls	r3, r3, #5
 800393c:	429a      	cmp	r2, r3
 800393e:	d108      	bne.n	8003952 <HAL_UART_Transmit+0xaa>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d104      	bne.n	8003952 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8003948:	2300      	movs	r3, #0
 800394a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	61bb      	str	r3, [r7, #24]
 8003950:	e003      	b.n	800395a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003956:	2300      	movs	r3, #0
 8003958:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2274      	movs	r2, #116	; 0x74
 800395e:	2100      	movs	r1, #0
 8003960:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8003962:	e02d      	b.n	80039c0 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003964:	697a      	ldr	r2, [r7, #20]
 8003966:	68f8      	ldr	r0, [r7, #12]
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	9300      	str	r3, [sp, #0]
 800396c:	0013      	movs	r3, r2
 800396e:	2200      	movs	r2, #0
 8003970:	2180      	movs	r1, #128	; 0x80
 8003972:	f000 fd73 	bl	800445c <UART_WaitOnFlagUntilTimeout>
 8003976:	1e03      	subs	r3, r0, #0
 8003978:	d001      	beq.n	800397e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e039      	b.n	80039f2 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d10b      	bne.n	800399c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	881a      	ldrh	r2, [r3, #0]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	05d2      	lsls	r2, r2, #23
 800398e:	0dd2      	lsrs	r2, r2, #23
 8003990:	b292      	uxth	r2, r2
 8003992:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	3302      	adds	r3, #2
 8003998:	61bb      	str	r3, [r7, #24]
 800399a:	e008      	b.n	80039ae <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	781a      	ldrb	r2, [r3, #0]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	b292      	uxth	r2, r2
 80039a6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	3301      	adds	r3, #1
 80039ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2252      	movs	r2, #82	; 0x52
 80039b2:	5a9b      	ldrh	r3, [r3, r2]
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	3b01      	subs	r3, #1
 80039b8:	b299      	uxth	r1, r3
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2252      	movs	r2, #82	; 0x52
 80039be:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2252      	movs	r2, #82	; 0x52
 80039c4:	5a9b      	ldrh	r3, [r3, r2]
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d1cb      	bne.n	8003964 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039cc:	697a      	ldr	r2, [r7, #20]
 80039ce:	68f8      	ldr	r0, [r7, #12]
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	9300      	str	r3, [sp, #0]
 80039d4:	0013      	movs	r3, r2
 80039d6:	2200      	movs	r2, #0
 80039d8:	2140      	movs	r1, #64	; 0x40
 80039da:	f000 fd3f 	bl	800445c <UART_WaitOnFlagUntilTimeout>
 80039de:	1e03      	subs	r3, r0, #0
 80039e0:	d001      	beq.n	80039e6 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e005      	b.n	80039f2 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2220      	movs	r2, #32
 80039ea:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80039ec:	2300      	movs	r3, #0
 80039ee:	e000      	b.n	80039f2 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80039f0:	2302      	movs	r3, #2
  }
}
 80039f2:	0018      	movs	r0, r3
 80039f4:	46bd      	mov	sp, r7
 80039f6:	b008      	add	sp, #32
 80039f8:	bd80      	pop	{r7, pc}
	...

080039fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80039fc:	b590      	push	{r4, r7, lr}
 80039fe:	b0ab      	sub	sp, #172	; 0xac
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	69db      	ldr	r3, [r3, #28]
 8003a0a:	22a4      	movs	r2, #164	; 0xa4
 8003a0c:	18b9      	adds	r1, r7, r2
 8003a0e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	20a0      	movs	r0, #160	; 0xa0
 8003a18:	1839      	adds	r1, r7, r0
 8003a1a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	219c      	movs	r1, #156	; 0x9c
 8003a24:	1879      	adds	r1, r7, r1
 8003a26:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003a28:	0011      	movs	r1, r2
 8003a2a:	18bb      	adds	r3, r7, r2
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a99      	ldr	r2, [pc, #612]	; (8003c94 <HAL_UART_IRQHandler+0x298>)
 8003a30:	4013      	ands	r3, r2
 8003a32:	2298      	movs	r2, #152	; 0x98
 8003a34:	18bc      	adds	r4, r7, r2
 8003a36:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003a38:	18bb      	adds	r3, r7, r2
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d114      	bne.n	8003a6a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003a40:	187b      	adds	r3, r7, r1
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2220      	movs	r2, #32
 8003a46:	4013      	ands	r3, r2
 8003a48:	d00f      	beq.n	8003a6a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003a4a:	183b      	adds	r3, r7, r0
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2220      	movs	r2, #32
 8003a50:	4013      	ands	r3, r2
 8003a52:	d00a      	beq.n	8003a6a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d100      	bne.n	8003a5e <HAL_UART_IRQHandler+0x62>
 8003a5c:	e296      	b.n	8003f8c <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	0010      	movs	r0, r2
 8003a66:	4798      	blx	r3
      }
      return;
 8003a68:	e290      	b.n	8003f8c <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003a6a:	2398      	movs	r3, #152	; 0x98
 8003a6c:	18fb      	adds	r3, r7, r3
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d100      	bne.n	8003a76 <HAL_UART_IRQHandler+0x7a>
 8003a74:	e114      	b.n	8003ca0 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003a76:	239c      	movs	r3, #156	; 0x9c
 8003a78:	18fb      	adds	r3, r7, r3
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	4013      	ands	r3, r2
 8003a80:	d106      	bne.n	8003a90 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003a82:	23a0      	movs	r3, #160	; 0xa0
 8003a84:	18fb      	adds	r3, r7, r3
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a83      	ldr	r2, [pc, #524]	; (8003c98 <HAL_UART_IRQHandler+0x29c>)
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	d100      	bne.n	8003a90 <HAL_UART_IRQHandler+0x94>
 8003a8e:	e107      	b.n	8003ca0 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003a90:	23a4      	movs	r3, #164	; 0xa4
 8003a92:	18fb      	adds	r3, r7, r3
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2201      	movs	r2, #1
 8003a98:	4013      	ands	r3, r2
 8003a9a:	d012      	beq.n	8003ac2 <HAL_UART_IRQHandler+0xc6>
 8003a9c:	23a0      	movs	r3, #160	; 0xa0
 8003a9e:	18fb      	adds	r3, r7, r3
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	2380      	movs	r3, #128	; 0x80
 8003aa4:	005b      	lsls	r3, r3, #1
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	d00b      	beq.n	8003ac2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2280      	movs	r2, #128	; 0x80
 8003ab6:	589b      	ldr	r3, [r3, r2]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	431a      	orrs	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2180      	movs	r1, #128	; 0x80
 8003ac0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ac2:	23a4      	movs	r3, #164	; 0xa4
 8003ac4:	18fb      	adds	r3, r7, r3
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2202      	movs	r2, #2
 8003aca:	4013      	ands	r3, r2
 8003acc:	d011      	beq.n	8003af2 <HAL_UART_IRQHandler+0xf6>
 8003ace:	239c      	movs	r3, #156	; 0x9c
 8003ad0:	18fb      	adds	r3, r7, r3
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	d00b      	beq.n	8003af2 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2202      	movs	r2, #2
 8003ae0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2280      	movs	r2, #128	; 0x80
 8003ae6:	589b      	ldr	r3, [r3, r2]
 8003ae8:	2204      	movs	r2, #4
 8003aea:	431a      	orrs	r2, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2180      	movs	r1, #128	; 0x80
 8003af0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003af2:	23a4      	movs	r3, #164	; 0xa4
 8003af4:	18fb      	adds	r3, r7, r3
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2204      	movs	r2, #4
 8003afa:	4013      	ands	r3, r2
 8003afc:	d011      	beq.n	8003b22 <HAL_UART_IRQHandler+0x126>
 8003afe:	239c      	movs	r3, #156	; 0x9c
 8003b00:	18fb      	adds	r3, r7, r3
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2201      	movs	r2, #1
 8003b06:	4013      	ands	r3, r2
 8003b08:	d00b      	beq.n	8003b22 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2204      	movs	r2, #4
 8003b10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2280      	movs	r2, #128	; 0x80
 8003b16:	589b      	ldr	r3, [r3, r2]
 8003b18:	2202      	movs	r2, #2
 8003b1a:	431a      	orrs	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2180      	movs	r1, #128	; 0x80
 8003b20:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003b22:	23a4      	movs	r3, #164	; 0xa4
 8003b24:	18fb      	adds	r3, r7, r3
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2208      	movs	r2, #8
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	d017      	beq.n	8003b5e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003b2e:	23a0      	movs	r3, #160	; 0xa0
 8003b30:	18fb      	adds	r3, r7, r3
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2220      	movs	r2, #32
 8003b36:	4013      	ands	r3, r2
 8003b38:	d105      	bne.n	8003b46 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003b3a:	239c      	movs	r3, #156	; 0x9c
 8003b3c:	18fb      	adds	r3, r7, r3
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2201      	movs	r2, #1
 8003b42:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003b44:	d00b      	beq.n	8003b5e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2208      	movs	r2, #8
 8003b4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2280      	movs	r2, #128	; 0x80
 8003b52:	589b      	ldr	r3, [r3, r2]
 8003b54:	2208      	movs	r2, #8
 8003b56:	431a      	orrs	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2180      	movs	r1, #128	; 0x80
 8003b5c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003b5e:	23a4      	movs	r3, #164	; 0xa4
 8003b60:	18fb      	adds	r3, r7, r3
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	2380      	movs	r3, #128	; 0x80
 8003b66:	011b      	lsls	r3, r3, #4
 8003b68:	4013      	ands	r3, r2
 8003b6a:	d013      	beq.n	8003b94 <HAL_UART_IRQHandler+0x198>
 8003b6c:	23a0      	movs	r3, #160	; 0xa0
 8003b6e:	18fb      	adds	r3, r7, r3
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	2380      	movs	r3, #128	; 0x80
 8003b74:	04db      	lsls	r3, r3, #19
 8003b76:	4013      	ands	r3, r2
 8003b78:	d00c      	beq.n	8003b94 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2280      	movs	r2, #128	; 0x80
 8003b80:	0112      	lsls	r2, r2, #4
 8003b82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2280      	movs	r2, #128	; 0x80
 8003b88:	589b      	ldr	r3, [r3, r2]
 8003b8a:	2220      	movs	r2, #32
 8003b8c:	431a      	orrs	r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2180      	movs	r1, #128	; 0x80
 8003b92:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2280      	movs	r2, #128	; 0x80
 8003b98:	589b      	ldr	r3, [r3, r2]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d100      	bne.n	8003ba0 <HAL_UART_IRQHandler+0x1a4>
 8003b9e:	e1f7      	b.n	8003f90 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003ba0:	23a4      	movs	r3, #164	; 0xa4
 8003ba2:	18fb      	adds	r3, r7, r3
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2220      	movs	r2, #32
 8003ba8:	4013      	ands	r3, r2
 8003baa:	d00e      	beq.n	8003bca <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003bac:	23a0      	movs	r3, #160	; 0xa0
 8003bae:	18fb      	adds	r3, r7, r3
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2220      	movs	r2, #32
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	d008      	beq.n	8003bca <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d004      	beq.n	8003bca <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	0010      	movs	r0, r2
 8003bc8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2280      	movs	r2, #128	; 0x80
 8003bce:	589b      	ldr	r3, [r3, r2]
 8003bd0:	2194      	movs	r1, #148	; 0x94
 8003bd2:	187a      	adds	r2, r7, r1
 8003bd4:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	2240      	movs	r2, #64	; 0x40
 8003bde:	4013      	ands	r3, r2
 8003be0:	2b40      	cmp	r3, #64	; 0x40
 8003be2:	d004      	beq.n	8003bee <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003be4:	187b      	adds	r3, r7, r1
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2228      	movs	r2, #40	; 0x28
 8003bea:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003bec:	d047      	beq.n	8003c7e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	0018      	movs	r0, r3
 8003bf2:	f000 fcf7 	bl	80045e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	2240      	movs	r2, #64	; 0x40
 8003bfe:	4013      	ands	r3, r2
 8003c00:	2b40      	cmp	r3, #64	; 0x40
 8003c02:	d137      	bne.n	8003c74 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c04:	f3ef 8310 	mrs	r3, PRIMASK
 8003c08:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003c0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c0c:	2090      	movs	r0, #144	; 0x90
 8003c0e:	183a      	adds	r2, r7, r0
 8003c10:	6013      	str	r3, [r2, #0]
 8003c12:	2301      	movs	r3, #1
 8003c14:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c18:	f383 8810 	msr	PRIMASK, r3
}
 8003c1c:	46c0      	nop			; (mov r8, r8)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	689a      	ldr	r2, [r3, #8]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2140      	movs	r1, #64	; 0x40
 8003c2a:	438a      	bics	r2, r1
 8003c2c:	609a      	str	r2, [r3, #8]
 8003c2e:	183b      	adds	r3, r7, r0
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c36:	f383 8810 	msr	PRIMASK, r3
}
 8003c3a:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d012      	beq.n	8003c6a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c48:	4a14      	ldr	r2, [pc, #80]	; (8003c9c <HAL_UART_IRQHandler+0x2a0>)
 8003c4a:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c50:	0018      	movs	r0, r3
 8003c52:	f7fe ff79 	bl	8002b48 <HAL_DMA_Abort_IT>
 8003c56:	1e03      	subs	r3, r0, #0
 8003c58:	d01a      	beq.n	8003c90 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c64:	0018      	movs	r0, r3
 8003c66:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c68:	e012      	b.n	8003c90 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	0018      	movs	r0, r3
 8003c6e:	f000 f9a5 	bl	8003fbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c72:	e00d      	b.n	8003c90 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	0018      	movs	r0, r3
 8003c78:	f000 f9a0 	bl	8003fbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c7c:	e008      	b.n	8003c90 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	0018      	movs	r0, r3
 8003c82:	f000 f99b 	bl	8003fbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2280      	movs	r2, #128	; 0x80
 8003c8a:	2100      	movs	r1, #0
 8003c8c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003c8e:	e17f      	b.n	8003f90 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c90:	46c0      	nop			; (mov r8, r8)
    return;
 8003c92:	e17d      	b.n	8003f90 <HAL_UART_IRQHandler+0x594>
 8003c94:	0000080f 	.word	0x0000080f
 8003c98:	04000120 	.word	0x04000120
 8003c9c:	080046a9 	.word	0x080046a9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d000      	beq.n	8003caa <HAL_UART_IRQHandler+0x2ae>
 8003ca8:	e131      	b.n	8003f0e <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003caa:	23a4      	movs	r3, #164	; 0xa4
 8003cac:	18fb      	adds	r3, r7, r3
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2210      	movs	r2, #16
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	d100      	bne.n	8003cb8 <HAL_UART_IRQHandler+0x2bc>
 8003cb6:	e12a      	b.n	8003f0e <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003cb8:	23a0      	movs	r3, #160	; 0xa0
 8003cba:	18fb      	adds	r3, r7, r3
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2210      	movs	r2, #16
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	d100      	bne.n	8003cc6 <HAL_UART_IRQHandler+0x2ca>
 8003cc4:	e123      	b.n	8003f0e <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2210      	movs	r2, #16
 8003ccc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	2240      	movs	r2, #64	; 0x40
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	2b40      	cmp	r3, #64	; 0x40
 8003cda:	d000      	beq.n	8003cde <HAL_UART_IRQHandler+0x2e2>
 8003cdc:	e09b      	b.n	8003e16 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	685a      	ldr	r2, [r3, #4]
 8003ce6:	217e      	movs	r1, #126	; 0x7e
 8003ce8:	187b      	adds	r3, r7, r1
 8003cea:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003cec:	187b      	adds	r3, r7, r1
 8003cee:	881b      	ldrh	r3, [r3, #0]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d100      	bne.n	8003cf6 <HAL_UART_IRQHandler+0x2fa>
 8003cf4:	e14e      	b.n	8003f94 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2258      	movs	r2, #88	; 0x58
 8003cfa:	5a9b      	ldrh	r3, [r3, r2]
 8003cfc:	187a      	adds	r2, r7, r1
 8003cfe:	8812      	ldrh	r2, [r2, #0]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d300      	bcc.n	8003d06 <HAL_UART_IRQHandler+0x30a>
 8003d04:	e146      	b.n	8003f94 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	187a      	adds	r2, r7, r1
 8003d0a:	215a      	movs	r1, #90	; 0x5a
 8003d0c:	8812      	ldrh	r2, [r2, #0]
 8003d0e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	2b20      	cmp	r3, #32
 8003d18:	d06e      	beq.n	8003df8 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d1a:	f3ef 8310 	mrs	r3, PRIMASK
 8003d1e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d22:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d24:	2301      	movs	r3, #1
 8003d26:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d2a:	f383 8810 	msr	PRIMASK, r3
}
 8003d2e:	46c0      	nop			; (mov r8, r8)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	499a      	ldr	r1, [pc, #616]	; (8003fa4 <HAL_UART_IRQHandler+0x5a8>)
 8003d3c:	400a      	ands	r2, r1
 8003d3e:	601a      	str	r2, [r3, #0]
 8003d40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d42:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d46:	f383 8810 	msr	PRIMASK, r3
}
 8003d4a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d4c:	f3ef 8310 	mrs	r3, PRIMASK
 8003d50:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003d52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d54:	677b      	str	r3, [r7, #116]	; 0x74
 8003d56:	2301      	movs	r3, #1
 8003d58:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d5c:	f383 8810 	msr	PRIMASK, r3
}
 8003d60:	46c0      	nop			; (mov r8, r8)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	689a      	ldr	r2, [r3, #8]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2101      	movs	r1, #1
 8003d6e:	438a      	bics	r2, r1
 8003d70:	609a      	str	r2, [r3, #8]
 8003d72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d74:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d78:	f383 8810 	msr	PRIMASK, r3
}
 8003d7c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d7e:	f3ef 8310 	mrs	r3, PRIMASK
 8003d82:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003d84:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d86:	673b      	str	r3, [r7, #112]	; 0x70
 8003d88:	2301      	movs	r3, #1
 8003d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d8e:	f383 8810 	msr	PRIMASK, r3
}
 8003d92:	46c0      	nop			; (mov r8, r8)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	689a      	ldr	r2, [r3, #8]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2140      	movs	r1, #64	; 0x40
 8003da0:	438a      	bics	r2, r1
 8003da2:	609a      	str	r2, [r3, #8]
 8003da4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003da6:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003da8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003daa:	f383 8810 	msr	PRIMASK, r3
}
 8003dae:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2220      	movs	r2, #32
 8003db4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dbc:	f3ef 8310 	mrs	r3, PRIMASK
 8003dc0:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003dc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dc4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003dcc:	f383 8810 	msr	PRIMASK, r3
}
 8003dd0:	46c0      	nop			; (mov r8, r8)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2110      	movs	r1, #16
 8003dde:	438a      	bics	r2, r1
 8003de0:	601a      	str	r2, [r3, #0]
 8003de2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003de4:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003de6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003de8:	f383 8810 	msr	PRIMASK, r3
}
 8003dec:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df2:	0018      	movs	r0, r3
 8003df4:	f7fe fe70 	bl	8002ad8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2258      	movs	r2, #88	; 0x58
 8003dfc:	5a9a      	ldrh	r2, [r3, r2]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	215a      	movs	r1, #90	; 0x5a
 8003e02:	5a5b      	ldrh	r3, [r3, r1]
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	b29a      	uxth	r2, r3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	0011      	movs	r1, r2
 8003e0e:	0018      	movs	r0, r3
 8003e10:	f000 f8dc 	bl	8003fcc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003e14:	e0be      	b.n	8003f94 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2258      	movs	r2, #88	; 0x58
 8003e1a:	5a99      	ldrh	r1, [r3, r2]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	225a      	movs	r2, #90	; 0x5a
 8003e20:	5a9b      	ldrh	r3, [r3, r2]
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	208e      	movs	r0, #142	; 0x8e
 8003e26:	183b      	adds	r3, r7, r0
 8003e28:	1a8a      	subs	r2, r1, r2
 8003e2a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	225a      	movs	r2, #90	; 0x5a
 8003e30:	5a9b      	ldrh	r3, [r3, r2]
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d100      	bne.n	8003e3a <HAL_UART_IRQHandler+0x43e>
 8003e38:	e0ae      	b.n	8003f98 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8003e3a:	183b      	adds	r3, r7, r0
 8003e3c:	881b      	ldrh	r3, [r3, #0]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d100      	bne.n	8003e44 <HAL_UART_IRQHandler+0x448>
 8003e42:	e0a9      	b.n	8003f98 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e44:	f3ef 8310 	mrs	r3, PRIMASK
 8003e48:	60fb      	str	r3, [r7, #12]
  return(result);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e4c:	2488      	movs	r4, #136	; 0x88
 8003e4e:	193a      	adds	r2, r7, r4
 8003e50:	6013      	str	r3, [r2, #0]
 8003e52:	2301      	movs	r3, #1
 8003e54:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	f383 8810 	msr	PRIMASK, r3
}
 8003e5c:	46c0      	nop			; (mov r8, r8)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	494f      	ldr	r1, [pc, #316]	; (8003fa8 <HAL_UART_IRQHandler+0x5ac>)
 8003e6a:	400a      	ands	r2, r1
 8003e6c:	601a      	str	r2, [r3, #0]
 8003e6e:	193b      	adds	r3, r7, r4
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	f383 8810 	msr	PRIMASK, r3
}
 8003e7a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e7c:	f3ef 8310 	mrs	r3, PRIMASK
 8003e80:	61bb      	str	r3, [r7, #24]
  return(result);
 8003e82:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e84:	2484      	movs	r4, #132	; 0x84
 8003e86:	193a      	adds	r2, r7, r4
 8003e88:	6013      	str	r3, [r2, #0]
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	f383 8810 	msr	PRIMASK, r3
}
 8003e94:	46c0      	nop			; (mov r8, r8)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	689a      	ldr	r2, [r3, #8]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2101      	movs	r1, #1
 8003ea2:	438a      	bics	r2, r1
 8003ea4:	609a      	str	r2, [r3, #8]
 8003ea6:	193b      	adds	r3, r7, r4
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eac:	6a3b      	ldr	r3, [r7, #32]
 8003eae:	f383 8810 	msr	PRIMASK, r3
}
 8003eb2:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2220      	movs	r2, #32
 8003eb8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ec6:	f3ef 8310 	mrs	r3, PRIMASK
 8003eca:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ece:	2480      	movs	r4, #128	; 0x80
 8003ed0:	193a      	adds	r2, r7, r4
 8003ed2:	6013      	str	r3, [r2, #0]
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eda:	f383 8810 	msr	PRIMASK, r3
}
 8003ede:	46c0      	nop			; (mov r8, r8)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2110      	movs	r1, #16
 8003eec:	438a      	bics	r2, r1
 8003eee:	601a      	str	r2, [r3, #0]
 8003ef0:	193b      	adds	r3, r7, r4
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef8:	f383 8810 	msr	PRIMASK, r3
}
 8003efc:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003efe:	183b      	adds	r3, r7, r0
 8003f00:	881a      	ldrh	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	0011      	movs	r1, r2
 8003f06:	0018      	movs	r0, r3
 8003f08:	f000 f860 	bl	8003fcc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003f0c:	e044      	b.n	8003f98 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003f0e:	23a4      	movs	r3, #164	; 0xa4
 8003f10:	18fb      	adds	r3, r7, r3
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	2380      	movs	r3, #128	; 0x80
 8003f16:	035b      	lsls	r3, r3, #13
 8003f18:	4013      	ands	r3, r2
 8003f1a:	d010      	beq.n	8003f3e <HAL_UART_IRQHandler+0x542>
 8003f1c:	239c      	movs	r3, #156	; 0x9c
 8003f1e:	18fb      	adds	r3, r7, r3
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	2380      	movs	r3, #128	; 0x80
 8003f24:	03db      	lsls	r3, r3, #15
 8003f26:	4013      	ands	r3, r2
 8003f28:	d009      	beq.n	8003f3e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2280      	movs	r2, #128	; 0x80
 8003f30:	0352      	lsls	r2, r2, #13
 8003f32:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	0018      	movs	r0, r3
 8003f38:	f000 fbf8 	bl	800472c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003f3c:	e02f      	b.n	8003f9e <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003f3e:	23a4      	movs	r3, #164	; 0xa4
 8003f40:	18fb      	adds	r3, r7, r3
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2280      	movs	r2, #128	; 0x80
 8003f46:	4013      	ands	r3, r2
 8003f48:	d00f      	beq.n	8003f6a <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003f4a:	23a0      	movs	r3, #160	; 0xa0
 8003f4c:	18fb      	adds	r3, r7, r3
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2280      	movs	r2, #128	; 0x80
 8003f52:	4013      	ands	r3, r2
 8003f54:	d009      	beq.n	8003f6a <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d01e      	beq.n	8003f9c <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	0010      	movs	r0, r2
 8003f66:	4798      	blx	r3
    }
    return;
 8003f68:	e018      	b.n	8003f9c <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003f6a:	23a4      	movs	r3, #164	; 0xa4
 8003f6c:	18fb      	adds	r3, r7, r3
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2240      	movs	r2, #64	; 0x40
 8003f72:	4013      	ands	r3, r2
 8003f74:	d013      	beq.n	8003f9e <HAL_UART_IRQHandler+0x5a2>
 8003f76:	23a0      	movs	r3, #160	; 0xa0
 8003f78:	18fb      	adds	r3, r7, r3
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2240      	movs	r2, #64	; 0x40
 8003f7e:	4013      	ands	r3, r2
 8003f80:	d00d      	beq.n	8003f9e <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	0018      	movs	r0, r3
 8003f86:	f000 fba6 	bl	80046d6 <UART_EndTransmit_IT>
    return;
 8003f8a:	e008      	b.n	8003f9e <HAL_UART_IRQHandler+0x5a2>
      return;
 8003f8c:	46c0      	nop			; (mov r8, r8)
 8003f8e:	e006      	b.n	8003f9e <HAL_UART_IRQHandler+0x5a2>
    return;
 8003f90:	46c0      	nop			; (mov r8, r8)
 8003f92:	e004      	b.n	8003f9e <HAL_UART_IRQHandler+0x5a2>
      return;
 8003f94:	46c0      	nop			; (mov r8, r8)
 8003f96:	e002      	b.n	8003f9e <HAL_UART_IRQHandler+0x5a2>
      return;
 8003f98:	46c0      	nop			; (mov r8, r8)
 8003f9a:	e000      	b.n	8003f9e <HAL_UART_IRQHandler+0x5a2>
    return;
 8003f9c:	46c0      	nop			; (mov r8, r8)
  }

}
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	b02b      	add	sp, #172	; 0xac
 8003fa2:	bd90      	pop	{r4, r7, pc}
 8003fa4:	fffffeff 	.word	0xfffffeff
 8003fa8:	fffffedf 	.word	0xfffffedf

08003fac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003fb4:	46c0      	nop			; (mov r8, r8)
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	b002      	add	sp, #8
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003fc4:	46c0      	nop			; (mov r8, r8)
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	b002      	add	sp, #8
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	000a      	movs	r2, r1
 8003fd6:	1cbb      	adds	r3, r7, #2
 8003fd8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003fda:	46c0      	nop			; (mov r8, r8)
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	b002      	add	sp, #8
 8003fe0:	bd80      	pop	{r7, pc}
	...

08003fe4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b088      	sub	sp, #32
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003fec:	231e      	movs	r3, #30
 8003fee:	18fb      	adds	r3, r7, r3
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	689a      	ldr	r2, [r3, #8]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	431a      	orrs	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	695b      	ldr	r3, [r3, #20]
 8004002:	431a      	orrs	r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	69db      	ldr	r3, [r3, #28]
 8004008:	4313      	orrs	r3, r2
 800400a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a8d      	ldr	r2, [pc, #564]	; (8004248 <UART_SetConfig+0x264>)
 8004014:	4013      	ands	r3, r2
 8004016:	0019      	movs	r1, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	697a      	ldr	r2, [r7, #20]
 800401e:	430a      	orrs	r2, r1
 8004020:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	4a88      	ldr	r2, [pc, #544]	; (800424c <UART_SetConfig+0x268>)
 800402a:	4013      	ands	r3, r2
 800402c:	0019      	movs	r1, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	68da      	ldr	r2, [r3, #12]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	430a      	orrs	r2, r1
 8004038:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a1b      	ldr	r3, [r3, #32]
 8004044:	697a      	ldr	r2, [r7, #20]
 8004046:	4313      	orrs	r3, r2
 8004048:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	4a7f      	ldr	r2, [pc, #508]	; (8004250 <UART_SetConfig+0x26c>)
 8004052:	4013      	ands	r3, r2
 8004054:	0019      	movs	r1, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	697a      	ldr	r2, [r7, #20]
 800405c:	430a      	orrs	r2, r1
 800405e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a7b      	ldr	r2, [pc, #492]	; (8004254 <UART_SetConfig+0x270>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d127      	bne.n	80040ba <UART_SetConfig+0xd6>
 800406a:	4b7b      	ldr	r3, [pc, #492]	; (8004258 <UART_SetConfig+0x274>)
 800406c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406e:	2203      	movs	r2, #3
 8004070:	4013      	ands	r3, r2
 8004072:	2b03      	cmp	r3, #3
 8004074:	d00d      	beq.n	8004092 <UART_SetConfig+0xae>
 8004076:	d81b      	bhi.n	80040b0 <UART_SetConfig+0xcc>
 8004078:	2b02      	cmp	r3, #2
 800407a:	d014      	beq.n	80040a6 <UART_SetConfig+0xc2>
 800407c:	d818      	bhi.n	80040b0 <UART_SetConfig+0xcc>
 800407e:	2b00      	cmp	r3, #0
 8004080:	d002      	beq.n	8004088 <UART_SetConfig+0xa4>
 8004082:	2b01      	cmp	r3, #1
 8004084:	d00a      	beq.n	800409c <UART_SetConfig+0xb8>
 8004086:	e013      	b.n	80040b0 <UART_SetConfig+0xcc>
 8004088:	231f      	movs	r3, #31
 800408a:	18fb      	adds	r3, r7, r3
 800408c:	2200      	movs	r2, #0
 800408e:	701a      	strb	r2, [r3, #0]
 8004090:	e021      	b.n	80040d6 <UART_SetConfig+0xf2>
 8004092:	231f      	movs	r3, #31
 8004094:	18fb      	adds	r3, r7, r3
 8004096:	2202      	movs	r2, #2
 8004098:	701a      	strb	r2, [r3, #0]
 800409a:	e01c      	b.n	80040d6 <UART_SetConfig+0xf2>
 800409c:	231f      	movs	r3, #31
 800409e:	18fb      	adds	r3, r7, r3
 80040a0:	2204      	movs	r2, #4
 80040a2:	701a      	strb	r2, [r3, #0]
 80040a4:	e017      	b.n	80040d6 <UART_SetConfig+0xf2>
 80040a6:	231f      	movs	r3, #31
 80040a8:	18fb      	adds	r3, r7, r3
 80040aa:	2208      	movs	r2, #8
 80040ac:	701a      	strb	r2, [r3, #0]
 80040ae:	e012      	b.n	80040d6 <UART_SetConfig+0xf2>
 80040b0:	231f      	movs	r3, #31
 80040b2:	18fb      	adds	r3, r7, r3
 80040b4:	2210      	movs	r2, #16
 80040b6:	701a      	strb	r2, [r3, #0]
 80040b8:	e00d      	b.n	80040d6 <UART_SetConfig+0xf2>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a67      	ldr	r2, [pc, #412]	; (800425c <UART_SetConfig+0x278>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d104      	bne.n	80040ce <UART_SetConfig+0xea>
 80040c4:	231f      	movs	r3, #31
 80040c6:	18fb      	adds	r3, r7, r3
 80040c8:	2200      	movs	r2, #0
 80040ca:	701a      	strb	r2, [r3, #0]
 80040cc:	e003      	b.n	80040d6 <UART_SetConfig+0xf2>
 80040ce:	231f      	movs	r3, #31
 80040d0:	18fb      	adds	r3, r7, r3
 80040d2:	2210      	movs	r2, #16
 80040d4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	69da      	ldr	r2, [r3, #28]
 80040da:	2380      	movs	r3, #128	; 0x80
 80040dc:	021b      	lsls	r3, r3, #8
 80040de:	429a      	cmp	r2, r3
 80040e0:	d15d      	bne.n	800419e <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 80040e2:	231f      	movs	r3, #31
 80040e4:	18fb      	adds	r3, r7, r3
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	2b08      	cmp	r3, #8
 80040ea:	d015      	beq.n	8004118 <UART_SetConfig+0x134>
 80040ec:	dc18      	bgt.n	8004120 <UART_SetConfig+0x13c>
 80040ee:	2b04      	cmp	r3, #4
 80040f0:	d00d      	beq.n	800410e <UART_SetConfig+0x12a>
 80040f2:	dc15      	bgt.n	8004120 <UART_SetConfig+0x13c>
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d002      	beq.n	80040fe <UART_SetConfig+0x11a>
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d005      	beq.n	8004108 <UART_SetConfig+0x124>
 80040fc:	e010      	b.n	8004120 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040fe:	f7ff fb69 	bl	80037d4 <HAL_RCC_GetPCLK1Freq>
 8004102:	0003      	movs	r3, r0
 8004104:	61bb      	str	r3, [r7, #24]
        break;
 8004106:	e012      	b.n	800412e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004108:	4b55      	ldr	r3, [pc, #340]	; (8004260 <UART_SetConfig+0x27c>)
 800410a:	61bb      	str	r3, [r7, #24]
        break;
 800410c:	e00f      	b.n	800412e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800410e:	f7ff faf3 	bl	80036f8 <HAL_RCC_GetSysClockFreq>
 8004112:	0003      	movs	r3, r0
 8004114:	61bb      	str	r3, [r7, #24]
        break;
 8004116:	e00a      	b.n	800412e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004118:	2380      	movs	r3, #128	; 0x80
 800411a:	021b      	lsls	r3, r3, #8
 800411c:	61bb      	str	r3, [r7, #24]
        break;
 800411e:	e006      	b.n	800412e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8004120:	2300      	movs	r3, #0
 8004122:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004124:	231e      	movs	r3, #30
 8004126:	18fb      	adds	r3, r7, r3
 8004128:	2201      	movs	r2, #1
 800412a:	701a      	strb	r2, [r3, #0]
        break;
 800412c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d100      	bne.n	8004136 <UART_SetConfig+0x152>
 8004134:	e07b      	b.n	800422e <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	005a      	lsls	r2, r3, #1
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	085b      	lsrs	r3, r3, #1
 8004140:	18d2      	adds	r2, r2, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	0019      	movs	r1, r3
 8004148:	0010      	movs	r0, r2
 800414a:	f7fb ffef 	bl	800012c <__udivsi3>
 800414e:	0003      	movs	r3, r0
 8004150:	b29b      	uxth	r3, r3
 8004152:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	2b0f      	cmp	r3, #15
 8004158:	d91c      	bls.n	8004194 <UART_SetConfig+0x1b0>
 800415a:	693a      	ldr	r2, [r7, #16]
 800415c:	2380      	movs	r3, #128	; 0x80
 800415e:	025b      	lsls	r3, r3, #9
 8004160:	429a      	cmp	r2, r3
 8004162:	d217      	bcs.n	8004194 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	b29a      	uxth	r2, r3
 8004168:	200e      	movs	r0, #14
 800416a:	183b      	adds	r3, r7, r0
 800416c:	210f      	movs	r1, #15
 800416e:	438a      	bics	r2, r1
 8004170:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	085b      	lsrs	r3, r3, #1
 8004176:	b29b      	uxth	r3, r3
 8004178:	2207      	movs	r2, #7
 800417a:	4013      	ands	r3, r2
 800417c:	b299      	uxth	r1, r3
 800417e:	183b      	adds	r3, r7, r0
 8004180:	183a      	adds	r2, r7, r0
 8004182:	8812      	ldrh	r2, [r2, #0]
 8004184:	430a      	orrs	r2, r1
 8004186:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	183a      	adds	r2, r7, r0
 800418e:	8812      	ldrh	r2, [r2, #0]
 8004190:	60da      	str	r2, [r3, #12]
 8004192:	e04c      	b.n	800422e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8004194:	231e      	movs	r3, #30
 8004196:	18fb      	adds	r3, r7, r3
 8004198:	2201      	movs	r2, #1
 800419a:	701a      	strb	r2, [r3, #0]
 800419c:	e047      	b.n	800422e <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800419e:	231f      	movs	r3, #31
 80041a0:	18fb      	adds	r3, r7, r3
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	2b08      	cmp	r3, #8
 80041a6:	d015      	beq.n	80041d4 <UART_SetConfig+0x1f0>
 80041a8:	dc18      	bgt.n	80041dc <UART_SetConfig+0x1f8>
 80041aa:	2b04      	cmp	r3, #4
 80041ac:	d00d      	beq.n	80041ca <UART_SetConfig+0x1e6>
 80041ae:	dc15      	bgt.n	80041dc <UART_SetConfig+0x1f8>
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d002      	beq.n	80041ba <UART_SetConfig+0x1d6>
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d005      	beq.n	80041c4 <UART_SetConfig+0x1e0>
 80041b8:	e010      	b.n	80041dc <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041ba:	f7ff fb0b 	bl	80037d4 <HAL_RCC_GetPCLK1Freq>
 80041be:	0003      	movs	r3, r0
 80041c0:	61bb      	str	r3, [r7, #24]
        break;
 80041c2:	e012      	b.n	80041ea <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041c4:	4b26      	ldr	r3, [pc, #152]	; (8004260 <UART_SetConfig+0x27c>)
 80041c6:	61bb      	str	r3, [r7, #24]
        break;
 80041c8:	e00f      	b.n	80041ea <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041ca:	f7ff fa95 	bl	80036f8 <HAL_RCC_GetSysClockFreq>
 80041ce:	0003      	movs	r3, r0
 80041d0:	61bb      	str	r3, [r7, #24]
        break;
 80041d2:	e00a      	b.n	80041ea <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041d4:	2380      	movs	r3, #128	; 0x80
 80041d6:	021b      	lsls	r3, r3, #8
 80041d8:	61bb      	str	r3, [r7, #24]
        break;
 80041da:	e006      	b.n	80041ea <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 80041dc:	2300      	movs	r3, #0
 80041de:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80041e0:	231e      	movs	r3, #30
 80041e2:	18fb      	adds	r3, r7, r3
 80041e4:	2201      	movs	r2, #1
 80041e6:	701a      	strb	r2, [r3, #0]
        break;
 80041e8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d01e      	beq.n	800422e <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	085a      	lsrs	r2, r3, #1
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	18d2      	adds	r2, r2, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	0019      	movs	r1, r3
 8004200:	0010      	movs	r0, r2
 8004202:	f7fb ff93 	bl	800012c <__udivsi3>
 8004206:	0003      	movs	r3, r0
 8004208:	b29b      	uxth	r3, r3
 800420a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	2b0f      	cmp	r3, #15
 8004210:	d909      	bls.n	8004226 <UART_SetConfig+0x242>
 8004212:	693a      	ldr	r2, [r7, #16]
 8004214:	2380      	movs	r3, #128	; 0x80
 8004216:	025b      	lsls	r3, r3, #9
 8004218:	429a      	cmp	r2, r3
 800421a:	d204      	bcs.n	8004226 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	693a      	ldr	r2, [r7, #16]
 8004222:	60da      	str	r2, [r3, #12]
 8004224:	e003      	b.n	800422e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8004226:	231e      	movs	r3, #30
 8004228:	18fb      	adds	r3, r7, r3
 800422a:	2201      	movs	r2, #1
 800422c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800423a:	231e      	movs	r3, #30
 800423c:	18fb      	adds	r3, r7, r3
 800423e:	781b      	ldrb	r3, [r3, #0]
}
 8004240:	0018      	movs	r0, r3
 8004242:	46bd      	mov	sp, r7
 8004244:	b008      	add	sp, #32
 8004246:	bd80      	pop	{r7, pc}
 8004248:	ffff69f3 	.word	0xffff69f3
 800424c:	ffffcfff 	.word	0xffffcfff
 8004250:	fffff4ff 	.word	0xfffff4ff
 8004254:	40013800 	.word	0x40013800
 8004258:	40021000 	.word	0x40021000
 800425c:	40004400 	.word	0x40004400
 8004260:	007a1200 	.word	0x007a1200

08004264 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004270:	2201      	movs	r2, #1
 8004272:	4013      	ands	r3, r2
 8004274:	d00b      	beq.n	800428e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	4a4a      	ldr	r2, [pc, #296]	; (80043a8 <UART_AdvFeatureConfig+0x144>)
 800427e:	4013      	ands	r3, r2
 8004280:	0019      	movs	r1, r3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	430a      	orrs	r2, r1
 800428c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004292:	2202      	movs	r2, #2
 8004294:	4013      	ands	r3, r2
 8004296:	d00b      	beq.n	80042b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	4a43      	ldr	r2, [pc, #268]	; (80043ac <UART_AdvFeatureConfig+0x148>)
 80042a0:	4013      	ands	r3, r2
 80042a2:	0019      	movs	r1, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	430a      	orrs	r2, r1
 80042ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b4:	2204      	movs	r2, #4
 80042b6:	4013      	ands	r3, r2
 80042b8:	d00b      	beq.n	80042d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	4a3b      	ldr	r2, [pc, #236]	; (80043b0 <UART_AdvFeatureConfig+0x14c>)
 80042c2:	4013      	ands	r3, r2
 80042c4:	0019      	movs	r1, r3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	430a      	orrs	r2, r1
 80042d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d6:	2208      	movs	r2, #8
 80042d8:	4013      	ands	r3, r2
 80042da:	d00b      	beq.n	80042f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	4a34      	ldr	r2, [pc, #208]	; (80043b4 <UART_AdvFeatureConfig+0x150>)
 80042e4:	4013      	ands	r3, r2
 80042e6:	0019      	movs	r1, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	430a      	orrs	r2, r1
 80042f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f8:	2210      	movs	r2, #16
 80042fa:	4013      	ands	r3, r2
 80042fc:	d00b      	beq.n	8004316 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	4a2c      	ldr	r2, [pc, #176]	; (80043b8 <UART_AdvFeatureConfig+0x154>)
 8004306:	4013      	ands	r3, r2
 8004308:	0019      	movs	r1, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	430a      	orrs	r2, r1
 8004314:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431a:	2220      	movs	r2, #32
 800431c:	4013      	ands	r3, r2
 800431e:	d00b      	beq.n	8004338 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	4a25      	ldr	r2, [pc, #148]	; (80043bc <UART_AdvFeatureConfig+0x158>)
 8004328:	4013      	ands	r3, r2
 800432a:	0019      	movs	r1, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	430a      	orrs	r2, r1
 8004336:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433c:	2240      	movs	r2, #64	; 0x40
 800433e:	4013      	ands	r3, r2
 8004340:	d01d      	beq.n	800437e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	4a1d      	ldr	r2, [pc, #116]	; (80043c0 <UART_AdvFeatureConfig+0x15c>)
 800434a:	4013      	ands	r3, r2
 800434c:	0019      	movs	r1, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	430a      	orrs	r2, r1
 8004358:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800435e:	2380      	movs	r3, #128	; 0x80
 8004360:	035b      	lsls	r3, r3, #13
 8004362:	429a      	cmp	r2, r3
 8004364:	d10b      	bne.n	800437e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	4a15      	ldr	r2, [pc, #84]	; (80043c4 <UART_AdvFeatureConfig+0x160>)
 800436e:	4013      	ands	r3, r2
 8004370:	0019      	movs	r1, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	430a      	orrs	r2, r1
 800437c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004382:	2280      	movs	r2, #128	; 0x80
 8004384:	4013      	ands	r3, r2
 8004386:	d00b      	beq.n	80043a0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	4a0e      	ldr	r2, [pc, #56]	; (80043c8 <UART_AdvFeatureConfig+0x164>)
 8004390:	4013      	ands	r3, r2
 8004392:	0019      	movs	r1, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	430a      	orrs	r2, r1
 800439e:	605a      	str	r2, [r3, #4]
  }
}
 80043a0:	46c0      	nop			; (mov r8, r8)
 80043a2:	46bd      	mov	sp, r7
 80043a4:	b002      	add	sp, #8
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	fffdffff 	.word	0xfffdffff
 80043ac:	fffeffff 	.word	0xfffeffff
 80043b0:	fffbffff 	.word	0xfffbffff
 80043b4:	ffff7fff 	.word	0xffff7fff
 80043b8:	ffffefff 	.word	0xffffefff
 80043bc:	ffffdfff 	.word	0xffffdfff
 80043c0:	ffefffff 	.word	0xffefffff
 80043c4:	ff9fffff 	.word	0xff9fffff
 80043c8:	fff7ffff 	.word	0xfff7ffff

080043cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b086      	sub	sp, #24
 80043d0:	af02      	add	r7, sp, #8
 80043d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2280      	movs	r2, #128	; 0x80
 80043d8:	2100      	movs	r1, #0
 80043da:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80043dc:	f7fe fa70 	bl	80028c0 <HAL_GetTick>
 80043e0:	0003      	movs	r3, r0
 80043e2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2208      	movs	r2, #8
 80043ec:	4013      	ands	r3, r2
 80043ee:	2b08      	cmp	r3, #8
 80043f0:	d10c      	bne.n	800440c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2280      	movs	r2, #128	; 0x80
 80043f6:	0391      	lsls	r1, r2, #14
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	4a17      	ldr	r2, [pc, #92]	; (8004458 <UART_CheckIdleState+0x8c>)
 80043fc:	9200      	str	r2, [sp, #0]
 80043fe:	2200      	movs	r2, #0
 8004400:	f000 f82c 	bl	800445c <UART_WaitOnFlagUntilTimeout>
 8004404:	1e03      	subs	r3, r0, #0
 8004406:	d001      	beq.n	800440c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e021      	b.n	8004450 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2204      	movs	r2, #4
 8004414:	4013      	ands	r3, r2
 8004416:	2b04      	cmp	r3, #4
 8004418:	d10c      	bne.n	8004434 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2280      	movs	r2, #128	; 0x80
 800441e:	03d1      	lsls	r1, r2, #15
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	4a0d      	ldr	r2, [pc, #52]	; (8004458 <UART_CheckIdleState+0x8c>)
 8004424:	9200      	str	r2, [sp, #0]
 8004426:	2200      	movs	r2, #0
 8004428:	f000 f818 	bl	800445c <UART_WaitOnFlagUntilTimeout>
 800442c:	1e03      	subs	r3, r0, #0
 800442e:	d001      	beq.n	8004434 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	e00d      	b.n	8004450 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2220      	movs	r2, #32
 8004438:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2220      	movs	r2, #32
 800443e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2274      	movs	r2, #116	; 0x74
 800444a:	2100      	movs	r1, #0
 800444c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	0018      	movs	r0, r3
 8004452:	46bd      	mov	sp, r7
 8004454:	b004      	add	sp, #16
 8004456:	bd80      	pop	{r7, pc}
 8004458:	01ffffff 	.word	0x01ffffff

0800445c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b094      	sub	sp, #80	; 0x50
 8004460:	af00      	add	r7, sp, #0
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	603b      	str	r3, [r7, #0]
 8004468:	1dfb      	adds	r3, r7, #7
 800446a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800446c:	e0a3      	b.n	80045b6 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800446e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004470:	3301      	adds	r3, #1
 8004472:	d100      	bne.n	8004476 <UART_WaitOnFlagUntilTimeout+0x1a>
 8004474:	e09f      	b.n	80045b6 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004476:	f7fe fa23 	bl	80028c0 <HAL_GetTick>
 800447a:	0002      	movs	r2, r0
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004482:	429a      	cmp	r2, r3
 8004484:	d302      	bcc.n	800448c <UART_WaitOnFlagUntilTimeout+0x30>
 8004486:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004488:	2b00      	cmp	r3, #0
 800448a:	d13d      	bne.n	8004508 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800448c:	f3ef 8310 	mrs	r3, PRIMASK
 8004490:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004492:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004494:	647b      	str	r3, [r7, #68]	; 0x44
 8004496:	2301      	movs	r3, #1
 8004498:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800449a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800449c:	f383 8810 	msr	PRIMASK, r3
}
 80044a0:	46c0      	nop			; (mov r8, r8)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	494c      	ldr	r1, [pc, #304]	; (80045e0 <UART_WaitOnFlagUntilTimeout+0x184>)
 80044ae:	400a      	ands	r2, r1
 80044b0:	601a      	str	r2, [r3, #0]
 80044b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044b4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b8:	f383 8810 	msr	PRIMASK, r3
}
 80044bc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044be:	f3ef 8310 	mrs	r3, PRIMASK
 80044c2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80044c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044c6:	643b      	str	r3, [r7, #64]	; 0x40
 80044c8:	2301      	movs	r3, #1
 80044ca:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ce:	f383 8810 	msr	PRIMASK, r3
}
 80044d2:	46c0      	nop			; (mov r8, r8)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	689a      	ldr	r2, [r3, #8]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2101      	movs	r1, #1
 80044e0:	438a      	bics	r2, r1
 80044e2:	609a      	str	r2, [r3, #8]
 80044e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044ea:	f383 8810 	msr	PRIMASK, r3
}
 80044ee:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2220      	movs	r2, #32
 80044f4:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2220      	movs	r2, #32
 80044fa:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2274      	movs	r2, #116	; 0x74
 8004500:	2100      	movs	r1, #0
 8004502:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	e067      	b.n	80045d8 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2204      	movs	r2, #4
 8004510:	4013      	ands	r3, r2
 8004512:	d050      	beq.n	80045b6 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	69da      	ldr	r2, [r3, #28]
 800451a:	2380      	movs	r3, #128	; 0x80
 800451c:	011b      	lsls	r3, r3, #4
 800451e:	401a      	ands	r2, r3
 8004520:	2380      	movs	r3, #128	; 0x80
 8004522:	011b      	lsls	r3, r3, #4
 8004524:	429a      	cmp	r2, r3
 8004526:	d146      	bne.n	80045b6 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2280      	movs	r2, #128	; 0x80
 800452e:	0112      	lsls	r2, r2, #4
 8004530:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004532:	f3ef 8310 	mrs	r3, PRIMASK
 8004536:	613b      	str	r3, [r7, #16]
  return(result);
 8004538:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800453a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800453c:	2301      	movs	r3, #1
 800453e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	f383 8810 	msr	PRIMASK, r3
}
 8004546:	46c0      	nop			; (mov r8, r8)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4923      	ldr	r1, [pc, #140]	; (80045e0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8004554:	400a      	ands	r2, r1
 8004556:	601a      	str	r2, [r3, #0]
 8004558:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800455a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	f383 8810 	msr	PRIMASK, r3
}
 8004562:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004564:	f3ef 8310 	mrs	r3, PRIMASK
 8004568:	61fb      	str	r3, [r7, #28]
  return(result);
 800456a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800456c:	64bb      	str	r3, [r7, #72]	; 0x48
 800456e:	2301      	movs	r3, #1
 8004570:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004572:	6a3b      	ldr	r3, [r7, #32]
 8004574:	f383 8810 	msr	PRIMASK, r3
}
 8004578:	46c0      	nop			; (mov r8, r8)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	689a      	ldr	r2, [r3, #8]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2101      	movs	r1, #1
 8004586:	438a      	bics	r2, r1
 8004588:	609a      	str	r2, [r3, #8]
 800458a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800458c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800458e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004590:	f383 8810 	msr	PRIMASK, r3
}
 8004594:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2220      	movs	r2, #32
 800459a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2220      	movs	r2, #32
 80045a0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2280      	movs	r2, #128	; 0x80
 80045a6:	2120      	movs	r1, #32
 80045a8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2274      	movs	r2, #116	; 0x74
 80045ae:	2100      	movs	r1, #0
 80045b0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e010      	b.n	80045d8 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	69db      	ldr	r3, [r3, #28]
 80045bc:	68ba      	ldr	r2, [r7, #8]
 80045be:	4013      	ands	r3, r2
 80045c0:	68ba      	ldr	r2, [r7, #8]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	425a      	negs	r2, r3
 80045c6:	4153      	adcs	r3, r2
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	001a      	movs	r2, r3
 80045cc:	1dfb      	adds	r3, r7, #7
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d100      	bne.n	80045d6 <UART_WaitOnFlagUntilTimeout+0x17a>
 80045d4:	e74b      	b.n	800446e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045d6:	2300      	movs	r3, #0
}
 80045d8:	0018      	movs	r0, r3
 80045da:	46bd      	mov	sp, r7
 80045dc:	b014      	add	sp, #80	; 0x50
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	fffffe5f 	.word	0xfffffe5f

080045e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b08e      	sub	sp, #56	; 0x38
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045ec:	f3ef 8310 	mrs	r3, PRIMASK
 80045f0:	617b      	str	r3, [r7, #20]
  return(result);
 80045f2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045f4:	637b      	str	r3, [r7, #52]	; 0x34
 80045f6:	2301      	movs	r3, #1
 80045f8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	f383 8810 	msr	PRIMASK, r3
}
 8004600:	46c0      	nop			; (mov r8, r8)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4925      	ldr	r1, [pc, #148]	; (80046a4 <UART_EndRxTransfer+0xc0>)
 800460e:	400a      	ands	r2, r1
 8004610:	601a      	str	r2, [r3, #0]
 8004612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004614:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	f383 8810 	msr	PRIMASK, r3
}
 800461c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800461e:	f3ef 8310 	mrs	r3, PRIMASK
 8004622:	623b      	str	r3, [r7, #32]
  return(result);
 8004624:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004626:	633b      	str	r3, [r7, #48]	; 0x30
 8004628:	2301      	movs	r3, #1
 800462a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800462c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462e:	f383 8810 	msr	PRIMASK, r3
}
 8004632:	46c0      	nop			; (mov r8, r8)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	689a      	ldr	r2, [r3, #8]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2101      	movs	r1, #1
 8004640:	438a      	bics	r2, r1
 8004642:	609a      	str	r2, [r3, #8]
 8004644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004646:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800464a:	f383 8810 	msr	PRIMASK, r3
}
 800464e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004654:	2b01      	cmp	r3, #1
 8004656:	d118      	bne.n	800468a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004658:	f3ef 8310 	mrs	r3, PRIMASK
 800465c:	60bb      	str	r3, [r7, #8]
  return(result);
 800465e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004660:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004662:	2301      	movs	r3, #1
 8004664:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f383 8810 	msr	PRIMASK, r3
}
 800466c:	46c0      	nop			; (mov r8, r8)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2110      	movs	r1, #16
 800467a:	438a      	bics	r2, r1
 800467c:	601a      	str	r2, [r3, #0]
 800467e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004680:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	f383 8810 	msr	PRIMASK, r3
}
 8004688:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2220      	movs	r2, #32
 800468e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800469c:	46c0      	nop			; (mov r8, r8)
 800469e:	46bd      	mov	sp, r7
 80046a0:	b00e      	add	sp, #56	; 0x38
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	fffffedf 	.word	0xfffffedf

080046a8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	225a      	movs	r2, #90	; 0x5a
 80046ba:	2100      	movs	r1, #0
 80046bc:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2252      	movs	r2, #82	; 0x52
 80046c2:	2100      	movs	r1, #0
 80046c4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	0018      	movs	r0, r3
 80046ca:	f7ff fc77 	bl	8003fbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046ce:	46c0      	nop			; (mov r8, r8)
 80046d0:	46bd      	mov	sp, r7
 80046d2:	b004      	add	sp, #16
 80046d4:	bd80      	pop	{r7, pc}

080046d6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80046d6:	b580      	push	{r7, lr}
 80046d8:	b086      	sub	sp, #24
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046de:	f3ef 8310 	mrs	r3, PRIMASK
 80046e2:	60bb      	str	r3, [r7, #8]
  return(result);
 80046e4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80046e6:	617b      	str	r3, [r7, #20]
 80046e8:	2301      	movs	r3, #1
 80046ea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f383 8810 	msr	PRIMASK, r3
}
 80046f2:	46c0      	nop			; (mov r8, r8)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2140      	movs	r1, #64	; 0x40
 8004700:	438a      	bics	r2, r1
 8004702:	601a      	str	r2, [r3, #0]
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	f383 8810 	msr	PRIMASK, r3
}
 800470e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2220      	movs	r2, #32
 8004714:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	0018      	movs	r0, r3
 8004720:	f7ff fc44 	bl	8003fac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004724:	46c0      	nop			; (mov r8, r8)
 8004726:	46bd      	mov	sp, r7
 8004728:	b006      	add	sp, #24
 800472a:	bd80      	pop	{r7, pc}

0800472c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004734:	46c0      	nop			; (mov r8, r8)
 8004736:	46bd      	mov	sp, r7
 8004738:	b002      	add	sp, #8
 800473a:	bd80      	pop	{r7, pc}

0800473c <__errno>:
 800473c:	4b01      	ldr	r3, [pc, #4]	; (8004744 <__errno+0x8>)
 800473e:	6818      	ldr	r0, [r3, #0]
 8004740:	4770      	bx	lr
 8004742:	46c0      	nop			; (mov r8, r8)
 8004744:	2000000c 	.word	0x2000000c

08004748 <__libc_init_array>:
 8004748:	b570      	push	{r4, r5, r6, lr}
 800474a:	2600      	movs	r6, #0
 800474c:	4d0c      	ldr	r5, [pc, #48]	; (8004780 <__libc_init_array+0x38>)
 800474e:	4c0d      	ldr	r4, [pc, #52]	; (8004784 <__libc_init_array+0x3c>)
 8004750:	1b64      	subs	r4, r4, r5
 8004752:	10a4      	asrs	r4, r4, #2
 8004754:	42a6      	cmp	r6, r4
 8004756:	d109      	bne.n	800476c <__libc_init_array+0x24>
 8004758:	2600      	movs	r6, #0
 800475a:	f000 fc8b 	bl	8005074 <_init>
 800475e:	4d0a      	ldr	r5, [pc, #40]	; (8004788 <__libc_init_array+0x40>)
 8004760:	4c0a      	ldr	r4, [pc, #40]	; (800478c <__libc_init_array+0x44>)
 8004762:	1b64      	subs	r4, r4, r5
 8004764:	10a4      	asrs	r4, r4, #2
 8004766:	42a6      	cmp	r6, r4
 8004768:	d105      	bne.n	8004776 <__libc_init_array+0x2e>
 800476a:	bd70      	pop	{r4, r5, r6, pc}
 800476c:	00b3      	lsls	r3, r6, #2
 800476e:	58eb      	ldr	r3, [r5, r3]
 8004770:	4798      	blx	r3
 8004772:	3601      	adds	r6, #1
 8004774:	e7ee      	b.n	8004754 <__libc_init_array+0xc>
 8004776:	00b3      	lsls	r3, r6, #2
 8004778:	58eb      	ldr	r3, [r5, r3]
 800477a:	4798      	blx	r3
 800477c:	3601      	adds	r6, #1
 800477e:	e7f2      	b.n	8004766 <__libc_init_array+0x1e>
 8004780:	080051e4 	.word	0x080051e4
 8004784:	080051e4 	.word	0x080051e4
 8004788:	080051e4 	.word	0x080051e4
 800478c:	080051e8 	.word	0x080051e8

08004790 <memset>:
 8004790:	0003      	movs	r3, r0
 8004792:	1882      	adds	r2, r0, r2
 8004794:	4293      	cmp	r3, r2
 8004796:	d100      	bne.n	800479a <memset+0xa>
 8004798:	4770      	bx	lr
 800479a:	7019      	strb	r1, [r3, #0]
 800479c:	3301      	adds	r3, #1
 800479e:	e7f9      	b.n	8004794 <memset+0x4>

080047a0 <siprintf>:
 80047a0:	b40e      	push	{r1, r2, r3}
 80047a2:	b500      	push	{lr}
 80047a4:	490b      	ldr	r1, [pc, #44]	; (80047d4 <siprintf+0x34>)
 80047a6:	b09c      	sub	sp, #112	; 0x70
 80047a8:	ab1d      	add	r3, sp, #116	; 0x74
 80047aa:	9002      	str	r0, [sp, #8]
 80047ac:	9006      	str	r0, [sp, #24]
 80047ae:	9107      	str	r1, [sp, #28]
 80047b0:	9104      	str	r1, [sp, #16]
 80047b2:	4809      	ldr	r0, [pc, #36]	; (80047d8 <siprintf+0x38>)
 80047b4:	4909      	ldr	r1, [pc, #36]	; (80047dc <siprintf+0x3c>)
 80047b6:	cb04      	ldmia	r3!, {r2}
 80047b8:	9105      	str	r1, [sp, #20]
 80047ba:	6800      	ldr	r0, [r0, #0]
 80047bc:	a902      	add	r1, sp, #8
 80047be:	9301      	str	r3, [sp, #4]
 80047c0:	f000 f870 	bl	80048a4 <_svfiprintf_r>
 80047c4:	2300      	movs	r3, #0
 80047c6:	9a02      	ldr	r2, [sp, #8]
 80047c8:	7013      	strb	r3, [r2, #0]
 80047ca:	b01c      	add	sp, #112	; 0x70
 80047cc:	bc08      	pop	{r3}
 80047ce:	b003      	add	sp, #12
 80047d0:	4718      	bx	r3
 80047d2:	46c0      	nop			; (mov r8, r8)
 80047d4:	7fffffff 	.word	0x7fffffff
 80047d8:	2000000c 	.word	0x2000000c
 80047dc:	ffff0208 	.word	0xffff0208

080047e0 <__ssputs_r>:
 80047e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047e2:	688e      	ldr	r6, [r1, #8]
 80047e4:	b085      	sub	sp, #20
 80047e6:	0007      	movs	r7, r0
 80047e8:	000c      	movs	r4, r1
 80047ea:	9203      	str	r2, [sp, #12]
 80047ec:	9301      	str	r3, [sp, #4]
 80047ee:	429e      	cmp	r6, r3
 80047f0:	d83c      	bhi.n	800486c <__ssputs_r+0x8c>
 80047f2:	2390      	movs	r3, #144	; 0x90
 80047f4:	898a      	ldrh	r2, [r1, #12]
 80047f6:	00db      	lsls	r3, r3, #3
 80047f8:	421a      	tst	r2, r3
 80047fa:	d034      	beq.n	8004866 <__ssputs_r+0x86>
 80047fc:	6909      	ldr	r1, [r1, #16]
 80047fe:	6823      	ldr	r3, [r4, #0]
 8004800:	6960      	ldr	r0, [r4, #20]
 8004802:	1a5b      	subs	r3, r3, r1
 8004804:	9302      	str	r3, [sp, #8]
 8004806:	2303      	movs	r3, #3
 8004808:	4343      	muls	r3, r0
 800480a:	0fdd      	lsrs	r5, r3, #31
 800480c:	18ed      	adds	r5, r5, r3
 800480e:	9b01      	ldr	r3, [sp, #4]
 8004810:	9802      	ldr	r0, [sp, #8]
 8004812:	3301      	adds	r3, #1
 8004814:	181b      	adds	r3, r3, r0
 8004816:	106d      	asrs	r5, r5, #1
 8004818:	42ab      	cmp	r3, r5
 800481a:	d900      	bls.n	800481e <__ssputs_r+0x3e>
 800481c:	001d      	movs	r5, r3
 800481e:	0553      	lsls	r3, r2, #21
 8004820:	d532      	bpl.n	8004888 <__ssputs_r+0xa8>
 8004822:	0029      	movs	r1, r5
 8004824:	0038      	movs	r0, r7
 8004826:	f000 fb53 	bl	8004ed0 <_malloc_r>
 800482a:	1e06      	subs	r6, r0, #0
 800482c:	d109      	bne.n	8004842 <__ssputs_r+0x62>
 800482e:	230c      	movs	r3, #12
 8004830:	603b      	str	r3, [r7, #0]
 8004832:	2340      	movs	r3, #64	; 0x40
 8004834:	2001      	movs	r0, #1
 8004836:	89a2      	ldrh	r2, [r4, #12]
 8004838:	4240      	negs	r0, r0
 800483a:	4313      	orrs	r3, r2
 800483c:	81a3      	strh	r3, [r4, #12]
 800483e:	b005      	add	sp, #20
 8004840:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004842:	9a02      	ldr	r2, [sp, #8]
 8004844:	6921      	ldr	r1, [r4, #16]
 8004846:	f000 faba 	bl	8004dbe <memcpy>
 800484a:	89a3      	ldrh	r3, [r4, #12]
 800484c:	4a14      	ldr	r2, [pc, #80]	; (80048a0 <__ssputs_r+0xc0>)
 800484e:	401a      	ands	r2, r3
 8004850:	2380      	movs	r3, #128	; 0x80
 8004852:	4313      	orrs	r3, r2
 8004854:	81a3      	strh	r3, [r4, #12]
 8004856:	9b02      	ldr	r3, [sp, #8]
 8004858:	6126      	str	r6, [r4, #16]
 800485a:	18f6      	adds	r6, r6, r3
 800485c:	6026      	str	r6, [r4, #0]
 800485e:	6165      	str	r5, [r4, #20]
 8004860:	9e01      	ldr	r6, [sp, #4]
 8004862:	1aed      	subs	r5, r5, r3
 8004864:	60a5      	str	r5, [r4, #8]
 8004866:	9b01      	ldr	r3, [sp, #4]
 8004868:	429e      	cmp	r6, r3
 800486a:	d900      	bls.n	800486e <__ssputs_r+0x8e>
 800486c:	9e01      	ldr	r6, [sp, #4]
 800486e:	0032      	movs	r2, r6
 8004870:	9903      	ldr	r1, [sp, #12]
 8004872:	6820      	ldr	r0, [r4, #0]
 8004874:	f000 faac 	bl	8004dd0 <memmove>
 8004878:	68a3      	ldr	r3, [r4, #8]
 800487a:	2000      	movs	r0, #0
 800487c:	1b9b      	subs	r3, r3, r6
 800487e:	60a3      	str	r3, [r4, #8]
 8004880:	6823      	ldr	r3, [r4, #0]
 8004882:	199e      	adds	r6, r3, r6
 8004884:	6026      	str	r6, [r4, #0]
 8004886:	e7da      	b.n	800483e <__ssputs_r+0x5e>
 8004888:	002a      	movs	r2, r5
 800488a:	0038      	movs	r0, r7
 800488c:	f000 fb96 	bl	8004fbc <_realloc_r>
 8004890:	1e06      	subs	r6, r0, #0
 8004892:	d1e0      	bne.n	8004856 <__ssputs_r+0x76>
 8004894:	0038      	movs	r0, r7
 8004896:	6921      	ldr	r1, [r4, #16]
 8004898:	f000 faae 	bl	8004df8 <_free_r>
 800489c:	e7c7      	b.n	800482e <__ssputs_r+0x4e>
 800489e:	46c0      	nop			; (mov r8, r8)
 80048a0:	fffffb7f 	.word	0xfffffb7f

080048a4 <_svfiprintf_r>:
 80048a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048a6:	b0a1      	sub	sp, #132	; 0x84
 80048a8:	9003      	str	r0, [sp, #12]
 80048aa:	001d      	movs	r5, r3
 80048ac:	898b      	ldrh	r3, [r1, #12]
 80048ae:	000f      	movs	r7, r1
 80048b0:	0016      	movs	r6, r2
 80048b2:	061b      	lsls	r3, r3, #24
 80048b4:	d511      	bpl.n	80048da <_svfiprintf_r+0x36>
 80048b6:	690b      	ldr	r3, [r1, #16]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d10e      	bne.n	80048da <_svfiprintf_r+0x36>
 80048bc:	2140      	movs	r1, #64	; 0x40
 80048be:	f000 fb07 	bl	8004ed0 <_malloc_r>
 80048c2:	6038      	str	r0, [r7, #0]
 80048c4:	6138      	str	r0, [r7, #16]
 80048c6:	2800      	cmp	r0, #0
 80048c8:	d105      	bne.n	80048d6 <_svfiprintf_r+0x32>
 80048ca:	230c      	movs	r3, #12
 80048cc:	9a03      	ldr	r2, [sp, #12]
 80048ce:	3801      	subs	r0, #1
 80048d0:	6013      	str	r3, [r2, #0]
 80048d2:	b021      	add	sp, #132	; 0x84
 80048d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048d6:	2340      	movs	r3, #64	; 0x40
 80048d8:	617b      	str	r3, [r7, #20]
 80048da:	2300      	movs	r3, #0
 80048dc:	ac08      	add	r4, sp, #32
 80048de:	6163      	str	r3, [r4, #20]
 80048e0:	3320      	adds	r3, #32
 80048e2:	7663      	strb	r3, [r4, #25]
 80048e4:	3310      	adds	r3, #16
 80048e6:	76a3      	strb	r3, [r4, #26]
 80048e8:	9507      	str	r5, [sp, #28]
 80048ea:	0035      	movs	r5, r6
 80048ec:	782b      	ldrb	r3, [r5, #0]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d001      	beq.n	80048f6 <_svfiprintf_r+0x52>
 80048f2:	2b25      	cmp	r3, #37	; 0x25
 80048f4:	d147      	bne.n	8004986 <_svfiprintf_r+0xe2>
 80048f6:	1bab      	subs	r3, r5, r6
 80048f8:	9305      	str	r3, [sp, #20]
 80048fa:	42b5      	cmp	r5, r6
 80048fc:	d00c      	beq.n	8004918 <_svfiprintf_r+0x74>
 80048fe:	0032      	movs	r2, r6
 8004900:	0039      	movs	r1, r7
 8004902:	9803      	ldr	r0, [sp, #12]
 8004904:	f7ff ff6c 	bl	80047e0 <__ssputs_r>
 8004908:	1c43      	adds	r3, r0, #1
 800490a:	d100      	bne.n	800490e <_svfiprintf_r+0x6a>
 800490c:	e0ae      	b.n	8004a6c <_svfiprintf_r+0x1c8>
 800490e:	6962      	ldr	r2, [r4, #20]
 8004910:	9b05      	ldr	r3, [sp, #20]
 8004912:	4694      	mov	ip, r2
 8004914:	4463      	add	r3, ip
 8004916:	6163      	str	r3, [r4, #20]
 8004918:	782b      	ldrb	r3, [r5, #0]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d100      	bne.n	8004920 <_svfiprintf_r+0x7c>
 800491e:	e0a5      	b.n	8004a6c <_svfiprintf_r+0x1c8>
 8004920:	2201      	movs	r2, #1
 8004922:	2300      	movs	r3, #0
 8004924:	4252      	negs	r2, r2
 8004926:	6062      	str	r2, [r4, #4]
 8004928:	a904      	add	r1, sp, #16
 800492a:	3254      	adds	r2, #84	; 0x54
 800492c:	1852      	adds	r2, r2, r1
 800492e:	1c6e      	adds	r6, r5, #1
 8004930:	6023      	str	r3, [r4, #0]
 8004932:	60e3      	str	r3, [r4, #12]
 8004934:	60a3      	str	r3, [r4, #8]
 8004936:	7013      	strb	r3, [r2, #0]
 8004938:	65a3      	str	r3, [r4, #88]	; 0x58
 800493a:	2205      	movs	r2, #5
 800493c:	7831      	ldrb	r1, [r6, #0]
 800493e:	4854      	ldr	r0, [pc, #336]	; (8004a90 <_svfiprintf_r+0x1ec>)
 8004940:	f000 fa32 	bl	8004da8 <memchr>
 8004944:	1c75      	adds	r5, r6, #1
 8004946:	2800      	cmp	r0, #0
 8004948:	d11f      	bne.n	800498a <_svfiprintf_r+0xe6>
 800494a:	6822      	ldr	r2, [r4, #0]
 800494c:	06d3      	lsls	r3, r2, #27
 800494e:	d504      	bpl.n	800495a <_svfiprintf_r+0xb6>
 8004950:	2353      	movs	r3, #83	; 0x53
 8004952:	a904      	add	r1, sp, #16
 8004954:	185b      	adds	r3, r3, r1
 8004956:	2120      	movs	r1, #32
 8004958:	7019      	strb	r1, [r3, #0]
 800495a:	0713      	lsls	r3, r2, #28
 800495c:	d504      	bpl.n	8004968 <_svfiprintf_r+0xc4>
 800495e:	2353      	movs	r3, #83	; 0x53
 8004960:	a904      	add	r1, sp, #16
 8004962:	185b      	adds	r3, r3, r1
 8004964:	212b      	movs	r1, #43	; 0x2b
 8004966:	7019      	strb	r1, [r3, #0]
 8004968:	7833      	ldrb	r3, [r6, #0]
 800496a:	2b2a      	cmp	r3, #42	; 0x2a
 800496c:	d016      	beq.n	800499c <_svfiprintf_r+0xf8>
 800496e:	0035      	movs	r5, r6
 8004970:	2100      	movs	r1, #0
 8004972:	200a      	movs	r0, #10
 8004974:	68e3      	ldr	r3, [r4, #12]
 8004976:	782a      	ldrb	r2, [r5, #0]
 8004978:	1c6e      	adds	r6, r5, #1
 800497a:	3a30      	subs	r2, #48	; 0x30
 800497c:	2a09      	cmp	r2, #9
 800497e:	d94e      	bls.n	8004a1e <_svfiprintf_r+0x17a>
 8004980:	2900      	cmp	r1, #0
 8004982:	d111      	bne.n	80049a8 <_svfiprintf_r+0x104>
 8004984:	e017      	b.n	80049b6 <_svfiprintf_r+0x112>
 8004986:	3501      	adds	r5, #1
 8004988:	e7b0      	b.n	80048ec <_svfiprintf_r+0x48>
 800498a:	4b41      	ldr	r3, [pc, #260]	; (8004a90 <_svfiprintf_r+0x1ec>)
 800498c:	6822      	ldr	r2, [r4, #0]
 800498e:	1ac0      	subs	r0, r0, r3
 8004990:	2301      	movs	r3, #1
 8004992:	4083      	lsls	r3, r0
 8004994:	4313      	orrs	r3, r2
 8004996:	002e      	movs	r6, r5
 8004998:	6023      	str	r3, [r4, #0]
 800499a:	e7ce      	b.n	800493a <_svfiprintf_r+0x96>
 800499c:	9b07      	ldr	r3, [sp, #28]
 800499e:	1d19      	adds	r1, r3, #4
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	9107      	str	r1, [sp, #28]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	db01      	blt.n	80049ac <_svfiprintf_r+0x108>
 80049a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80049aa:	e004      	b.n	80049b6 <_svfiprintf_r+0x112>
 80049ac:	425b      	negs	r3, r3
 80049ae:	60e3      	str	r3, [r4, #12]
 80049b0:	2302      	movs	r3, #2
 80049b2:	4313      	orrs	r3, r2
 80049b4:	6023      	str	r3, [r4, #0]
 80049b6:	782b      	ldrb	r3, [r5, #0]
 80049b8:	2b2e      	cmp	r3, #46	; 0x2e
 80049ba:	d10a      	bne.n	80049d2 <_svfiprintf_r+0x12e>
 80049bc:	786b      	ldrb	r3, [r5, #1]
 80049be:	2b2a      	cmp	r3, #42	; 0x2a
 80049c0:	d135      	bne.n	8004a2e <_svfiprintf_r+0x18a>
 80049c2:	9b07      	ldr	r3, [sp, #28]
 80049c4:	3502      	adds	r5, #2
 80049c6:	1d1a      	adds	r2, r3, #4
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	9207      	str	r2, [sp, #28]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	db2b      	blt.n	8004a28 <_svfiprintf_r+0x184>
 80049d0:	9309      	str	r3, [sp, #36]	; 0x24
 80049d2:	4e30      	ldr	r6, [pc, #192]	; (8004a94 <_svfiprintf_r+0x1f0>)
 80049d4:	2203      	movs	r2, #3
 80049d6:	0030      	movs	r0, r6
 80049d8:	7829      	ldrb	r1, [r5, #0]
 80049da:	f000 f9e5 	bl	8004da8 <memchr>
 80049de:	2800      	cmp	r0, #0
 80049e0:	d006      	beq.n	80049f0 <_svfiprintf_r+0x14c>
 80049e2:	2340      	movs	r3, #64	; 0x40
 80049e4:	1b80      	subs	r0, r0, r6
 80049e6:	4083      	lsls	r3, r0
 80049e8:	6822      	ldr	r2, [r4, #0]
 80049ea:	3501      	adds	r5, #1
 80049ec:	4313      	orrs	r3, r2
 80049ee:	6023      	str	r3, [r4, #0]
 80049f0:	7829      	ldrb	r1, [r5, #0]
 80049f2:	2206      	movs	r2, #6
 80049f4:	4828      	ldr	r0, [pc, #160]	; (8004a98 <_svfiprintf_r+0x1f4>)
 80049f6:	1c6e      	adds	r6, r5, #1
 80049f8:	7621      	strb	r1, [r4, #24]
 80049fa:	f000 f9d5 	bl	8004da8 <memchr>
 80049fe:	2800      	cmp	r0, #0
 8004a00:	d03c      	beq.n	8004a7c <_svfiprintf_r+0x1d8>
 8004a02:	4b26      	ldr	r3, [pc, #152]	; (8004a9c <_svfiprintf_r+0x1f8>)
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d125      	bne.n	8004a54 <_svfiprintf_r+0x1b0>
 8004a08:	2207      	movs	r2, #7
 8004a0a:	9b07      	ldr	r3, [sp, #28]
 8004a0c:	3307      	adds	r3, #7
 8004a0e:	4393      	bics	r3, r2
 8004a10:	3308      	adds	r3, #8
 8004a12:	9307      	str	r3, [sp, #28]
 8004a14:	6963      	ldr	r3, [r4, #20]
 8004a16:	9a04      	ldr	r2, [sp, #16]
 8004a18:	189b      	adds	r3, r3, r2
 8004a1a:	6163      	str	r3, [r4, #20]
 8004a1c:	e765      	b.n	80048ea <_svfiprintf_r+0x46>
 8004a1e:	4343      	muls	r3, r0
 8004a20:	0035      	movs	r5, r6
 8004a22:	2101      	movs	r1, #1
 8004a24:	189b      	adds	r3, r3, r2
 8004a26:	e7a6      	b.n	8004976 <_svfiprintf_r+0xd2>
 8004a28:	2301      	movs	r3, #1
 8004a2a:	425b      	negs	r3, r3
 8004a2c:	e7d0      	b.n	80049d0 <_svfiprintf_r+0x12c>
 8004a2e:	2300      	movs	r3, #0
 8004a30:	200a      	movs	r0, #10
 8004a32:	001a      	movs	r2, r3
 8004a34:	3501      	adds	r5, #1
 8004a36:	6063      	str	r3, [r4, #4]
 8004a38:	7829      	ldrb	r1, [r5, #0]
 8004a3a:	1c6e      	adds	r6, r5, #1
 8004a3c:	3930      	subs	r1, #48	; 0x30
 8004a3e:	2909      	cmp	r1, #9
 8004a40:	d903      	bls.n	8004a4a <_svfiprintf_r+0x1a6>
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d0c5      	beq.n	80049d2 <_svfiprintf_r+0x12e>
 8004a46:	9209      	str	r2, [sp, #36]	; 0x24
 8004a48:	e7c3      	b.n	80049d2 <_svfiprintf_r+0x12e>
 8004a4a:	4342      	muls	r2, r0
 8004a4c:	0035      	movs	r5, r6
 8004a4e:	2301      	movs	r3, #1
 8004a50:	1852      	adds	r2, r2, r1
 8004a52:	e7f1      	b.n	8004a38 <_svfiprintf_r+0x194>
 8004a54:	ab07      	add	r3, sp, #28
 8004a56:	9300      	str	r3, [sp, #0]
 8004a58:	003a      	movs	r2, r7
 8004a5a:	0021      	movs	r1, r4
 8004a5c:	4b10      	ldr	r3, [pc, #64]	; (8004aa0 <_svfiprintf_r+0x1fc>)
 8004a5e:	9803      	ldr	r0, [sp, #12]
 8004a60:	e000      	b.n	8004a64 <_svfiprintf_r+0x1c0>
 8004a62:	bf00      	nop
 8004a64:	9004      	str	r0, [sp, #16]
 8004a66:	9b04      	ldr	r3, [sp, #16]
 8004a68:	3301      	adds	r3, #1
 8004a6a:	d1d3      	bne.n	8004a14 <_svfiprintf_r+0x170>
 8004a6c:	89bb      	ldrh	r3, [r7, #12]
 8004a6e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004a70:	065b      	lsls	r3, r3, #25
 8004a72:	d400      	bmi.n	8004a76 <_svfiprintf_r+0x1d2>
 8004a74:	e72d      	b.n	80048d2 <_svfiprintf_r+0x2e>
 8004a76:	2001      	movs	r0, #1
 8004a78:	4240      	negs	r0, r0
 8004a7a:	e72a      	b.n	80048d2 <_svfiprintf_r+0x2e>
 8004a7c:	ab07      	add	r3, sp, #28
 8004a7e:	9300      	str	r3, [sp, #0]
 8004a80:	003a      	movs	r2, r7
 8004a82:	0021      	movs	r1, r4
 8004a84:	4b06      	ldr	r3, [pc, #24]	; (8004aa0 <_svfiprintf_r+0x1fc>)
 8004a86:	9803      	ldr	r0, [sp, #12]
 8004a88:	f000 f87c 	bl	8004b84 <_printf_i>
 8004a8c:	e7ea      	b.n	8004a64 <_svfiprintf_r+0x1c0>
 8004a8e:	46c0      	nop			; (mov r8, r8)
 8004a90:	080051a8 	.word	0x080051a8
 8004a94:	080051ae 	.word	0x080051ae
 8004a98:	080051b2 	.word	0x080051b2
 8004a9c:	00000000 	.word	0x00000000
 8004aa0:	080047e1 	.word	0x080047e1

08004aa4 <_printf_common>:
 8004aa4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004aa6:	0015      	movs	r5, r2
 8004aa8:	9301      	str	r3, [sp, #4]
 8004aaa:	688a      	ldr	r2, [r1, #8]
 8004aac:	690b      	ldr	r3, [r1, #16]
 8004aae:	000c      	movs	r4, r1
 8004ab0:	9000      	str	r0, [sp, #0]
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	da00      	bge.n	8004ab8 <_printf_common+0x14>
 8004ab6:	0013      	movs	r3, r2
 8004ab8:	0022      	movs	r2, r4
 8004aba:	602b      	str	r3, [r5, #0]
 8004abc:	3243      	adds	r2, #67	; 0x43
 8004abe:	7812      	ldrb	r2, [r2, #0]
 8004ac0:	2a00      	cmp	r2, #0
 8004ac2:	d001      	beq.n	8004ac8 <_printf_common+0x24>
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	602b      	str	r3, [r5, #0]
 8004ac8:	6823      	ldr	r3, [r4, #0]
 8004aca:	069b      	lsls	r3, r3, #26
 8004acc:	d502      	bpl.n	8004ad4 <_printf_common+0x30>
 8004ace:	682b      	ldr	r3, [r5, #0]
 8004ad0:	3302      	adds	r3, #2
 8004ad2:	602b      	str	r3, [r5, #0]
 8004ad4:	6822      	ldr	r2, [r4, #0]
 8004ad6:	2306      	movs	r3, #6
 8004ad8:	0017      	movs	r7, r2
 8004ada:	401f      	ands	r7, r3
 8004adc:	421a      	tst	r2, r3
 8004ade:	d027      	beq.n	8004b30 <_printf_common+0x8c>
 8004ae0:	0023      	movs	r3, r4
 8004ae2:	3343      	adds	r3, #67	; 0x43
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	1e5a      	subs	r2, r3, #1
 8004ae8:	4193      	sbcs	r3, r2
 8004aea:	6822      	ldr	r2, [r4, #0]
 8004aec:	0692      	lsls	r2, r2, #26
 8004aee:	d430      	bmi.n	8004b52 <_printf_common+0xae>
 8004af0:	0022      	movs	r2, r4
 8004af2:	9901      	ldr	r1, [sp, #4]
 8004af4:	9800      	ldr	r0, [sp, #0]
 8004af6:	9e08      	ldr	r6, [sp, #32]
 8004af8:	3243      	adds	r2, #67	; 0x43
 8004afa:	47b0      	blx	r6
 8004afc:	1c43      	adds	r3, r0, #1
 8004afe:	d025      	beq.n	8004b4c <_printf_common+0xa8>
 8004b00:	2306      	movs	r3, #6
 8004b02:	6820      	ldr	r0, [r4, #0]
 8004b04:	682a      	ldr	r2, [r5, #0]
 8004b06:	68e1      	ldr	r1, [r4, #12]
 8004b08:	2500      	movs	r5, #0
 8004b0a:	4003      	ands	r3, r0
 8004b0c:	2b04      	cmp	r3, #4
 8004b0e:	d103      	bne.n	8004b18 <_printf_common+0x74>
 8004b10:	1a8d      	subs	r5, r1, r2
 8004b12:	43eb      	mvns	r3, r5
 8004b14:	17db      	asrs	r3, r3, #31
 8004b16:	401d      	ands	r5, r3
 8004b18:	68a3      	ldr	r3, [r4, #8]
 8004b1a:	6922      	ldr	r2, [r4, #16]
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	dd01      	ble.n	8004b24 <_printf_common+0x80>
 8004b20:	1a9b      	subs	r3, r3, r2
 8004b22:	18ed      	adds	r5, r5, r3
 8004b24:	2700      	movs	r7, #0
 8004b26:	42bd      	cmp	r5, r7
 8004b28:	d120      	bne.n	8004b6c <_printf_common+0xc8>
 8004b2a:	2000      	movs	r0, #0
 8004b2c:	e010      	b.n	8004b50 <_printf_common+0xac>
 8004b2e:	3701      	adds	r7, #1
 8004b30:	68e3      	ldr	r3, [r4, #12]
 8004b32:	682a      	ldr	r2, [r5, #0]
 8004b34:	1a9b      	subs	r3, r3, r2
 8004b36:	42bb      	cmp	r3, r7
 8004b38:	ddd2      	ble.n	8004ae0 <_printf_common+0x3c>
 8004b3a:	0022      	movs	r2, r4
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	9901      	ldr	r1, [sp, #4]
 8004b40:	9800      	ldr	r0, [sp, #0]
 8004b42:	9e08      	ldr	r6, [sp, #32]
 8004b44:	3219      	adds	r2, #25
 8004b46:	47b0      	blx	r6
 8004b48:	1c43      	adds	r3, r0, #1
 8004b4a:	d1f0      	bne.n	8004b2e <_printf_common+0x8a>
 8004b4c:	2001      	movs	r0, #1
 8004b4e:	4240      	negs	r0, r0
 8004b50:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004b52:	2030      	movs	r0, #48	; 0x30
 8004b54:	18e1      	adds	r1, r4, r3
 8004b56:	3143      	adds	r1, #67	; 0x43
 8004b58:	7008      	strb	r0, [r1, #0]
 8004b5a:	0021      	movs	r1, r4
 8004b5c:	1c5a      	adds	r2, r3, #1
 8004b5e:	3145      	adds	r1, #69	; 0x45
 8004b60:	7809      	ldrb	r1, [r1, #0]
 8004b62:	18a2      	adds	r2, r4, r2
 8004b64:	3243      	adds	r2, #67	; 0x43
 8004b66:	3302      	adds	r3, #2
 8004b68:	7011      	strb	r1, [r2, #0]
 8004b6a:	e7c1      	b.n	8004af0 <_printf_common+0x4c>
 8004b6c:	0022      	movs	r2, r4
 8004b6e:	2301      	movs	r3, #1
 8004b70:	9901      	ldr	r1, [sp, #4]
 8004b72:	9800      	ldr	r0, [sp, #0]
 8004b74:	9e08      	ldr	r6, [sp, #32]
 8004b76:	321a      	adds	r2, #26
 8004b78:	47b0      	blx	r6
 8004b7a:	1c43      	adds	r3, r0, #1
 8004b7c:	d0e6      	beq.n	8004b4c <_printf_common+0xa8>
 8004b7e:	3701      	adds	r7, #1
 8004b80:	e7d1      	b.n	8004b26 <_printf_common+0x82>
	...

08004b84 <_printf_i>:
 8004b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b86:	b08b      	sub	sp, #44	; 0x2c
 8004b88:	9206      	str	r2, [sp, #24]
 8004b8a:	000a      	movs	r2, r1
 8004b8c:	3243      	adds	r2, #67	; 0x43
 8004b8e:	9307      	str	r3, [sp, #28]
 8004b90:	9005      	str	r0, [sp, #20]
 8004b92:	9204      	str	r2, [sp, #16]
 8004b94:	7e0a      	ldrb	r2, [r1, #24]
 8004b96:	000c      	movs	r4, r1
 8004b98:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004b9a:	2a78      	cmp	r2, #120	; 0x78
 8004b9c:	d807      	bhi.n	8004bae <_printf_i+0x2a>
 8004b9e:	2a62      	cmp	r2, #98	; 0x62
 8004ba0:	d809      	bhi.n	8004bb6 <_printf_i+0x32>
 8004ba2:	2a00      	cmp	r2, #0
 8004ba4:	d100      	bne.n	8004ba8 <_printf_i+0x24>
 8004ba6:	e0c1      	b.n	8004d2c <_printf_i+0x1a8>
 8004ba8:	2a58      	cmp	r2, #88	; 0x58
 8004baa:	d100      	bne.n	8004bae <_printf_i+0x2a>
 8004bac:	e08c      	b.n	8004cc8 <_printf_i+0x144>
 8004bae:	0026      	movs	r6, r4
 8004bb0:	3642      	adds	r6, #66	; 0x42
 8004bb2:	7032      	strb	r2, [r6, #0]
 8004bb4:	e022      	b.n	8004bfc <_printf_i+0x78>
 8004bb6:	0010      	movs	r0, r2
 8004bb8:	3863      	subs	r0, #99	; 0x63
 8004bba:	2815      	cmp	r0, #21
 8004bbc:	d8f7      	bhi.n	8004bae <_printf_i+0x2a>
 8004bbe:	f7fb faab 	bl	8000118 <__gnu_thumb1_case_shi>
 8004bc2:	0016      	.short	0x0016
 8004bc4:	fff6001f 	.word	0xfff6001f
 8004bc8:	fff6fff6 	.word	0xfff6fff6
 8004bcc:	001ffff6 	.word	0x001ffff6
 8004bd0:	fff6fff6 	.word	0xfff6fff6
 8004bd4:	fff6fff6 	.word	0xfff6fff6
 8004bd8:	003600a8 	.word	0x003600a8
 8004bdc:	fff6009a 	.word	0xfff6009a
 8004be0:	00b9fff6 	.word	0x00b9fff6
 8004be4:	0036fff6 	.word	0x0036fff6
 8004be8:	fff6fff6 	.word	0xfff6fff6
 8004bec:	009e      	.short	0x009e
 8004bee:	0026      	movs	r6, r4
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	3642      	adds	r6, #66	; 0x42
 8004bf4:	1d11      	adds	r1, r2, #4
 8004bf6:	6019      	str	r1, [r3, #0]
 8004bf8:	6813      	ldr	r3, [r2, #0]
 8004bfa:	7033      	strb	r3, [r6, #0]
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e0a7      	b.n	8004d50 <_printf_i+0x1cc>
 8004c00:	6808      	ldr	r0, [r1, #0]
 8004c02:	6819      	ldr	r1, [r3, #0]
 8004c04:	1d0a      	adds	r2, r1, #4
 8004c06:	0605      	lsls	r5, r0, #24
 8004c08:	d50b      	bpl.n	8004c22 <_printf_i+0x9e>
 8004c0a:	680d      	ldr	r5, [r1, #0]
 8004c0c:	601a      	str	r2, [r3, #0]
 8004c0e:	2d00      	cmp	r5, #0
 8004c10:	da03      	bge.n	8004c1a <_printf_i+0x96>
 8004c12:	232d      	movs	r3, #45	; 0x2d
 8004c14:	9a04      	ldr	r2, [sp, #16]
 8004c16:	426d      	negs	r5, r5
 8004c18:	7013      	strb	r3, [r2, #0]
 8004c1a:	4b61      	ldr	r3, [pc, #388]	; (8004da0 <_printf_i+0x21c>)
 8004c1c:	270a      	movs	r7, #10
 8004c1e:	9303      	str	r3, [sp, #12]
 8004c20:	e01b      	b.n	8004c5a <_printf_i+0xd6>
 8004c22:	680d      	ldr	r5, [r1, #0]
 8004c24:	601a      	str	r2, [r3, #0]
 8004c26:	0641      	lsls	r1, r0, #25
 8004c28:	d5f1      	bpl.n	8004c0e <_printf_i+0x8a>
 8004c2a:	b22d      	sxth	r5, r5
 8004c2c:	e7ef      	b.n	8004c0e <_printf_i+0x8a>
 8004c2e:	680d      	ldr	r5, [r1, #0]
 8004c30:	6819      	ldr	r1, [r3, #0]
 8004c32:	1d08      	adds	r0, r1, #4
 8004c34:	6018      	str	r0, [r3, #0]
 8004c36:	062e      	lsls	r6, r5, #24
 8004c38:	d501      	bpl.n	8004c3e <_printf_i+0xba>
 8004c3a:	680d      	ldr	r5, [r1, #0]
 8004c3c:	e003      	b.n	8004c46 <_printf_i+0xc2>
 8004c3e:	066d      	lsls	r5, r5, #25
 8004c40:	d5fb      	bpl.n	8004c3a <_printf_i+0xb6>
 8004c42:	680d      	ldr	r5, [r1, #0]
 8004c44:	b2ad      	uxth	r5, r5
 8004c46:	4b56      	ldr	r3, [pc, #344]	; (8004da0 <_printf_i+0x21c>)
 8004c48:	2708      	movs	r7, #8
 8004c4a:	9303      	str	r3, [sp, #12]
 8004c4c:	2a6f      	cmp	r2, #111	; 0x6f
 8004c4e:	d000      	beq.n	8004c52 <_printf_i+0xce>
 8004c50:	3702      	adds	r7, #2
 8004c52:	0023      	movs	r3, r4
 8004c54:	2200      	movs	r2, #0
 8004c56:	3343      	adds	r3, #67	; 0x43
 8004c58:	701a      	strb	r2, [r3, #0]
 8004c5a:	6863      	ldr	r3, [r4, #4]
 8004c5c:	60a3      	str	r3, [r4, #8]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	db03      	blt.n	8004c6a <_printf_i+0xe6>
 8004c62:	2204      	movs	r2, #4
 8004c64:	6821      	ldr	r1, [r4, #0]
 8004c66:	4391      	bics	r1, r2
 8004c68:	6021      	str	r1, [r4, #0]
 8004c6a:	2d00      	cmp	r5, #0
 8004c6c:	d102      	bne.n	8004c74 <_printf_i+0xf0>
 8004c6e:	9e04      	ldr	r6, [sp, #16]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d00c      	beq.n	8004c8e <_printf_i+0x10a>
 8004c74:	9e04      	ldr	r6, [sp, #16]
 8004c76:	0028      	movs	r0, r5
 8004c78:	0039      	movs	r1, r7
 8004c7a:	f7fb fadd 	bl	8000238 <__aeabi_uidivmod>
 8004c7e:	9b03      	ldr	r3, [sp, #12]
 8004c80:	3e01      	subs	r6, #1
 8004c82:	5c5b      	ldrb	r3, [r3, r1]
 8004c84:	7033      	strb	r3, [r6, #0]
 8004c86:	002b      	movs	r3, r5
 8004c88:	0005      	movs	r5, r0
 8004c8a:	429f      	cmp	r7, r3
 8004c8c:	d9f3      	bls.n	8004c76 <_printf_i+0xf2>
 8004c8e:	2f08      	cmp	r7, #8
 8004c90:	d109      	bne.n	8004ca6 <_printf_i+0x122>
 8004c92:	6823      	ldr	r3, [r4, #0]
 8004c94:	07db      	lsls	r3, r3, #31
 8004c96:	d506      	bpl.n	8004ca6 <_printf_i+0x122>
 8004c98:	6863      	ldr	r3, [r4, #4]
 8004c9a:	6922      	ldr	r2, [r4, #16]
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	dc02      	bgt.n	8004ca6 <_printf_i+0x122>
 8004ca0:	2330      	movs	r3, #48	; 0x30
 8004ca2:	3e01      	subs	r6, #1
 8004ca4:	7033      	strb	r3, [r6, #0]
 8004ca6:	9b04      	ldr	r3, [sp, #16]
 8004ca8:	1b9b      	subs	r3, r3, r6
 8004caa:	6123      	str	r3, [r4, #16]
 8004cac:	9b07      	ldr	r3, [sp, #28]
 8004cae:	0021      	movs	r1, r4
 8004cb0:	9300      	str	r3, [sp, #0]
 8004cb2:	9805      	ldr	r0, [sp, #20]
 8004cb4:	9b06      	ldr	r3, [sp, #24]
 8004cb6:	aa09      	add	r2, sp, #36	; 0x24
 8004cb8:	f7ff fef4 	bl	8004aa4 <_printf_common>
 8004cbc:	1c43      	adds	r3, r0, #1
 8004cbe:	d14c      	bne.n	8004d5a <_printf_i+0x1d6>
 8004cc0:	2001      	movs	r0, #1
 8004cc2:	4240      	negs	r0, r0
 8004cc4:	b00b      	add	sp, #44	; 0x2c
 8004cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cc8:	3145      	adds	r1, #69	; 0x45
 8004cca:	700a      	strb	r2, [r1, #0]
 8004ccc:	4a34      	ldr	r2, [pc, #208]	; (8004da0 <_printf_i+0x21c>)
 8004cce:	9203      	str	r2, [sp, #12]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	6821      	ldr	r1, [r4, #0]
 8004cd4:	ca20      	ldmia	r2!, {r5}
 8004cd6:	601a      	str	r2, [r3, #0]
 8004cd8:	0608      	lsls	r0, r1, #24
 8004cda:	d516      	bpl.n	8004d0a <_printf_i+0x186>
 8004cdc:	07cb      	lsls	r3, r1, #31
 8004cde:	d502      	bpl.n	8004ce6 <_printf_i+0x162>
 8004ce0:	2320      	movs	r3, #32
 8004ce2:	4319      	orrs	r1, r3
 8004ce4:	6021      	str	r1, [r4, #0]
 8004ce6:	2710      	movs	r7, #16
 8004ce8:	2d00      	cmp	r5, #0
 8004cea:	d1b2      	bne.n	8004c52 <_printf_i+0xce>
 8004cec:	2320      	movs	r3, #32
 8004cee:	6822      	ldr	r2, [r4, #0]
 8004cf0:	439a      	bics	r2, r3
 8004cf2:	6022      	str	r2, [r4, #0]
 8004cf4:	e7ad      	b.n	8004c52 <_printf_i+0xce>
 8004cf6:	2220      	movs	r2, #32
 8004cf8:	6809      	ldr	r1, [r1, #0]
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	6022      	str	r2, [r4, #0]
 8004cfe:	0022      	movs	r2, r4
 8004d00:	2178      	movs	r1, #120	; 0x78
 8004d02:	3245      	adds	r2, #69	; 0x45
 8004d04:	7011      	strb	r1, [r2, #0]
 8004d06:	4a27      	ldr	r2, [pc, #156]	; (8004da4 <_printf_i+0x220>)
 8004d08:	e7e1      	b.n	8004cce <_printf_i+0x14a>
 8004d0a:	0648      	lsls	r0, r1, #25
 8004d0c:	d5e6      	bpl.n	8004cdc <_printf_i+0x158>
 8004d0e:	b2ad      	uxth	r5, r5
 8004d10:	e7e4      	b.n	8004cdc <_printf_i+0x158>
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	680d      	ldr	r5, [r1, #0]
 8004d16:	1d10      	adds	r0, r2, #4
 8004d18:	6949      	ldr	r1, [r1, #20]
 8004d1a:	6018      	str	r0, [r3, #0]
 8004d1c:	6813      	ldr	r3, [r2, #0]
 8004d1e:	062e      	lsls	r6, r5, #24
 8004d20:	d501      	bpl.n	8004d26 <_printf_i+0x1a2>
 8004d22:	6019      	str	r1, [r3, #0]
 8004d24:	e002      	b.n	8004d2c <_printf_i+0x1a8>
 8004d26:	066d      	lsls	r5, r5, #25
 8004d28:	d5fb      	bpl.n	8004d22 <_printf_i+0x19e>
 8004d2a:	8019      	strh	r1, [r3, #0]
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	9e04      	ldr	r6, [sp, #16]
 8004d30:	6123      	str	r3, [r4, #16]
 8004d32:	e7bb      	b.n	8004cac <_printf_i+0x128>
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	1d11      	adds	r1, r2, #4
 8004d38:	6019      	str	r1, [r3, #0]
 8004d3a:	6816      	ldr	r6, [r2, #0]
 8004d3c:	2100      	movs	r1, #0
 8004d3e:	0030      	movs	r0, r6
 8004d40:	6862      	ldr	r2, [r4, #4]
 8004d42:	f000 f831 	bl	8004da8 <memchr>
 8004d46:	2800      	cmp	r0, #0
 8004d48:	d001      	beq.n	8004d4e <_printf_i+0x1ca>
 8004d4a:	1b80      	subs	r0, r0, r6
 8004d4c:	6060      	str	r0, [r4, #4]
 8004d4e:	6863      	ldr	r3, [r4, #4]
 8004d50:	6123      	str	r3, [r4, #16]
 8004d52:	2300      	movs	r3, #0
 8004d54:	9a04      	ldr	r2, [sp, #16]
 8004d56:	7013      	strb	r3, [r2, #0]
 8004d58:	e7a8      	b.n	8004cac <_printf_i+0x128>
 8004d5a:	6923      	ldr	r3, [r4, #16]
 8004d5c:	0032      	movs	r2, r6
 8004d5e:	9906      	ldr	r1, [sp, #24]
 8004d60:	9805      	ldr	r0, [sp, #20]
 8004d62:	9d07      	ldr	r5, [sp, #28]
 8004d64:	47a8      	blx	r5
 8004d66:	1c43      	adds	r3, r0, #1
 8004d68:	d0aa      	beq.n	8004cc0 <_printf_i+0x13c>
 8004d6a:	6823      	ldr	r3, [r4, #0]
 8004d6c:	079b      	lsls	r3, r3, #30
 8004d6e:	d415      	bmi.n	8004d9c <_printf_i+0x218>
 8004d70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d72:	68e0      	ldr	r0, [r4, #12]
 8004d74:	4298      	cmp	r0, r3
 8004d76:	daa5      	bge.n	8004cc4 <_printf_i+0x140>
 8004d78:	0018      	movs	r0, r3
 8004d7a:	e7a3      	b.n	8004cc4 <_printf_i+0x140>
 8004d7c:	0022      	movs	r2, r4
 8004d7e:	2301      	movs	r3, #1
 8004d80:	9906      	ldr	r1, [sp, #24]
 8004d82:	9805      	ldr	r0, [sp, #20]
 8004d84:	9e07      	ldr	r6, [sp, #28]
 8004d86:	3219      	adds	r2, #25
 8004d88:	47b0      	blx	r6
 8004d8a:	1c43      	adds	r3, r0, #1
 8004d8c:	d098      	beq.n	8004cc0 <_printf_i+0x13c>
 8004d8e:	3501      	adds	r5, #1
 8004d90:	68e3      	ldr	r3, [r4, #12]
 8004d92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d94:	1a9b      	subs	r3, r3, r2
 8004d96:	42ab      	cmp	r3, r5
 8004d98:	dcf0      	bgt.n	8004d7c <_printf_i+0x1f8>
 8004d9a:	e7e9      	b.n	8004d70 <_printf_i+0x1ec>
 8004d9c:	2500      	movs	r5, #0
 8004d9e:	e7f7      	b.n	8004d90 <_printf_i+0x20c>
 8004da0:	080051b9 	.word	0x080051b9
 8004da4:	080051ca 	.word	0x080051ca

08004da8 <memchr>:
 8004da8:	b2c9      	uxtb	r1, r1
 8004daa:	1882      	adds	r2, r0, r2
 8004dac:	4290      	cmp	r0, r2
 8004dae:	d101      	bne.n	8004db4 <memchr+0xc>
 8004db0:	2000      	movs	r0, #0
 8004db2:	4770      	bx	lr
 8004db4:	7803      	ldrb	r3, [r0, #0]
 8004db6:	428b      	cmp	r3, r1
 8004db8:	d0fb      	beq.n	8004db2 <memchr+0xa>
 8004dba:	3001      	adds	r0, #1
 8004dbc:	e7f6      	b.n	8004dac <memchr+0x4>

08004dbe <memcpy>:
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	b510      	push	{r4, lr}
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d100      	bne.n	8004dc8 <memcpy+0xa>
 8004dc6:	bd10      	pop	{r4, pc}
 8004dc8:	5ccc      	ldrb	r4, [r1, r3]
 8004dca:	54c4      	strb	r4, [r0, r3]
 8004dcc:	3301      	adds	r3, #1
 8004dce:	e7f8      	b.n	8004dc2 <memcpy+0x4>

08004dd0 <memmove>:
 8004dd0:	b510      	push	{r4, lr}
 8004dd2:	4288      	cmp	r0, r1
 8004dd4:	d902      	bls.n	8004ddc <memmove+0xc>
 8004dd6:	188b      	adds	r3, r1, r2
 8004dd8:	4298      	cmp	r0, r3
 8004dda:	d303      	bcc.n	8004de4 <memmove+0x14>
 8004ddc:	2300      	movs	r3, #0
 8004dde:	e007      	b.n	8004df0 <memmove+0x20>
 8004de0:	5c8b      	ldrb	r3, [r1, r2]
 8004de2:	5483      	strb	r3, [r0, r2]
 8004de4:	3a01      	subs	r2, #1
 8004de6:	d2fb      	bcs.n	8004de0 <memmove+0x10>
 8004de8:	bd10      	pop	{r4, pc}
 8004dea:	5ccc      	ldrb	r4, [r1, r3]
 8004dec:	54c4      	strb	r4, [r0, r3]
 8004dee:	3301      	adds	r3, #1
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d1fa      	bne.n	8004dea <memmove+0x1a>
 8004df4:	e7f8      	b.n	8004de8 <memmove+0x18>
	...

08004df8 <_free_r>:
 8004df8:	b570      	push	{r4, r5, r6, lr}
 8004dfa:	0005      	movs	r5, r0
 8004dfc:	2900      	cmp	r1, #0
 8004dfe:	d010      	beq.n	8004e22 <_free_r+0x2a>
 8004e00:	1f0c      	subs	r4, r1, #4
 8004e02:	6823      	ldr	r3, [r4, #0]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	da00      	bge.n	8004e0a <_free_r+0x12>
 8004e08:	18e4      	adds	r4, r4, r3
 8004e0a:	0028      	movs	r0, r5
 8004e0c:	f000 f918 	bl	8005040 <__malloc_lock>
 8004e10:	4a1d      	ldr	r2, [pc, #116]	; (8004e88 <_free_r+0x90>)
 8004e12:	6813      	ldr	r3, [r2, #0]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d105      	bne.n	8004e24 <_free_r+0x2c>
 8004e18:	6063      	str	r3, [r4, #4]
 8004e1a:	6014      	str	r4, [r2, #0]
 8004e1c:	0028      	movs	r0, r5
 8004e1e:	f000 f917 	bl	8005050 <__malloc_unlock>
 8004e22:	bd70      	pop	{r4, r5, r6, pc}
 8004e24:	42a3      	cmp	r3, r4
 8004e26:	d908      	bls.n	8004e3a <_free_r+0x42>
 8004e28:	6821      	ldr	r1, [r4, #0]
 8004e2a:	1860      	adds	r0, r4, r1
 8004e2c:	4283      	cmp	r3, r0
 8004e2e:	d1f3      	bne.n	8004e18 <_free_r+0x20>
 8004e30:	6818      	ldr	r0, [r3, #0]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	1841      	adds	r1, r0, r1
 8004e36:	6021      	str	r1, [r4, #0]
 8004e38:	e7ee      	b.n	8004e18 <_free_r+0x20>
 8004e3a:	001a      	movs	r2, r3
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d001      	beq.n	8004e46 <_free_r+0x4e>
 8004e42:	42a3      	cmp	r3, r4
 8004e44:	d9f9      	bls.n	8004e3a <_free_r+0x42>
 8004e46:	6811      	ldr	r1, [r2, #0]
 8004e48:	1850      	adds	r0, r2, r1
 8004e4a:	42a0      	cmp	r0, r4
 8004e4c:	d10b      	bne.n	8004e66 <_free_r+0x6e>
 8004e4e:	6820      	ldr	r0, [r4, #0]
 8004e50:	1809      	adds	r1, r1, r0
 8004e52:	1850      	adds	r0, r2, r1
 8004e54:	6011      	str	r1, [r2, #0]
 8004e56:	4283      	cmp	r3, r0
 8004e58:	d1e0      	bne.n	8004e1c <_free_r+0x24>
 8004e5a:	6818      	ldr	r0, [r3, #0]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	1841      	adds	r1, r0, r1
 8004e60:	6011      	str	r1, [r2, #0]
 8004e62:	6053      	str	r3, [r2, #4]
 8004e64:	e7da      	b.n	8004e1c <_free_r+0x24>
 8004e66:	42a0      	cmp	r0, r4
 8004e68:	d902      	bls.n	8004e70 <_free_r+0x78>
 8004e6a:	230c      	movs	r3, #12
 8004e6c:	602b      	str	r3, [r5, #0]
 8004e6e:	e7d5      	b.n	8004e1c <_free_r+0x24>
 8004e70:	6821      	ldr	r1, [r4, #0]
 8004e72:	1860      	adds	r0, r4, r1
 8004e74:	4283      	cmp	r3, r0
 8004e76:	d103      	bne.n	8004e80 <_free_r+0x88>
 8004e78:	6818      	ldr	r0, [r3, #0]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	1841      	adds	r1, r0, r1
 8004e7e:	6021      	str	r1, [r4, #0]
 8004e80:	6063      	str	r3, [r4, #4]
 8004e82:	6054      	str	r4, [r2, #4]
 8004e84:	e7ca      	b.n	8004e1c <_free_r+0x24>
 8004e86:	46c0      	nop			; (mov r8, r8)
 8004e88:	20000134 	.word	0x20000134

08004e8c <sbrk_aligned>:
 8004e8c:	b570      	push	{r4, r5, r6, lr}
 8004e8e:	4e0f      	ldr	r6, [pc, #60]	; (8004ecc <sbrk_aligned+0x40>)
 8004e90:	000d      	movs	r5, r1
 8004e92:	6831      	ldr	r1, [r6, #0]
 8004e94:	0004      	movs	r4, r0
 8004e96:	2900      	cmp	r1, #0
 8004e98:	d102      	bne.n	8004ea0 <sbrk_aligned+0x14>
 8004e9a:	f000 f8bf 	bl	800501c <_sbrk_r>
 8004e9e:	6030      	str	r0, [r6, #0]
 8004ea0:	0029      	movs	r1, r5
 8004ea2:	0020      	movs	r0, r4
 8004ea4:	f000 f8ba 	bl	800501c <_sbrk_r>
 8004ea8:	1c43      	adds	r3, r0, #1
 8004eaa:	d00a      	beq.n	8004ec2 <sbrk_aligned+0x36>
 8004eac:	2303      	movs	r3, #3
 8004eae:	1cc5      	adds	r5, r0, #3
 8004eb0:	439d      	bics	r5, r3
 8004eb2:	42a8      	cmp	r0, r5
 8004eb4:	d007      	beq.n	8004ec6 <sbrk_aligned+0x3a>
 8004eb6:	1a29      	subs	r1, r5, r0
 8004eb8:	0020      	movs	r0, r4
 8004eba:	f000 f8af 	bl	800501c <_sbrk_r>
 8004ebe:	1c43      	adds	r3, r0, #1
 8004ec0:	d101      	bne.n	8004ec6 <sbrk_aligned+0x3a>
 8004ec2:	2501      	movs	r5, #1
 8004ec4:	426d      	negs	r5, r5
 8004ec6:	0028      	movs	r0, r5
 8004ec8:	bd70      	pop	{r4, r5, r6, pc}
 8004eca:	46c0      	nop			; (mov r8, r8)
 8004ecc:	20000138 	.word	0x20000138

08004ed0 <_malloc_r>:
 8004ed0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ed2:	2203      	movs	r2, #3
 8004ed4:	1ccb      	adds	r3, r1, #3
 8004ed6:	4393      	bics	r3, r2
 8004ed8:	3308      	adds	r3, #8
 8004eda:	0006      	movs	r6, r0
 8004edc:	001f      	movs	r7, r3
 8004ede:	2b0c      	cmp	r3, #12
 8004ee0:	d232      	bcs.n	8004f48 <_malloc_r+0x78>
 8004ee2:	270c      	movs	r7, #12
 8004ee4:	42b9      	cmp	r1, r7
 8004ee6:	d831      	bhi.n	8004f4c <_malloc_r+0x7c>
 8004ee8:	0030      	movs	r0, r6
 8004eea:	f000 f8a9 	bl	8005040 <__malloc_lock>
 8004eee:	4d32      	ldr	r5, [pc, #200]	; (8004fb8 <_malloc_r+0xe8>)
 8004ef0:	682b      	ldr	r3, [r5, #0]
 8004ef2:	001c      	movs	r4, r3
 8004ef4:	2c00      	cmp	r4, #0
 8004ef6:	d12e      	bne.n	8004f56 <_malloc_r+0x86>
 8004ef8:	0039      	movs	r1, r7
 8004efa:	0030      	movs	r0, r6
 8004efc:	f7ff ffc6 	bl	8004e8c <sbrk_aligned>
 8004f00:	0004      	movs	r4, r0
 8004f02:	1c43      	adds	r3, r0, #1
 8004f04:	d11e      	bne.n	8004f44 <_malloc_r+0x74>
 8004f06:	682c      	ldr	r4, [r5, #0]
 8004f08:	0025      	movs	r5, r4
 8004f0a:	2d00      	cmp	r5, #0
 8004f0c:	d14a      	bne.n	8004fa4 <_malloc_r+0xd4>
 8004f0e:	6823      	ldr	r3, [r4, #0]
 8004f10:	0029      	movs	r1, r5
 8004f12:	18e3      	adds	r3, r4, r3
 8004f14:	0030      	movs	r0, r6
 8004f16:	9301      	str	r3, [sp, #4]
 8004f18:	f000 f880 	bl	800501c <_sbrk_r>
 8004f1c:	9b01      	ldr	r3, [sp, #4]
 8004f1e:	4283      	cmp	r3, r0
 8004f20:	d143      	bne.n	8004faa <_malloc_r+0xda>
 8004f22:	6823      	ldr	r3, [r4, #0]
 8004f24:	3703      	adds	r7, #3
 8004f26:	1aff      	subs	r7, r7, r3
 8004f28:	2303      	movs	r3, #3
 8004f2a:	439f      	bics	r7, r3
 8004f2c:	3708      	adds	r7, #8
 8004f2e:	2f0c      	cmp	r7, #12
 8004f30:	d200      	bcs.n	8004f34 <_malloc_r+0x64>
 8004f32:	270c      	movs	r7, #12
 8004f34:	0039      	movs	r1, r7
 8004f36:	0030      	movs	r0, r6
 8004f38:	f7ff ffa8 	bl	8004e8c <sbrk_aligned>
 8004f3c:	1c43      	adds	r3, r0, #1
 8004f3e:	d034      	beq.n	8004faa <_malloc_r+0xda>
 8004f40:	6823      	ldr	r3, [r4, #0]
 8004f42:	19df      	adds	r7, r3, r7
 8004f44:	6027      	str	r7, [r4, #0]
 8004f46:	e013      	b.n	8004f70 <_malloc_r+0xa0>
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	dacb      	bge.n	8004ee4 <_malloc_r+0x14>
 8004f4c:	230c      	movs	r3, #12
 8004f4e:	2500      	movs	r5, #0
 8004f50:	6033      	str	r3, [r6, #0]
 8004f52:	0028      	movs	r0, r5
 8004f54:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004f56:	6822      	ldr	r2, [r4, #0]
 8004f58:	1bd1      	subs	r1, r2, r7
 8004f5a:	d420      	bmi.n	8004f9e <_malloc_r+0xce>
 8004f5c:	290b      	cmp	r1, #11
 8004f5e:	d917      	bls.n	8004f90 <_malloc_r+0xc0>
 8004f60:	19e2      	adds	r2, r4, r7
 8004f62:	6027      	str	r7, [r4, #0]
 8004f64:	42a3      	cmp	r3, r4
 8004f66:	d111      	bne.n	8004f8c <_malloc_r+0xbc>
 8004f68:	602a      	str	r2, [r5, #0]
 8004f6a:	6863      	ldr	r3, [r4, #4]
 8004f6c:	6011      	str	r1, [r2, #0]
 8004f6e:	6053      	str	r3, [r2, #4]
 8004f70:	0030      	movs	r0, r6
 8004f72:	0025      	movs	r5, r4
 8004f74:	f000 f86c 	bl	8005050 <__malloc_unlock>
 8004f78:	2207      	movs	r2, #7
 8004f7a:	350b      	adds	r5, #11
 8004f7c:	1d23      	adds	r3, r4, #4
 8004f7e:	4395      	bics	r5, r2
 8004f80:	1aea      	subs	r2, r5, r3
 8004f82:	429d      	cmp	r5, r3
 8004f84:	d0e5      	beq.n	8004f52 <_malloc_r+0x82>
 8004f86:	1b5b      	subs	r3, r3, r5
 8004f88:	50a3      	str	r3, [r4, r2]
 8004f8a:	e7e2      	b.n	8004f52 <_malloc_r+0x82>
 8004f8c:	605a      	str	r2, [r3, #4]
 8004f8e:	e7ec      	b.n	8004f6a <_malloc_r+0x9a>
 8004f90:	6862      	ldr	r2, [r4, #4]
 8004f92:	42a3      	cmp	r3, r4
 8004f94:	d101      	bne.n	8004f9a <_malloc_r+0xca>
 8004f96:	602a      	str	r2, [r5, #0]
 8004f98:	e7ea      	b.n	8004f70 <_malloc_r+0xa0>
 8004f9a:	605a      	str	r2, [r3, #4]
 8004f9c:	e7e8      	b.n	8004f70 <_malloc_r+0xa0>
 8004f9e:	0023      	movs	r3, r4
 8004fa0:	6864      	ldr	r4, [r4, #4]
 8004fa2:	e7a7      	b.n	8004ef4 <_malloc_r+0x24>
 8004fa4:	002c      	movs	r4, r5
 8004fa6:	686d      	ldr	r5, [r5, #4]
 8004fa8:	e7af      	b.n	8004f0a <_malloc_r+0x3a>
 8004faa:	230c      	movs	r3, #12
 8004fac:	0030      	movs	r0, r6
 8004fae:	6033      	str	r3, [r6, #0]
 8004fb0:	f000 f84e 	bl	8005050 <__malloc_unlock>
 8004fb4:	e7cd      	b.n	8004f52 <_malloc_r+0x82>
 8004fb6:	46c0      	nop			; (mov r8, r8)
 8004fb8:	20000134 	.word	0x20000134

08004fbc <_realloc_r>:
 8004fbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004fbe:	0007      	movs	r7, r0
 8004fc0:	000e      	movs	r6, r1
 8004fc2:	0014      	movs	r4, r2
 8004fc4:	2900      	cmp	r1, #0
 8004fc6:	d105      	bne.n	8004fd4 <_realloc_r+0x18>
 8004fc8:	0011      	movs	r1, r2
 8004fca:	f7ff ff81 	bl	8004ed0 <_malloc_r>
 8004fce:	0005      	movs	r5, r0
 8004fd0:	0028      	movs	r0, r5
 8004fd2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004fd4:	2a00      	cmp	r2, #0
 8004fd6:	d103      	bne.n	8004fe0 <_realloc_r+0x24>
 8004fd8:	f7ff ff0e 	bl	8004df8 <_free_r>
 8004fdc:	0025      	movs	r5, r4
 8004fde:	e7f7      	b.n	8004fd0 <_realloc_r+0x14>
 8004fe0:	f000 f83e 	bl	8005060 <_malloc_usable_size_r>
 8004fe4:	9001      	str	r0, [sp, #4]
 8004fe6:	4284      	cmp	r4, r0
 8004fe8:	d803      	bhi.n	8004ff2 <_realloc_r+0x36>
 8004fea:	0035      	movs	r5, r6
 8004fec:	0843      	lsrs	r3, r0, #1
 8004fee:	42a3      	cmp	r3, r4
 8004ff0:	d3ee      	bcc.n	8004fd0 <_realloc_r+0x14>
 8004ff2:	0021      	movs	r1, r4
 8004ff4:	0038      	movs	r0, r7
 8004ff6:	f7ff ff6b 	bl	8004ed0 <_malloc_r>
 8004ffa:	1e05      	subs	r5, r0, #0
 8004ffc:	d0e8      	beq.n	8004fd0 <_realloc_r+0x14>
 8004ffe:	9b01      	ldr	r3, [sp, #4]
 8005000:	0022      	movs	r2, r4
 8005002:	429c      	cmp	r4, r3
 8005004:	d900      	bls.n	8005008 <_realloc_r+0x4c>
 8005006:	001a      	movs	r2, r3
 8005008:	0031      	movs	r1, r6
 800500a:	0028      	movs	r0, r5
 800500c:	f7ff fed7 	bl	8004dbe <memcpy>
 8005010:	0031      	movs	r1, r6
 8005012:	0038      	movs	r0, r7
 8005014:	f7ff fef0 	bl	8004df8 <_free_r>
 8005018:	e7da      	b.n	8004fd0 <_realloc_r+0x14>
	...

0800501c <_sbrk_r>:
 800501c:	2300      	movs	r3, #0
 800501e:	b570      	push	{r4, r5, r6, lr}
 8005020:	4d06      	ldr	r5, [pc, #24]	; (800503c <_sbrk_r+0x20>)
 8005022:	0004      	movs	r4, r0
 8005024:	0008      	movs	r0, r1
 8005026:	602b      	str	r3, [r5, #0]
 8005028:	f7fd fb8a 	bl	8002740 <_sbrk>
 800502c:	1c43      	adds	r3, r0, #1
 800502e:	d103      	bne.n	8005038 <_sbrk_r+0x1c>
 8005030:	682b      	ldr	r3, [r5, #0]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d000      	beq.n	8005038 <_sbrk_r+0x1c>
 8005036:	6023      	str	r3, [r4, #0]
 8005038:	bd70      	pop	{r4, r5, r6, pc}
 800503a:	46c0      	nop			; (mov r8, r8)
 800503c:	2000013c 	.word	0x2000013c

08005040 <__malloc_lock>:
 8005040:	b510      	push	{r4, lr}
 8005042:	4802      	ldr	r0, [pc, #8]	; (800504c <__malloc_lock+0xc>)
 8005044:	f000 f814 	bl	8005070 <__retarget_lock_acquire_recursive>
 8005048:	bd10      	pop	{r4, pc}
 800504a:	46c0      	nop			; (mov r8, r8)
 800504c:	20000140 	.word	0x20000140

08005050 <__malloc_unlock>:
 8005050:	b510      	push	{r4, lr}
 8005052:	4802      	ldr	r0, [pc, #8]	; (800505c <__malloc_unlock+0xc>)
 8005054:	f000 f80d 	bl	8005072 <__retarget_lock_release_recursive>
 8005058:	bd10      	pop	{r4, pc}
 800505a:	46c0      	nop			; (mov r8, r8)
 800505c:	20000140 	.word	0x20000140

08005060 <_malloc_usable_size_r>:
 8005060:	1f0b      	subs	r3, r1, #4
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	1f18      	subs	r0, r3, #4
 8005066:	2b00      	cmp	r3, #0
 8005068:	da01      	bge.n	800506e <_malloc_usable_size_r+0xe>
 800506a:	580b      	ldr	r3, [r1, r0]
 800506c:	18c0      	adds	r0, r0, r3
 800506e:	4770      	bx	lr

08005070 <__retarget_lock_acquire_recursive>:
 8005070:	4770      	bx	lr

08005072 <__retarget_lock_release_recursive>:
 8005072:	4770      	bx	lr

08005074 <_init>:
 8005074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005076:	46c0      	nop			; (mov r8, r8)
 8005078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800507a:	bc08      	pop	{r3}
 800507c:	469e      	mov	lr, r3
 800507e:	4770      	bx	lr

08005080 <_fini>:
 8005080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005082:	46c0      	nop			; (mov r8, r8)
 8005084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005086:	bc08      	pop	{r3}
 8005088:	469e      	mov	lr, r3
 800508a:	4770      	bx	lr
